{"version":3,"file":"ej2-compression.es2015.js","sources":["../src/es6/utils.js","../src/es6/zip-archive.js","../src/es6/compression-writer.js","../src/es6/decompressor-huffman-tree.js","../src/es6/checksum-calculator.js","../src/es6/compression-reader.js","../src/es6/index.js"],"sourcesContent":["/* eslint-disable */\nexport class Utils {\n    static bitReverse(value) {\n        return (Utils.reverseBits[value & 15] << 12\n            | Utils.reverseBits[(value >> 4) & 15] << 8\n            | Utils.reverseBits[(value >> 8) & 15] << 4\n            | Utils.reverseBits[value >> 12]);\n    }\n    static bitConverterToInt32(value, index) {\n        return value[index] | value[index + 1] << 8 | value[index + 2] << 16 | value[index + 3] << 24;\n    }\n    static bitConverterToInt16(value, index) {\n        return value[index] | value[index + 1] << 8;\n    }\n    static bitConverterToUInt32(value) {\n        let uint = new Uint32Array(1);\n        uint[0] = value;\n        return uint[0];\n    }\n    static bitConverterToUInt16(value, index) {\n        let uint = new Uint16Array(1);\n        uint[0] = (value[index] | value[index + 1] << 8);\n        return uint[0];\n    }\n    static bitConverterUintToInt32(value) {\n        let uint = new Int32Array(1);\n        uint[0] = value;\n        return uint[0];\n    }\n    static bitConverterInt32ToUint(value) {\n        let uint = new Uint32Array(1);\n        uint[0] = value;\n        return uint[0];\n    }\n    static bitConverterInt32ToInt16(value) {\n        let uint = new Int16Array(1);\n        uint[0] = value;\n        return uint[0];\n    }\n    static byteToString(value) {\n        let str = '';\n        for (let i = 0; i < value.length; i++) {\n            str += String.fromCharCode(value[i]);\n        }\n        return str;\n    }\n    static byteIntToString(value) {\n        let str = '';\n        for (let i = 0; i < value.length; i++) {\n            str += String.fromCharCode(value[i]);\n        }\n        return str;\n    }\n    static arrayCopy(source, sourceIndex, destination, destinationIndex, dataToCopy) {\n        let temp = new Uint8Array(source.buffer, sourceIndex);\n        let data = temp.subarray(0, dataToCopy);\n        destination.set(data, destinationIndex);\n    }\n    static mergeArray(arrayOne, arrayTwo) {\n        let mergedArray = new Uint8Array(arrayOne.length + arrayTwo.length);\n        mergedArray.set(arrayOne);\n        mergedArray.set(arrayTwo, arrayOne.length);\n        return mergedArray;\n    }\n    /**\n     * @private\n     */\n    static encodedString(input) {\n        let keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        let chr1;\n        let chr2;\n        let chr3;\n        let encode1;\n        let encode2;\n        let encode3;\n        let encode4;\n        let count = 0;\n        let resultIndex = 0;\n        /*let dataUrlPrefix: string = 'data:';*/\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n        let totalLength = input.length * 3 / 4;\n        if (input.charAt(input.length - 1) === keyStr.charAt(64)) {\n            totalLength--;\n        }\n        if (input.charAt(input.length - 2) === keyStr.charAt(64)) {\n            totalLength--;\n        }\n        if (totalLength % 1 !== 0) {\n            // totalLength is not an integer, the length does not match a valid\n            // base64 content. That can happen if:\n            // - the input is not a base64 content\n            // - the input is *almost* a base64 content, with a extra chars at the\n            // beginning or at the end\n            // - the input uses a base64 variant (base64url for example)\n            throw new Error('Invalid base64 input, bad content length.');\n        }\n        let output = new Uint8Array(totalLength | 0);\n        while (count < input.length) {\n            encode1 = keyStr.indexOf(input.charAt(count++));\n            encode2 = keyStr.indexOf(input.charAt(count++));\n            encode3 = keyStr.indexOf(input.charAt(count++));\n            encode4 = keyStr.indexOf(input.charAt(count++));\n            chr1 = (encode1 << 2) | (encode2 >> 4);\n            chr2 = ((encode2 & 15) << 4) | (encode3 >> 2);\n            chr3 = ((encode3 & 3) << 6) | encode4;\n            output[resultIndex++] = chr1;\n            if (encode3 !== 64) {\n                output[resultIndex++] = chr2;\n            }\n            if (encode4 !== 64) {\n                output[resultIndex++] = chr3;\n            }\n        }\n        return output;\n    }\n}\nUtils.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];\nUtils.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n/* eslint-enable */ \n","/* eslint-disable */\nimport { CompressedStreamWriter, Stream, CompressedStreamReader } from './index';\nimport { Save } from '@syncfusion/ej2-file-utils';\nimport { Utils } from './utils';\nconst CRC32TABLE = [];\n/// <summary>\n/// Size of the int value in bytes.\n/// </summary>\nconst INT_SIZE = 4;\n/// <summary>\n/// Size of the short value in bytes.\n/// </summary>\nconst SHORT_SIZE = 2;\n/// <summary>\n/// End of central directory signature.\n/// </summary>\nconst CentralDirectoryEndSignature = 0x06054b50;\n/// <summary>\n/// Offset to the size field in the End of central directory record.\n/// </summary>\nconst CentralDirSizeOffset = 12;\n/// <summary>\n/// Central header signature.\n/// </summary>\nconst CentralHeaderSignature = 0x02014b50;\n/// <summary>\n/// Buffer size.\n/// </summary>\nconst BufferSize = 4096;\n/**\n * class provide compression library\n * ```typescript\n * let archive = new ZipArchive();\n * archive.compressionLevel = 'Normal';\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * archive.addItem(archiveItem);\n * archive.save(fileName.zip);\n * ```\n */\nexport class ZipArchive {\n    get items() {\n        return this.files;\n    }\n    /**\n     * gets compression level\n     */\n    get compressionLevel() {\n        return this.level;\n    }\n    /**\n     * sets compression level\n     */\n    set compressionLevel(level) {\n        this.level = level;\n    }\n    /**\n     * gets items count\n     */\n    get length() {\n        if (this.files === undefined) {\n            return 0;\n        }\n        return this.files.length;\n    }\n    /**\n     * constructor for creating ZipArchive instance\n     */\n    constructor() {\n        if (CRC32TABLE.length === 0) {\n            ZipArchive.initCrc32Table();\n        }\n        this.files = [];\n        this.level = 'Normal';\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n    }\n    /**\n     * add new item to archive\n     * @param {ZipArchiveItem} item - item to be added\n     * @returns {void}\n     */\n    addItem(item) {\n        if (item === null || item === undefined) {\n            throw new Error('ArgumentException: item cannot be null or undefined');\n        }\n        for (let i = 0; i < this.files.length; i++) {\n            let file = this.files[i];\n            if (file instanceof ZipArchiveItem) {\n                if (file.name === item.name) {\n                    throw new Error('item with same name already exist');\n                }\n            }\n        }\n        this.files.push(item);\n    }\n    /**\n     * add new directory to archive\n     * @param directoryName directoryName to be created\n     * @returns {void}\n     */\n    addDirectory(directoryName) {\n        if (directoryName === null || directoryName === undefined) {\n            throw new Error('ArgumentException: string cannot be null or undefined');\n        }\n        if (directoryName.length === 0) {\n            throw new Error('ArgumentException: string cannot be empty');\n        }\n        if (directoryName.slice(-1) !== '/') {\n            directoryName += '/';\n        }\n        if (this.files.indexOf(directoryName) !== -1) {\n            throw new Error('item with same name already exist');\n        }\n        this.files.push(directoryName);\n    }\n    /**\n     * gets item at specified index\n     * @param {number} index - item index\n     * @returns {ZipArchiveItem}\n     */\n    getItem(index) {\n        if (index >= 0 && index < this.files.length) {\n            return this.files[index];\n        }\n        return undefined;\n    }\n    /**\n     * determines whether an element is in the collection\n     * @param {string | ZipArchiveItem} item - item to search\n     * @returns {boolean}\n     */\n    contains(item) {\n        return this.files.indexOf(item) !== -1 ? true : false;\n    }\n    open(base64String) {\n        //return promise = new Promise((resolve: Function, reject: Function) => {\n        let zipArchive = this;\n        let zipByteArray = Utils.encodedString(base64String);\n        if (zipByteArray.length == 0)\n            throw new DOMException(\"stream\");\n        let stream = new Stream(zipByteArray);\n        //let lCentralDirEndPosition = this.findValueFromEnd( arrBuffer, Constants.CentralDirectoryEndSignature, 65557 );\n        let lCentralDirEndPosition = ZipArchive.findValueFromEnd(stream, CentralDirectoryEndSignature, 65557);\n        if (lCentralDirEndPosition < 0)\n            throw new DOMException(\"Can't locate end of central directory record. Possible wrong file format or archive is corrupt.\");\n        // Step2. Locate central directory and iterate through all items\n        stream.position = lCentralDirEndPosition + CentralDirSizeOffset;\n        let iCentralDirSize = ZipArchive.ReadInt32(stream);\n        let lCentralDirPosition = lCentralDirEndPosition - iCentralDirSize;\n        // verify that this is really central directory\n        stream.position = lCentralDirPosition;\n        this.readCentralDirectoryDataAndExtractItems(stream);\n        //});\n        // let zipArchive: ZipArchive = this;\n        //let promise: Promise<ZipArchive>;\n        // return promise = new Promise((resolve: Function, reject: Function) => {\n        //     let reader: FileReader = new FileReader();\n        //     reader.onload = (e: Event) => {\n        //         let data: Uint8Array = new Uint8Array((e.target as any).result);\n        //         let zipReader: ZipReader = new ZipReader(data);\n        //         zipReader.readEntries().then((entries: ZipEntry[]) => {\n        //             for (let i: number = 0; i < entries.length; i++) {\n        //                 let entry: ZipEntry = entries[i];\n        //                 let item: ZipArchiveItem = new ZipArchiveItem(zipArchive, entry.fileName);\n        //                 item.data = entry.data;\n        //                 item.compressionMethod = entry.compressionMethod;\n        //                 item.crc = entry.crc;\n        //                 item.lastModified = entry.lastModified;\n        //                 item.lastModifiedDate = entry.lastModifiedDate;\n        //                 item.size = entry.size;\n        //                 item.uncompressedSize = entry.uncompressedSize;\n        //                 zipArchive.addItem(item);\n        //             }\n        //             resolve(zipArchive);\n        //         });\n        //     };\n        //     reader.readAsArrayBuffer(fileName);\n        // });\n    }\n    /// <summary>\n    /// Read central directory record from the stream.\n    /// </summary>\n    /// <param name=\"stream\">Stream to read from.</param>\n    readCentralDirectoryDataAndExtractItems(stream) {\n        if (stream == null)\n            throw new DOMException(\"stream\");\n        let itemHelper;\n        while (ZipArchive.ReadInt32(stream) == CentralHeaderSignature) {\n            itemHelper = new ZipArchiveItemHelper();\n            itemHelper.readCentralDirectoryData(stream);\n            itemHelper;\n            // let item: ZipArchiveItem = new ZipArchiveItem(this);\n            // item.ReadCentralDirectoryData(stream);\n            // m_arrItems.Add(item);\n        }\n        itemHelper.readData(stream, itemHelper.checkCrc);\n        itemHelper.decompressData();\n        this.files.push(new ZipArchiveItem(itemHelper.unCompressedStream.buffer, itemHelper.name));\n    }\n    /**\n     * save archive with specified file name\n     * @param {string} fileName save archive with specified file name\n     * @returns {Promise<ZipArchive>}\n     */\n    save(fileName) {\n        if (fileName === null || fileName === undefined || fileName.length === 0) {\n            throw new Error('ArgumentException: fileName cannot be null or undefined');\n        }\n        if (this.files.length === 0) {\n            throw new Error('InvalidOperation');\n        }\n        let zipArchive = this;\n        let promise;\n        return promise = new Promise((resolve, reject) => {\n            zipArchive.saveInternal(fileName, false).then(() => {\n                resolve(zipArchive);\n            });\n        });\n    }\n    /**\n     * Save archive as blob\n     * @return {Promise<Blob>}\n     */\n    saveAsBlob() {\n        let zipArchive = this;\n        let promise;\n        return promise = new Promise((resolve, reject) => {\n            zipArchive.saveInternal('', true).then((blob) => {\n                resolve(blob);\n            });\n        });\n    }\n    saveInternal(fileName, skipFileSave) {\n        let zipArchive = this;\n        let promise;\n        return promise = new Promise((resolve, reject) => {\n            let zipData = [];\n            let dirLength = 0;\n            for (let i = 0; i < zipArchive.files.length; i++) {\n                let compressedObject = this.getCompressedData(this.files[i]);\n                compressedObject.then((data) => {\n                    dirLength = zipArchive.constructZippedObject(zipData, data, dirLength, data.isDirectory);\n                    if (zipData.length === zipArchive.files.length) {\n                        let blob = zipArchive.writeZippedContent(fileName, zipData, dirLength, skipFileSave);\n                        resolve(blob);\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    destroy() {\n        if (this.files !== undefined && this.files.length > 0) {\n            for (let i = 0; i < this.files.length; i++) {\n                let file = this.files[i];\n                if (file instanceof ZipArchiveItem) {\n                    file.destroy();\n                }\n                file = undefined;\n            }\n            this.files = [];\n        }\n        this.files = undefined;\n        this.level = undefined;\n    }\n    getCompressedData(item) {\n        let zipArchive = this;\n        let promise = new Promise((resolve, reject) => {\n            if (item instanceof ZipArchiveItem) {\n                let reader = new FileReader();\n                reader.onload = () => {\n                    let input = new Uint8Array(reader.result);\n                    let data = {\n                        fileName: item.name, crc32Value: 0, compressedData: [],\n                        compressedSize: undefined, uncompressedDataSize: input.length, compressionType: undefined,\n                        isDirectory: false\n                    };\n                    if (zipArchive.level === 'Normal') {\n                        zipArchive.compressData(input, data, CRC32TABLE);\n                        let length = 0;\n                        for (let i = 0; i < data.compressedData.length; i++) {\n                            length += data.compressedData[i].length;\n                        }\n                        data.compressedSize = length;\n                        data.compressionType = '\\x08\\x00'; //Deflated = 8\n                    }\n                    else {\n                        data.compressedSize = input.length;\n                        data.crc32Value = zipArchive.calculateCrc32Value(0, input, CRC32TABLE);\n                        data.compressionType = '\\x00\\x00'; // Stored = 0\n                        data.compressedData.push(input);\n                    }\n                    resolve(data);\n                };\n                reader.readAsArrayBuffer(item.data);\n            }\n            else {\n                let data = {\n                    fileName: item, crc32Value: 0, compressedData: '', compressedSize: 0, uncompressedDataSize: 0,\n                    compressionType: '\\x00\\x00', isDirectory: true\n                };\n                resolve(data);\n            }\n        });\n        return promise;\n    }\n    compressData(input, data, crc32Table) {\n        let compressor = new CompressedStreamWriter(true);\n        let currentIndex = 0;\n        let nextIndex = 0;\n        do {\n            if (currentIndex >= input.length) {\n                compressor.close();\n                break;\n            }\n            nextIndex = Math.min(input.length, currentIndex + 16384);\n            let subArray = input.subarray(currentIndex, nextIndex);\n            data.crc32Value = this.calculateCrc32Value(data.crc32Value, subArray, crc32Table);\n            compressor.write(subArray, 0, nextIndex - currentIndex);\n            currentIndex = nextIndex;\n        } while (currentIndex <= input.length);\n        data.compressedData = compressor.compressedData;\n        compressor.destroy();\n    }\n    constructZippedObject(zipParts, data, dirLength, isDirectory) {\n        let extFileAttr = 0;\n        let date = new Date();\n        if (isDirectory) {\n            extFileAttr = extFileAttr | 0x00010; // directory flag\n        }\n        extFileAttr = extFileAttr | (0 & 0x3F);\n        let header = this.writeHeader(data, date);\n        let localHeader = 'PK\\x03\\x04' + header + data.fileName;\n        let centralDir = this.writeCentralDirectory(data, header, dirLength, extFileAttr);\n        zipParts.push({ localHeader: localHeader, centralDir: centralDir, compressedData: data });\n        return dirLength + localHeader.length + data.compressedSize;\n    }\n    writeHeader(data, date) {\n        let zipHeader = '';\n        zipHeader += '\\x0A\\x00' + '\\x00\\x00'; // version needed to extract & general purpose bit flag\n        zipHeader += data.compressionType; // compression method Deflate=8,Stored=0\n        zipHeader += this.getBytes(this.getModifiedTime(date), 2); // last modified Time\n        zipHeader += this.getBytes(this.getModifiedDate(date), 2); // last modified date\n        zipHeader += this.getBytes(data.crc32Value, 4); // crc-32 value\n        zipHeader += this.getBytes(data.compressedSize, 4); // compressed file size\n        zipHeader += this.getBytes(data.uncompressedDataSize, 4); // uncompressed file size\n        zipHeader += this.getBytes(data.fileName.length, 2); // file name length\n        zipHeader += this.getBytes(0, 2); // extra field length\n        return zipHeader;\n    }\n    writeZippedContent(fileName, zipData, localDirLen, skipFileSave) {\n        let cenDirLen = 0;\n        let buffer = [];\n        for (let i = 0; i < zipData.length; i++) {\n            let item = zipData[i];\n            cenDirLen += item.centralDir.length;\n            buffer.push(this.getArrayBuffer(item.localHeader));\n            while (item.compressedData.compressedData.length) {\n                buffer.push(item.compressedData.compressedData.shift().buffer);\n            }\n        }\n        for (let i = 0; i < zipData.length; i++) {\n            buffer.push(this.getArrayBuffer(zipData[i].centralDir));\n        }\n        buffer.push(this.getArrayBuffer(this.writeFooter(zipData, cenDirLen, localDirLen)));\n        let blob = new Blob(buffer, { type: 'application/zip' });\n        if (!skipFileSave) {\n            Save.save(fileName, blob);\n        }\n        return blob;\n    }\n    writeCentralDirectory(data, localHeader, offset, externalFileAttribute) {\n        let directoryHeader = 'PK\\x01\\x02' +\n            this.getBytes(0x0014, 2) + localHeader + // inherit from file header\n            this.getBytes(0, 2) + // comment length\n            '\\x00\\x00' + '\\x00\\x00' + // internal file attributes \n            this.getBytes(externalFileAttribute, 4) + // external file attributes\n            this.getBytes(offset, 4) + // local fileHeader relative offset\n            data.fileName;\n        return directoryHeader;\n    }\n    writeFooter(zipData, centralLength, localLength) {\n        let dirEnd = 'PK\\x05\\x06' + '\\x00\\x00' + '\\x00\\x00' +\n            this.getBytes(zipData.length, 2) + this.getBytes(zipData.length, 2) +\n            this.getBytes(centralLength, 4) + this.getBytes(localLength, 4) +\n            this.getBytes(0, 2);\n        return dirEnd;\n    }\n    getArrayBuffer(input) {\n        let a = new Uint8Array(input.length);\n        for (let j = 0; j < input.length; ++j) {\n            a[j] = input.charCodeAt(j) & 0xFF;\n        }\n        return a.buffer;\n    }\n    getBytes(value, offset) {\n        let bytes = '';\n        for (let i = 0; i < offset; i++) {\n            bytes += String.fromCharCode(value & 0xff);\n            value = value >>> 8;\n        }\n        return bytes;\n    }\n    getModifiedTime(date) {\n        let modTime = date.getHours();\n        modTime = modTime << 6;\n        modTime = modTime | date.getMinutes();\n        modTime = modTime << 5;\n        return modTime = modTime | date.getSeconds() / 2;\n    }\n    getModifiedDate(date) {\n        let modiDate = date.getFullYear() - 1980;\n        modiDate = modiDate << 4;\n        modiDate = modiDate | (date.getMonth() + 1);\n        modiDate = modiDate << 5;\n        return modiDate = modiDate | date.getDate();\n    }\n    calculateCrc32Value(crc32Value, input, crc32Table) {\n        crc32Value ^= -1;\n        for (let i = 0; i < input.length; i++) {\n            crc32Value = (crc32Value >>> 8) ^ crc32Table[(crc32Value ^ input[i]) & 0xFF];\n        }\n        return (crc32Value ^ (-1));\n    }\n    /**\n     * construct cyclic redundancy code table\n     * @private\n     */\n    static initCrc32Table() {\n        let i;\n        for (let j = 0; j < 256; j++) {\n            i = j;\n            for (let k = 0; k < 8; k++) {\n                i = ((i & 1) ? (0xEDB88320 ^ (i >>> 1)) : (i >>> 1));\n            }\n            CRC32TABLE[j] = i;\n        }\n    }\n    static findValueFromEnd(stream, value, maxCount) {\n        if (stream == null)\n            throw new DOMException(\"stream\");\n        //   if( !stream.CanSeek || !stream.CanRead )\n        //     throw new ArgumentOutOfRangeException( \"We need to have seekable and readable stream.\" );\n        // read last 4 bytes and compare with required value\n        let lStreamSize = stream.inputStream.buffer.byteLength;\n        if (lStreamSize < 4)\n            return -1;\n        let arrBuffer = new Uint8Array(4);\n        let lLastPos = Math.max(0, lStreamSize - maxCount);\n        let lCurrentPosition = lStreamSize - 1 - INT_SIZE;\n        stream.position = lCurrentPosition;\n        stream.read(arrBuffer, 0, INT_SIZE);\n        let uiCurValue = arrBuffer[0];\n        let bFound = (uiCurValue == value);\n        if (!bFound) {\n            while (lCurrentPosition > lLastPos) {\n                // remove unnecessary byte and replace it with new value.\n                uiCurValue <<= 8;\n                lCurrentPosition--;\n                stream.position = lCurrentPosition;\n                uiCurValue += stream.readByte();\n                if (uiCurValue == value) {\n                    bFound = true;\n                    break;\n                }\n            }\n        }\n        return bFound ? lCurrentPosition : -1;\n    }\n    /// <summary>\n    /// Extracts Int32 value from the stream.\n    /// </summary>\n    /// <param name=\"stream\">Stream to read data from.</param>\n    /// <returns>Extracted value.</returns>\n    static ReadInt32(stream) {\n        let buffer = new Uint8Array(INT_SIZE);\n        if (stream.read(buffer, 0, INT_SIZE) != INT_SIZE) {\n            throw new DOMException(\"Unable to read value at the specified position - end of stream was reached.\");\n        }\n        return Utils.bitConverterToInt32(buffer, 0);\n    }\n    /// <summary>\n    /// Extracts Int16 value from the stream.\n    /// </summary>\n    /// <param name=\"stream\">Stream to read data from.</param>\n    /// <returns>Extracted value.</returns>\n    static ReadInt16(stream) {\n        let buffer = new Uint8Array(SHORT_SIZE);\n        if (stream.read(buffer, 0, SHORT_SIZE) != SHORT_SIZE) {\n            throw new DOMException(\"Unable to read value at the specified position - end of stream was reached.\");\n        }\n        return Utils.bitConverterToInt16(buffer, 0);\n    }\n    /// <summary>\n    /// Extracts unsigned Int16 value from the stream.\n    /// </summary>\n    /// <param name=\"stream\">Stream to read data from.</param>\n    /// <returns>Extracted value.</returns>\n    static ReadUInt16(stream) {\n        {\n            let buffer = new Uint8Array(SHORT_SIZE);\n            if (stream.read(buffer, 0, SHORT_SIZE) != SHORT_SIZE) {\n                throw new DOMException(\"Unable to read value at the specified position - end of stream was reached.\");\n            }\n            return Utils.bitConverterToInt16(buffer, 0);\n        }\n    }\n}\nexport class ZipArchiveItemHelper {\n    constructor() {\n        /// <summary>\n        /// Zip header signature.\n        /// </summary>\n        this.headerSignature = 0x04034b50;\n        /// <summary>\n        /// Indicates whether we should check Crc value when reading item's data. Check\n        /// is performed when user gets access to decompressed data for the first time.\n        /// </summary>\n        this.checkCrc = true;\n        /// <summary>\n        /// Crc.\n        /// </summary>\n        this.crc32 = 0;\n    }\n    /// <summary>\n    /// Read data from the stream based on the central directory.\n    /// </summary>\n    /// <param name=\"stream\">Stream to read data from, stream.Position must point at just after correct file header.</param>\n    readCentralDirectoryData(stream) {\n        // on the current moment we ignore \"version made by\" and \"version needed to extract\" fields.\n        stream.position += 4;\n        this.options = ZipArchive.ReadInt16(stream);\n        this.compressionMethod = ZipArchive.ReadInt16(stream);\n        this.checkCrc = (this.compressionMethod != 99); //COmpression.Defalte != SecurityConstants.AES\n        //m_bCompressed = true;\n        // on the current moment we ignore \"last mod file time\" and \"last mod file date\" fields.\n        let lastModified = ZipArchive.ReadInt32(stream);\n        //LastModified = ConvertToDateTime(lastModified);\n        this.crc32 = Utils.bitConverterToUInt32(ZipArchive.ReadInt32(stream));\n        this.compressedSize = ZipArchive.ReadInt32(stream);\n        this.originalSize = ZipArchive.ReadInt32(stream);\n        let iFileNameLength = ZipArchive.ReadInt16(stream);\n        let iExtraFieldLenth = ZipArchive.ReadInt16(stream);\n        let iCommentLength = ZipArchive.ReadInt16(stream);\n        // on the current moment we ignore and \"disk number start\" (2 bytes),\n        // \"internal file attributes\" (2 bytes).\n        stream.position += 4;\n        this.externalAttributes = ZipArchive.ReadInt32(stream);\n        this.localHeaderOffset = ZipArchive.ReadInt32(stream);\n        let arrBuffer = new Uint8Array(iFileNameLength);\n        stream.read(arrBuffer, 0, iFileNameLength);\n        let m_strItemName = Utils.byteToString(arrBuffer);\n        m_strItemName = m_strItemName.replace(\"\\\\\", \"/\");\n        this.name = m_strItemName;\n        stream.position += iExtraFieldLenth + iCommentLength;\n        if (this.options != 0)\n            this.options = 0;\n    }\n    /// <summary>\n    /// Reads zipped data from the stream.\n    /// </summary>\n    /// <param name=\"stream\">Stream to read data from.</param>\n    /// <param name=\"checkCrc\">Indicates whether we should check crc value after data decompression.</param>\n    readData(stream, checkCrc) {\n        if (stream.length == 0)\n            throw new DOMException(\"stream\");\n        stream.position = this.localHeaderOffset;\n        this.checkCrc = checkCrc;\n        this.readLocalHeader(stream);\n        this.readCompressedData(stream);\n    }\n    decompressData() {\n        if (this.compressionMethod == 8) {\n            if (this.originalSize > 0) {\n                this.decompressDataOld();\n            }\n        }\n    }\n    decompressDataOld() {\n        let reader = new CompressedStreamReader(this.compressedStream, true);\n        let decompressedData;\n        if (this.originalSize > 0)\n            decompressedData = new Stream(new Uint8Array(this.originalSize));\n        let arrBuffer = new Uint8Array(BufferSize);\n        let iReadBytes;\n        let past = new Uint8Array(0);\n        while ((iReadBytes = reader.read(arrBuffer, 0, BufferSize)) > 0) {\n            //             past = new Uint8Array(decompressedData.length);\n            // let currentBlock: Uint8Array = arrBuffer.subarray(0, iReadBytes);\n            decompressedData.write(arrBuffer.subarray(0, iReadBytes), 0, iReadBytes);\n        }\n        this.unCompressedStream = decompressedData.toByteArray();\n        //   this.originalSize = decompressedData.Length;\n        //   m_bControlStream = true;\n        //   m_streamData = decompressedData;\n        //   decompressedData.SetLength( m_lOriginalSize );\n        //   decompressedData.Capacity = ( int )m_lOriginalSize;\n        if (this.checkCrc) {\n            //TODO: fix this\n            //CheckCrc(decompressedData.ToArray());\n        }\n        //m_streamData.Position = 0;\n    }\n    /// <summary>\n    /// Extracts local header from the stream.\n    /// </summary>\n    /// <param name=\"stream\">Stream to read data from.</param>\n    readLocalHeader(stream) {\n        if (stream.length == 0)\n            throw new DOMException(\"stream\");\n        if (ZipArchive.ReadInt32(stream) != this.headerSignature)\n            throw new DOMException(\"Can't find local header signature - wrong file format or file is corrupt.\");\n        // TODO: it is good to verify data read from the central directory record,\n        // but on the current moment we simply skip it.\n        stream.position += 22;\n        let iNameLength = ZipArchive.ReadInt16(stream);\n        let iExtraLength = ZipArchive.ReadUInt16(stream);\n        if (this.compressionMethod == 99) //SecurityConstants.AES\n         {\n            // stream.Position += iNameLength + 8;\n            // m_archive.EncryptionAlgorithm = (EncryptionAlgorithm)stream.ReadByte();\n            // m_actualCompression = new byte[2];\n            // stream.Read(m_actualCompression, 0, 2);\n        }\n        else if (iExtraLength > 2) {\n            stream.position += iNameLength;\n            let headerVal = ZipArchive.ReadInt16(stream);\n            if (headerVal == 0x0017) //PKZipEncryptionHeader\n                throw new DOMException(\"UnSupported\");\n            else\n                stream.position += iExtraLength - 2;\n        }\n        else\n            stream.position += iNameLength + iExtraLength;\n    }\n    /// <summary>\n    /// Extracts compressed data from the stream.\n    /// </summary>\n    /// <param name=\"stream\">Stream to read data from.</param>\n    readCompressedData(stream) {\n        let dataStream;\n        if (this.compressedSize > 0) {\n            let iBytesLeft = this.compressedSize;\n            dataStream = new Stream(new Uint8Array(iBytesLeft));\n            let arrBuffer = new Uint8Array(BufferSize);\n            while (iBytesLeft > 0) {\n                let iBytesToRead = Math.min(iBytesLeft, BufferSize);\n                if (stream.read(arrBuffer, 0, iBytesToRead) != iBytesToRead)\n                    throw new DOMException(\"End of file reached - wrong file format or file is corrupt.\");\n                dataStream.write(arrBuffer.subarray(0, iBytesToRead), 0, iBytesToRead);\n                iBytesLeft -= iBytesToRead;\n            }\n            // if(m_archive.Password != null)\n            // {\n            //     byte[] dataBuffer = new byte[dataStream.Length];\n            //     dataBuffer = dataStream.ToArray();\n            //     dataStream=new MemoryStream( Decrypt(dataBuffer));\n            // }\n            this.compressedStream = new Uint8Array(dataStream.inputStream);\n            // m_bControlStream = true;\n        }\n        else if (this.compressedSize < 0) //If compression size is negative, then read until the next header signature reached.\n         {\n            //   MemoryStream dataStream = new MemoryStream();\n            //   int bt = 0;\n            //   bool proceed=true;\n            //   while (proceed)\n            //   {\n            //       if ((bt = stream.ReadByte()) == Constants.HeaderSignatureStartByteValue)\n            //       {\n            //           stream.Position -= 1;\n            //           int headerSignature = ZipArchive.ReadInt32(stream);\n            //           if (headerSignature==Constants.CentralHeaderSignature || headerSignature==Constants.CentralHeaderSignature)\n            //           {\n            //               proceed = false;\n            //           }\n            //           stream.Position -= 3;\n            //       }\n            //       if (proceed)\n            //           dataStream.WriteByte((byte)bt);\n            //   }\n            //   m_streamData = dataStream;\n            //   m_lCompressedSize = m_streamData.Length;\n            //   m_bControlStream = true;\n        }\n        else if (this.compressedSize == 0) {\n            //  m_streamData = new MemoryStream();\n        }\n    }\n}\n/**\n * Class represent unique ZipArchive item\n * ```typescript\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * ```\n */\nexport class ZipArchiveItem {\n    get dataStream() {\n        return this.decompressedStream;\n    }\n    /**\n     * Get the name of archive item\n     * @returns string\n     */\n    get name() {\n        return this.fileName;\n    }\n    /**\n     * Set the name of archive item\n     * @param  {string} value\n     */\n    set name(value) {\n        this.fileName = value;\n    }\n    /**\n     * constructor for creating {ZipArchiveItem} instance\n     * @param {Blob|ArrayBuffer} data file data\n     * @param {itemName} itemName absolute file path\n     */\n    constructor(data, itemName) {\n        if (data === null || data === undefined) {\n            throw new Error('ArgumentException: data cannot be null or undefined');\n        }\n        if (itemName === null || itemName === undefined) {\n            throw new Error('ArgumentException: string cannot be null or undefined');\n        }\n        if (itemName.length === 0) {\n            throw new Error('string cannot be empty');\n        }\n        this.data = data;\n        this.name = itemName;\n    }\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    destroy() {\n        this.fileName = undefined;\n        this.data = undefined;\n    }\n}\n/* eslint-enable */ \n","/* eslint-disable */\nimport { Encoding } from '@syncfusion/ej2-file-utils';\n/**\n * array literal codes\n */\nconst ARR_LITERAL_CODES = new Int16Array(286);\nconst ARR_LITERAL_LENGTHS = new Uint8Array(286);\nconst ARR_DISTANCE_CODES = new Int16Array(30);\nconst ARR_DISTANCE_LENGTHS = new Uint8Array(30);\n/**\n * represent compression stream writer\n * ```typescript\n * let compressedWriter = new CompressedStreamWriter();\n * let text: string = 'Hello world!!!';\n * compressedWriter.write(text, 0, text.length);\n * compressedWriter.close();\n * ```\n */\nexport class CompressedStreamWriter {\n    /**\n     * Initializes compressor and writes ZLib header if needed.\n     * @param {boolean} noWrap - optional if true, ZLib header and checksum will not be written.\n     */\n    constructor(noWrap) {\n        this.pendingBuffer = new Uint8Array(1 << 16);\n        this.pendingBufLength = 0;\n        this.pendingBufCache = 0;\n        this.pendingBufBitsInCache = 0;\n        this.bufferPosition = 0;\n        this.extraBits = 0;\n        this.currentHash = 0;\n        this.matchStart = 0;\n        this.matchLength = 0;\n        this.matchPrevAvail = false;\n        this.blockStart = 0;\n        this.stringStart = 0;\n        this.lookAhead = 0;\n        this.totalBytesIn = 0;\n        this.inputOffset = 0;\n        this.inputEnd = 0;\n        this.windowSize = 1 << 15;\n        this.windowMask = this.windowSize - 1;\n        this.hashSize = 1 << 15;\n        this.hashMask = this.hashSize - 1;\n        this.hashShift = Math.floor((15 + 3 - 1) / 3);\n        this.maxDist = this.windowSize - 262;\n        this.checkSum = 1;\n        this.noWrap = false;\n        if (!CompressedStreamWriter.isHuffmanTreeInitiated) {\n            CompressedStreamWriter.initHuffmanTree();\n            CompressedStreamWriter.isHuffmanTreeInitiated = true;\n        }\n        this.treeLiteral = new CompressorHuffmanTree(this, 286, 257, 15);\n        this.treeDistances = new CompressorHuffmanTree(this, 30, 1, 15);\n        this.treeCodeLengths = new CompressorHuffmanTree(this, 19, 4, 7);\n        this.arrDistances = new Uint16Array((1 << 14));\n        this.arrLiterals = new Uint8Array((1 << 14));\n        this.stream = [];\n        this.dataWindow = new Uint8Array(2 * this.windowSize);\n        this.hashHead = new Int16Array(this.hashSize);\n        this.hashPrevious = new Int16Array(this.windowSize);\n        this.blockStart = this.stringStart = 1;\n        this.noWrap = noWrap;\n        if (!noWrap) {\n            this.writeZLibHeader();\n        }\n    }\n    /**\n     * get compressed data\n     */\n    get compressedData() {\n        return this.stream;\n    }\n    get getCompressedString() {\n        let compressedString = '';\n        if (this.stream !== undefined) {\n            for (let i = 0; i < this.stream.length; i++) {\n                compressedString += String.fromCharCode.apply(null, this.stream[i]);\n            }\n        }\n        return compressedString;\n    }\n    /**\n     * Compresses data and writes it to the stream.\n     * @param {Uint8Array} data - data to compress\n     * @param {number} offset - offset in data\n     * @param {number} length - length of the data\n     * @returns {void}\n     */\n    write(data, offset, length) {\n        if (data === undefined || data === null) {\n            throw new Error('ArgumentException: data cannot null or undefined');\n        }\n        let end = offset + length;\n        if (0 > offset || offset > end || end > data.length) {\n            throw new Error('ArgumentOutOfRangeException: Offset or length is incorrect');\n        }\n        if (typeof data === 'string') {\n            let encode = new Encoding(false);\n            encode.type = 'Utf8';\n            data = new Uint8Array(encode.getBytes(data, 0, data.length));\n            end = offset + data.length;\n        }\n        this.inputBuffer = data;\n        this.inputOffset = offset;\n        this.inputEnd = end;\n        if (!this.noWrap) {\n            this.checkSum = ChecksumCalculator.checksumUpdate(this.checkSum, this.inputBuffer, this.inputOffset, end);\n        }\n        while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0)) {\n            this.pendingBufferFlush();\n            this.compressData(false);\n        }\n    }\n    /**\n     * write ZLib header to the compressed data\n     * @return {void}\n     */\n    writeZLibHeader() {\n        /* Initialize header.*/\n        let headerDate = (8 + (7 << 4)) << 8;\n        /* Save compression level.*/\n        headerDate |= ((5 >> 2) & 3) << 6;\n        /* Align header.*/\n        headerDate += 31 - (headerDate % 31);\n        /* Write header to stream.*/\n        this.pendingBufferWriteShortBytes(headerDate);\n    }\n    /**\n     *  Write Most Significant Bytes in to stream\n     * @param {number} s - check sum value\n     */\n    pendingBufferWriteShortBytes(s) {\n        this.pendingBuffer[this.pendingBufLength++] = s >> 8;\n        this.pendingBuffer[this.pendingBufLength++] = s;\n    }\n    compressData(finish) {\n        let success;\n        do {\n            this.fillWindow();\n            let canFlush = (finish && this.inputEnd === this.inputOffset);\n            success = this.compressSlow(canFlush, finish);\n        } while (this.pendingBufLength === 0 && success);\n        return success;\n    }\n    compressSlow(flush, finish) {\n        if (this.lookAhead < 262 && !flush) {\n            return false;\n        }\n        while (this.lookAhead >= 262 || flush) {\n            if (this.lookAhead === 0) {\n                return this.lookAheadCompleted(finish);\n            }\n            if (this.stringStart >= 2 * this.windowSize - 262) {\n                this.slideWindow();\n            }\n            let prevMatch = this.matchStart;\n            let prevLen = this.matchLength;\n            if (this.lookAhead >= 3) {\n                this.discardMatch();\n            }\n            if (prevLen >= 3 && this.matchLength <= prevLen) {\n                prevLen = this.matchPreviousBest(prevMatch, prevLen);\n            }\n            else {\n                this.matchPreviousAvailable();\n            }\n            if (this.bufferPosition >= (1 << 14)) {\n                return this.huffmanIsFull(finish);\n            }\n        }\n        return true;\n    }\n    discardMatch() {\n        let hashHead = this.insertString();\n        if (hashHead !== 0 && this.stringStart - hashHead <= this.maxDist && this.findLongestMatch(hashHead)) {\n            if (this.matchLength <= 5 && (this.matchLength === 3 && this.stringStart - this.matchStart > 4096)) {\n                this.matchLength = 3 - 1;\n            }\n        }\n    }\n    matchPreviousAvailable() {\n        if (this.matchPrevAvail) {\n            this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 0xff);\n        }\n        this.matchPrevAvail = true;\n        this.stringStart++;\n        this.lookAhead--;\n    }\n    matchPreviousBest(prevMatch, prevLen) {\n        this.huffmanTallyDist(this.stringStart - 1 - prevMatch, prevLen);\n        prevLen -= 2;\n        do {\n            this.stringStart++;\n            this.lookAhead--;\n            if (this.lookAhead >= 3) {\n                this.insertString();\n            }\n        } while (--prevLen > 0);\n        this.stringStart++;\n        this.lookAhead--;\n        this.matchPrevAvail = false;\n        this.matchLength = 3 - 1;\n        return prevLen;\n    }\n    lookAheadCompleted(finish) {\n        if (this.matchPrevAvail) {\n            this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 0xff);\n        }\n        this.matchPrevAvail = false;\n        this.huffmanFlushBlock(this.dataWindow, this.blockStart, this.stringStart - this.blockStart, finish);\n        this.blockStart = this.stringStart;\n        return false;\n    }\n    huffmanIsFull(finish) {\n        let len = this.stringStart - this.blockStart;\n        if (this.matchPrevAvail) {\n            len--;\n        }\n        let lastBlock = (finish && this.lookAhead === 0 && !this.matchPrevAvail);\n        this.huffmanFlushBlock(this.dataWindow, this.blockStart, len, lastBlock);\n        this.blockStart += len;\n        return !lastBlock;\n    }\n    fillWindow() {\n        if (this.stringStart >= this.windowSize + this.maxDist) {\n            this.slideWindow();\n        }\n        while (this.lookAhead < 262 && this.inputOffset < this.inputEnd) {\n            let more = 2 * this.windowSize - this.lookAhead - this.stringStart;\n            if (more > this.inputEnd - this.inputOffset) {\n                more = this.inputEnd - this.inputOffset;\n            }\n            this.dataWindow.set(this.inputBuffer.subarray(this.inputOffset, this.inputOffset + more), this.stringStart + this.lookAhead);\n            this.inputOffset += more;\n            this.totalBytesIn += more;\n            this.lookAhead += more;\n        }\n        if (this.lookAhead >= 3) {\n            this.updateHash();\n        }\n    }\n    slideWindow() {\n        this.dataWindow.set(this.dataWindow.subarray(this.windowSize, this.windowSize + this.windowSize), 0);\n        this.matchStart -= this.windowSize;\n        this.stringStart -= this.windowSize;\n        this.blockStart -= this.windowSize;\n        for (let i = 0; i < this.hashSize; ++i) {\n            let m = this.hashHead[i] & 0xffff;\n            this.hashHead[i] = (((m >= this.windowSize) ? (m - this.windowSize) : 0));\n        }\n        for (let i = 0; i < this.windowSize; i++) {\n            let m = this.hashPrevious[i] & 0xffff;\n            this.hashPrevious[i] = ((m >= this.windowSize) ? (m - this.windowSize) : 0);\n        }\n    }\n    insertString() {\n        let match;\n        let hash = ((this.currentHash << this.hashShift) ^ this.dataWindow[this.stringStart + (3 - 1)]) & this.hashMask;\n        this.hashPrevious[this.stringStart & this.windowMask] = match = this.hashHead[hash];\n        this.hashHead[hash] = this.stringStart;\n        this.currentHash = hash;\n        return match & 0xffff;\n    }\n    findLongestMatch(curMatch) {\n        let chainLen = 4096;\n        let niceLen = 258;\n        let scan = this.stringStart;\n        let match;\n        let bestEnd = this.stringStart + this.matchLength;\n        let bestLength = Math.max(this.matchLength, 3 - 1);\n        let limit = Math.max(this.stringStart - this.maxDist, 0);\n        let stringEnd = this.stringStart + 258 - 1;\n        let scanEnd1 = this.dataWindow[bestEnd - 1];\n        let scanEnd = this.dataWindow[bestEnd];\n        let data = this.dataWindow;\n        if (bestLength >= 32) {\n            chainLen >>= 2;\n        }\n        if (niceLen > this.lookAhead) {\n            niceLen = this.lookAhead;\n        }\n        do {\n            if (data[curMatch + bestLength] !== scanEnd ||\n                data[curMatch + bestLength - 1] !== scanEnd1 ||\n                data[curMatch] !== data[scan] ||\n                data[curMatch + 1] !== data[scan + 1]) {\n                continue;\n            }\n            match = curMatch + 2;\n            scan += 2;\n            /* tslint:disable */\n            while (data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] && scan < stringEnd) {\n                /* tslint:disable */\n            }\n            if (scan > bestEnd) {\n                this.matchStart = curMatch;\n                bestEnd = scan;\n                bestLength = scan - this.stringStart;\n                if (bestLength >= niceLen) {\n                    break;\n                }\n                scanEnd1 = data[bestEnd - 1];\n                scanEnd = data[bestEnd];\n            }\n            scan = this.stringStart;\n        } while ((curMatch = (this.hashPrevious[curMatch & this.windowMask] & 0xffff)) > limit && --chainLen !== 0);\n        this.matchLength = Math.min(bestLength, this.lookAhead);\n        return this.matchLength >= 3;\n    }\n    updateHash() {\n        this.currentHash = (this.dataWindow[this.stringStart] << this.hashShift) ^ this.dataWindow[this.stringStart + 1];\n    }\n    huffmanTallyLit(literal) {\n        this.arrDistances[this.bufferPosition] = 0;\n        this.arrLiterals[this.bufferPosition++] = literal;\n        this.treeLiteral.codeFrequencies[literal]++;\n        return this.bufferPosition >= (1 << 14);\n    }\n    huffmanTallyDist(dist, len) {\n        this.arrDistances[this.bufferPosition] = dist;\n        this.arrLiterals[this.bufferPosition++] = (len - 3);\n        let lc = this.huffmanLengthCode(len - 3);\n        this.treeLiteral.codeFrequencies[lc]++;\n        if (lc >= 265 && lc < 285) {\n            this.extraBits += Math.floor((lc - 261) / 4);\n        }\n        let dc = this.huffmanDistanceCode(dist - 1);\n        this.treeDistances.codeFrequencies[dc]++;\n        if (dc >= 4) {\n            this.extraBits += Math.floor((dc / 2 - 1));\n        }\n        return this.bufferPosition >= (1 << 14);\n    }\n    huffmanFlushBlock(stored, storedOffset, storedLength, lastBlock) {\n        this.treeLiteral.codeFrequencies[256]++;\n        this.treeLiteral.buildTree();\n        this.treeDistances.buildTree();\n        this.treeLiteral.calculateBLFreq(this.treeCodeLengths);\n        this.treeDistances.calculateBLFreq(this.treeCodeLengths);\n        this.treeCodeLengths.buildTree();\n        let blTreeCodes = 4;\n        for (let i = 18; i > blTreeCodes; i--) {\n            if (this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[i]] > 0) {\n                blTreeCodes = i + 1;\n            }\n        }\n        let opt_len = 14 + blTreeCodes * 3 + this.treeCodeLengths.getEncodedLength() +\n            this.treeLiteral.getEncodedLength() + this.treeDistances.getEncodedLength() + this.extraBits;\n        let static_len = this.extraBits;\n        for (let i = 0; i < 286; i++) {\n            static_len += this.treeLiteral.codeFrequencies[i] * ARR_LITERAL_LENGTHS[i];\n        }\n        for (let i = 0; i < 30; i++) {\n            static_len += this.treeDistances.codeFrequencies[i] * ARR_DISTANCE_LENGTHS[i];\n        }\n        if (opt_len >= static_len) {\n            // Force static trees.\n            opt_len = static_len;\n        }\n        if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {\n            this.huffmanFlushStoredBlock(stored, storedOffset, storedLength, lastBlock);\n        }\n        else if (opt_len == static_len) {\n            // Encode with static tree.\n            this.pendingBufferWriteBits((1 << 1) + (lastBlock ? 1 : 0), 3);\n            this.treeLiteral.setStaticCodes(ARR_LITERAL_CODES, ARR_LITERAL_LENGTHS);\n            this.treeDistances.setStaticCodes(ARR_DISTANCE_CODES, ARR_DISTANCE_LENGTHS);\n            this.huffmanCompressBlock();\n            this.huffmanReset();\n        }\n        else {\n            this.pendingBufferWriteBits((2 << 1) + (lastBlock ? 1 : 0), 3);\n            this.huffmanSendAllTrees(blTreeCodes);\n            this.huffmanCompressBlock();\n            this.huffmanReset();\n        }\n    }\n    huffmanFlushStoredBlock(stored, storedOffset, storedLength, lastBlock) {\n        this.pendingBufferWriteBits((0 << 1) + (lastBlock ? 1 : 0), 3);\n        this.pendingBufferAlignToByte();\n        this.pendingBufferWriteShort(storedLength);\n        this.pendingBufferWriteShort(~storedLength);\n        this.pendingBufferWriteByteBlock(stored, storedOffset, storedLength);\n        this.huffmanReset();\n    }\n    huffmanLengthCode(len) {\n        if (len === 255) {\n            return 285;\n        }\n        let code = 257;\n        while (len >= 8) {\n            code += 4;\n            len >>= 1;\n        }\n        return code + len;\n    }\n    huffmanDistanceCode(distance) {\n        let code = 0;\n        while (distance >= 4) {\n            code += 2;\n            distance >>= 1;\n        }\n        return code + distance;\n    }\n    huffmanSendAllTrees(blTreeCodes) {\n        this.treeCodeLengths.buildCodes();\n        this.treeLiteral.buildCodes();\n        this.treeDistances.buildCodes();\n        this.pendingBufferWriteBits(this.treeLiteral.treeLength - 257, 5);\n        this.pendingBufferWriteBits(this.treeDistances.treeLength - 1, 5);\n        this.pendingBufferWriteBits(blTreeCodes - 4, 4);\n        for (let rank = 0; rank < blTreeCodes; rank++) {\n            this.pendingBufferWriteBits(this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[rank]], 3);\n        }\n        this.treeLiteral.writeTree(this.treeCodeLengths);\n        this.treeDistances.writeTree(this.treeCodeLengths);\n    }\n    huffmanReset() {\n        this.bufferPosition = 0;\n        this.extraBits = 0;\n        this.treeLiteral.reset();\n        this.treeDistances.reset();\n        this.treeCodeLengths.reset();\n    }\n    huffmanCompressBlock() {\n        for (let i = 0; i < this.bufferPosition; i++) {\n            let literalLen = this.arrLiterals[i] & 255;\n            let dist = this.arrDistances[i];\n            if (dist-- !== 0) {\n                let lc = this.huffmanLengthCode(literalLen);\n                this.treeLiteral.writeCodeToStream(lc);\n                let bits = Math.floor((lc - 261) / 4);\n                if (bits > 0 && bits <= 5) {\n                    this.pendingBufferWriteBits(literalLen & ((1 << bits) - 1), bits);\n                }\n                let dc = this.huffmanDistanceCode(dist);\n                this.treeDistances.writeCodeToStream(dc);\n                bits = Math.floor(dc / 2 - 1);\n                if (bits > 0) {\n                    this.pendingBufferWriteBits(dist & ((1 << bits) - 1), bits);\n                }\n            }\n            else {\n                this.treeLiteral.writeCodeToStream(literalLen);\n            }\n        }\n        this.treeLiteral.writeCodeToStream(256);\n    }\n    /**\n     * write bits in to internal buffer\n     * @param {number} b - source of bits\n     * @param {number} count - count of bits to write\n     */\n    pendingBufferWriteBits(b, count) {\n        let uint = new Uint32Array(1);\n        uint[0] = this.pendingBufCache | (b << this.pendingBufBitsInCache);\n        this.pendingBufCache = uint[0];\n        this.pendingBufBitsInCache += count;\n        this.pendingBufferFlushBits();\n    }\n    pendingBufferFlush(isClose) {\n        this.pendingBufferFlushBits();\n        if (this.pendingBufLength > 0) {\n            let array = new Uint8Array(this.pendingBufLength);\n            array.set(this.pendingBuffer.subarray(0, this.pendingBufLength), 0);\n            this.stream.push(array);\n        }\n        this.pendingBufLength = 0;\n    }\n    pendingBufferFlushBits() {\n        let result = 0;\n        while (this.pendingBufBitsInCache >= 8 && this.pendingBufLength < (1 << 16)) {\n            this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;\n            this.pendingBufCache >>= 8;\n            this.pendingBufBitsInCache -= 8;\n            result++;\n        }\n        return result;\n    }\n    pendingBufferWriteByteBlock(data, offset, length) {\n        let array = data.subarray(offset, offset + length);\n        this.pendingBuffer.set(array, this.pendingBufLength);\n        this.pendingBufLength += length;\n    }\n    pendingBufferWriteShort(s) {\n        this.pendingBuffer[this.pendingBufLength++] = s;\n        this.pendingBuffer[this.pendingBufLength++] = (s >> 8);\n    }\n    pendingBufferAlignToByte() {\n        if (this.pendingBufBitsInCache > 0) {\n            this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;\n        }\n        this.pendingBufCache = 0;\n        this.pendingBufBitsInCache = 0;\n    }\n    /**\n     * Huffman Tree literal calculation\n     * @private\n     */\n    static initHuffmanTree() {\n        let i = 0;\n        while (i < 144) {\n            ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse((0x030 + i) << 8);\n            ARR_LITERAL_LENGTHS[i++] = 8;\n        }\n        while (i < 256) {\n            ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse((0x190 - 144 + i) << 7);\n            ARR_LITERAL_LENGTHS[i++] = 9;\n        }\n        while (i < 280) {\n            ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse((0x000 - 256 + i) << 9);\n            ARR_LITERAL_LENGTHS[i++] = 7;\n        }\n        while (i < 286) {\n            ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse((0x0c0 - 280 + i) << 8);\n            ARR_LITERAL_LENGTHS[i++] = 8;\n        }\n        for (i = 0; i < 30; i++) {\n            ARR_DISTANCE_CODES[i] = CompressorHuffmanTree.bitReverse(i << 11);\n            ARR_DISTANCE_LENGTHS[i] = 5;\n        }\n    }\n    /**\n     * close the stream and write all pending buffer in to stream\n     * @returns {void}\n     */\n    close() {\n        do {\n            this.pendingBufferFlush(true);\n            if (!this.compressData(true)) {\n                this.pendingBufferFlush(true);\n                this.pendingBufferAlignToByte();\n                if (!this.noWrap) {\n                    this.pendingBufferWriteShortBytes(this.checkSum >> 16);\n                    this.pendingBufferWriteShortBytes(this.checkSum & 0xffff);\n                }\n                this.pendingBufferFlush(true);\n            }\n        } while (!(this.inputEnd === this.inputOffset) ||\n            !(this.pendingBufLength === 0));\n    }\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    destroy() {\n        this.stream = [];\n        this.stream = undefined;\n        this.pendingBuffer = undefined;\n        this.treeLiteral = undefined;\n        this.treeDistances = undefined;\n        this.treeCodeLengths = undefined;\n        this.arrLiterals = undefined;\n        this.arrDistances = undefined;\n        this.hashHead = undefined;\n        this.hashPrevious = undefined;\n        this.dataWindow = undefined;\n        this.inputBuffer = undefined;\n        this.pendingBufLength = undefined;\n        this.pendingBufCache = undefined;\n        this.pendingBufBitsInCache = undefined;\n        this.bufferPosition = undefined;\n        this.extraBits = undefined;\n        this.currentHash = undefined;\n        this.matchStart = undefined;\n        this.matchLength = undefined;\n        this.matchPrevAvail = undefined;\n        this.blockStart = undefined;\n        this.stringStart = undefined;\n        this.lookAhead = undefined;\n        this.totalBytesIn = undefined;\n        this.inputOffset = undefined;\n        this.inputEnd = undefined;\n        this.windowSize = undefined;\n        this.windowMask = undefined;\n        this.hashSize = undefined;\n        this.hashMask = undefined;\n        this.hashShift = undefined;\n        this.maxDist = undefined;\n        this.checkSum = undefined;\n        this.noWrap = undefined;\n    }\n}\nCompressedStreamWriter.isHuffmanTreeInitiated = false;\n/**\n * represent the Huffman Tree\n */\nexport class CompressorHuffmanTree {\n    /**\n     * Create new Huffman Tree\n     * @param {CompressedStreamWriter} writer instance\n     * @param {number} elementCount - element count\n     * @param {number} minCodes - minimum count\n     * @param {number} maxLength - maximum count\n     */\n    constructor(writer, elementCount, minCodes, maxLength) {\n        this.writer = writer;\n        this.codeMinCount = minCodes;\n        this.maxLength = maxLength;\n        this.codeFrequency = new Uint16Array(elementCount);\n        this.lengthCount = new Int32Array(maxLength);\n    }\n    get treeLength() {\n        return this.codeCount;\n    }\n    get codeLengths() {\n        return this.codeLength;\n    }\n    get codeFrequencies() {\n        return this.codeFrequency;\n    }\n    setStaticCodes(codes, lengths) {\n        let temp = new Int16Array(codes.length);\n        temp.set(codes, 0);\n        this.codes = temp;\n        let lengthTemp = new Uint8Array(lengths.length);\n        lengthTemp.set(lengths, 0);\n        this.codeLength = lengthTemp;\n    }\n    /**\n     * reset all code data in tree\n     * @returns {void}\n     */\n    reset() {\n        for (let i = 0; i < this.codeFrequency.length; i++) {\n            this.codeFrequency[i] = 0;\n        }\n        this.codes = undefined;\n        this.codeLength = undefined;\n    }\n    /**\n     * write code to the compressor output stream\n     * @param {number} code - code to be written\n     * @returns {void}\n     */\n    writeCodeToStream(code) {\n        this.writer.pendingBufferWriteBits(this.codes[code] & 0xffff, this.codeLength[code]);\n    }\n    /**\n     * calculate code from their frequencies\n     * @returns {void}\n     */\n    buildCodes() {\n        let nextCode = new Int32Array(this.maxLength);\n        this.codes = new Int16Array(this.codeCount);\n        let code = 0;\n        for (let bitsCount = 0; bitsCount < this.maxLength; bitsCount++) {\n            nextCode[bitsCount] = code;\n            code += this.lengthCount[bitsCount] << (15 - bitsCount);\n        }\n        for (let i = 0; i < this.codeCount; i++) {\n            let bits = this.codeLength[i];\n            if (bits > 0) {\n                this.codes[i] = CompressorHuffmanTree.bitReverse(nextCode[bits - 1]);\n                nextCode[bits - 1] += 1 << (16 - bits);\n            }\n        }\n    }\n    static bitReverse(value) {\n        return (CompressorHuffmanTree.reverseBits[value & 15] << 12\n            | CompressorHuffmanTree.reverseBits[(value >> 4) & 15] << 8\n            | CompressorHuffmanTree.reverseBits[(value >> 8) & 15] << 4\n            | CompressorHuffmanTree.reverseBits[value >> 12]);\n    }\n    /**\n     * calculate length of compressed data\n     * @returns {number}\n     */\n    getEncodedLength() {\n        let len = 0;\n        for (let i = 0; i < this.codeFrequency.length; i++) {\n            len += this.codeFrequency[i] * this.codeLength[i];\n        }\n        return len;\n    }\n    /**\n     * calculate code frequencies\n     * @param {CompressorHuffmanTree} blTree\n     * @returns {void}\n     */\n    calculateBLFreq(blTree) {\n        let maxCount;\n        let minCount;\n        let count;\n        let curLen = -1;\n        let i = 0;\n        while (i < this.codeCount) {\n            count = 1;\n            let nextLen = this.codeLength[i];\n            if (nextLen === 0) {\n                maxCount = 138;\n                minCount = 3;\n            }\n            else {\n                maxCount = 6;\n                minCount = 3;\n                if (curLen !== nextLen) {\n                    blTree.codeFrequency[nextLen]++;\n                    count = 0;\n                }\n            }\n            curLen = nextLen;\n            i++;\n            while (i < this.codeCount && curLen === this.codeLength[i]) {\n                i++;\n                if (++count >= maxCount) {\n                    break;\n                }\n            }\n            if (count < minCount) {\n                blTree.codeFrequency[curLen] += count;\n            }\n            else if (curLen !== 0) {\n                blTree.codeFrequency[16]++;\n            }\n            else if (count <= 10) {\n                blTree.codeFrequency[17]++;\n            }\n            else {\n                blTree.codeFrequency[18]++;\n            }\n        }\n    }\n    /**\n     * @param {CompressorHuffmanTree} blTree - write tree to output stream\n     * @returns {void}\n     */\n    writeTree(blTree) {\n        let maxRepeatCount;\n        let minRepeatCount;\n        let currentRepeatCount;\n        let currentCodeLength = -1;\n        let i = 0;\n        while (i < this.codeCount) {\n            currentRepeatCount = 1;\n            let nextLen = this.codeLength[i];\n            if (nextLen === 0) {\n                maxRepeatCount = 138;\n                minRepeatCount = 3;\n            }\n            else {\n                maxRepeatCount = 6;\n                minRepeatCount = 3;\n                if (currentCodeLength !== nextLen) {\n                    blTree.writeCodeToStream(nextLen);\n                    currentRepeatCount = 0;\n                }\n            }\n            currentCodeLength = nextLen;\n            i++;\n            while (i < this.codeCount && currentCodeLength === this.codeLength[i]) {\n                i++;\n                if (++currentRepeatCount >= maxRepeatCount) {\n                    break;\n                }\n            }\n            if (currentRepeatCount < minRepeatCount) {\n                while (currentRepeatCount-- > 0) {\n                    blTree.writeCodeToStream(currentCodeLength);\n                }\n            }\n            else if (currentCodeLength !== 0) {\n                blTree.writeCodeToStream(16);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 2);\n            }\n            else if (currentRepeatCount <= 10) {\n                blTree.writeCodeToStream(17);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 3);\n            }\n            else {\n                blTree.writeCodeToStream(18);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 11, 7);\n            }\n        }\n    }\n    /**\n     * Build huffman tree\n     * @returns {void}\n     */\n    buildTree() {\n        let codesCount = this.codeFrequency.length;\n        let arrTree = new Int32Array(codesCount);\n        let treeLength = 0;\n        let maxCount = 0;\n        for (let n = 0; n < codesCount; n++) {\n            let freq = this.codeFrequency[n];\n            if (freq !== 0) {\n                let pos = treeLength++;\n                let pPos = 0;\n                while (pos > 0 && this.codeFrequency[arrTree[pPos = Math.floor((pos - 1) / 2)]] > freq) {\n                    arrTree[pos] = arrTree[pPos];\n                    pos = pPos;\n                }\n                arrTree[pos] = n;\n                maxCount = n;\n            }\n        }\n        while (treeLength < 2) {\n            arrTree[treeLength++] =\n                (maxCount < 2) ? ++maxCount : 0;\n        }\n        this.codeCount = Math.max(maxCount + 1, this.codeMinCount);\n        let leafsCount = treeLength;\n        let nodesCount = leafsCount;\n        let child = new Int32Array(4 * treeLength - 2);\n        let values = new Int32Array(2 * treeLength - 1);\n        for (let i = 0; i < treeLength; i++) {\n            let node = arrTree[i];\n            let iIndex = 2 * i;\n            child[iIndex] = node;\n            child[iIndex + 1] = -1;\n            values[i] = (this.codeFrequency[node] << 8);\n            arrTree[i] = i;\n        }\n        this.constructHuffmanTree(arrTree, treeLength, values, nodesCount, child);\n        this.buildLength(child);\n    }\n    constructHuffmanTree(arrTree, treeLength, values, nodesCount, child) {\n        do {\n            let first = arrTree[0];\n            let last = arrTree[--treeLength];\n            let lastVal = values[last];\n            let pPos = 0;\n            let path = 1;\n            while (path < treeLength) {\n                if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {\n                    path++;\n                }\n                arrTree[pPos] = arrTree[path];\n                pPos = path;\n                path = pPos * 2 + 1;\n            }\n            while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {\n                arrTree[path] = arrTree[pPos];\n            }\n            arrTree[path] = last;\n            let second = arrTree[0];\n            last = nodesCount++;\n            child[2 * last] = first;\n            child[2 * last + 1] = second;\n            let minDepth = Math.min(values[first] & 0xff, values[second] & 0xff);\n            values[last] = lastVal = values[first] + values[second] - minDepth + 1;\n            pPos = 0;\n            path = 1;\n            /* tslint:disable */\n            while (path < treeLength) {\n                if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {\n                    path++;\n                }\n                arrTree[pPos] = arrTree[path];\n                pPos = path;\n                path = pPos * 2 + 1;\n            } /* tslint:disable */\n            while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {\n                arrTree[path] = arrTree[pPos];\n            }\n            arrTree[path] = last;\n        } while (treeLength > 1);\n    }\n    buildLength(child) {\n        this.codeLength = new Uint8Array(this.codeFrequency.length);\n        let numNodes = Math.floor(child.length / 2);\n        let numLeafs = Math.floor((numNodes + 1) / 2);\n        let overflow = 0;\n        for (let i = 0; i < this.maxLength; i++) {\n            this.lengthCount[i] = 0;\n        }\n        overflow = this.calculateOptimalCodeLength(child, overflow, numNodes);\n        if (overflow === 0) {\n            return;\n        }\n        let iIncreasableLength = this.maxLength - 1;\n        do {\n            while (this.lengthCount[--iIncreasableLength] === 0) {\n                /* tslint:disable */\n            }\n            do {\n                this.lengthCount[iIncreasableLength]--;\n                this.lengthCount[++iIncreasableLength]++;\n                overflow -= (1 << (this.maxLength - 1 - iIncreasableLength));\n            } while (overflow > 0 && iIncreasableLength < this.maxLength - 1);\n        } while (overflow > 0);\n        this.recreateTree(child, overflow, numLeafs);\n    }\n    recreateTree(child, overflow, numLeafs) {\n        this.lengthCount[this.maxLength - 1] += overflow;\n        this.lengthCount[this.maxLength - 2] -= overflow;\n        let nodePtr = 2 * numLeafs;\n        for (let bits = this.maxLength; bits !== 0; bits--) {\n            let n = this.lengthCount[bits - 1];\n            while (n > 0) {\n                let childPtr = 2 * child[nodePtr++];\n                if (child[childPtr + 1] === -1) {\n                    this.codeLength[child[childPtr]] = bits;\n                    n--;\n                }\n            }\n        }\n    }\n    calculateOptimalCodeLength(child, overflow, numNodes) {\n        let lengths = new Int32Array(numNodes);\n        lengths[numNodes - 1] = 0;\n        for (let i = numNodes - 1; i >= 0; i--) {\n            let childIndex = 2 * i + 1;\n            if (child[childIndex] !== -1) {\n                let bitLength = lengths[i] + 1;\n                if (bitLength > this.maxLength) {\n                    bitLength = this.maxLength;\n                    overflow++;\n                }\n                lengths[child[childIndex - 1]] = lengths[child[childIndex]] = bitLength;\n            }\n            else {\n                let bitLength = lengths[i];\n                this.lengthCount[bitLength - 1]++;\n                this.codeLength[child[childIndex - 1]] = lengths[i];\n            }\n        }\n        return overflow;\n    }\n}\nCompressorHuffmanTree.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];\nCompressorHuffmanTree.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n/**\n * Checksum calculator, based on Adler32 algorithm.\n */\nexport class ChecksumCalculator {\n    /**\n     * Updates checksum by calculating checksum of the\n     * given buffer and adding it to current value.\n     * @param {number} checksum - current checksum.\n     * @param {Uint8Array} buffer - data byte array.\n     * @param {number} offset - offset in the buffer.\n     * @param {number} length - length of data to be used from the stream.\n     * @returns {number}\n     */\n    static checksumUpdate(checksum, buffer, offset, length) {\n        let uint = new Uint32Array(1);\n        uint[0] = checksum;\n        let checksum_uint = uint[0];\n        let s1 = uint[0] = checksum_uint & 65535;\n        let s2 = uint[0] = checksum_uint >> ChecksumCalculator.checkSumBitOffset;\n        while (length > 0) {\n            let steps = Math.min(length, ChecksumCalculator.checksumIterationCount);\n            length -= steps;\n            while (--steps >= 0) {\n                s1 = s1 + (uint[0] = (buffer[offset++] & 255));\n                s2 = s2 + s1;\n            }\n            s1 %= ChecksumCalculator.checksumBase;\n            s2 %= ChecksumCalculator.checksumBase;\n        }\n        checksum_uint = (s2 << ChecksumCalculator.checkSumBitOffset) | s1;\n        return checksum_uint;\n    }\n}\nChecksumCalculator.checkSumBitOffset = 16;\nChecksumCalculator.checksumBase = 65521;\nChecksumCalculator.checksumIterationCount = 3800;\n/* eslint-enable */ \n","/* eslint-disable */\nimport { Utils } from './index';\nexport class DecompressorHuffmanTree {\n    constructor(lengths) {\n        this.buildTree(lengths);\n    }\n    static init() {\n        let lengths;\n        let index;\n        // Generate huffman tree for lengths.\n        lengths = new Uint8Array(288);\n        index = 0;\n        while (index < 144) {\n            lengths[index++] = 8;\n        }\n        while (index < 256) {\n            lengths[index++] = 9;\n        }\n        while (index < 280) {\n            lengths[index++] = 7;\n        }\n        while (index < 288) {\n            lengths[index++] = 8;\n        }\n        DecompressorHuffmanTree.m_LengthTree = new DecompressorHuffmanTree(lengths);\n        // Generate huffman tree for distances.\n        lengths = new Uint8Array(32);\n        index = 0;\n        while (index < 32) {\n            lengths[index++] = 5;\n        }\n        DecompressorHuffmanTree.m_DistanceTree = new DecompressorHuffmanTree(lengths);\n    }\n    /// <summary>\n    /// Prepares data for generating huffman tree.\n    /// </summary>\n    /// <param name=\"blCount\">Array of counts of each code length.</param>\n    /// <param name=\"nextCode\">Numerical values of the smallest code for each code length.</param>\n    /// <param name=\"lengths\">Array of code lengths.</param>\n    /// <param name=\"treeSize\">Calculated tree size.</param>\n    /// <returns>Code.</returns>\n    prepareData(blCount, nextCode, lengths) {\n        let code = 0;\n        let treeSize = 512;\n        // Count number of codes for each code length.\n        for (let i = 0; i < lengths.length; i++) {\n            let length = lengths[i];\n            if (length > 0) {\n                blCount[length]++;\n            }\n        }\n        for (let bits = 1; bits <= DecompressorHuffmanTree.MAX_BITLEN; bits++) {\n            nextCode[bits] = code;\n            code += blCount[bits] << (16 - bits);\n            if (bits >= 10) {\n                let start = nextCode[bits] & 0x1ff80;\n                let end = code & 0x1ff80;\n                treeSize += (end - start) >> (16 - bits);\n            }\n        }\n        /*      if( code != 65536 )\n          throw new ZipException( \"Code lengths don't add up properly.\" );*/\n        return { 'code': code, 'treeSize': treeSize };\n    }\n    /// <summary>\n    /// Generates huffman tree.\n    /// </summary>\n    /// <param name=\"blCount\">Array of counts of each code length.</param>\n    /// <param name=\"nextCode\">Numerical values of the smallest code for each code length.</param>\n    /// <param name=\"code\">Precalculated code.</param>\n    /// <param name=\"lengths\">Array of code lengths.</param>\n    /// <param name=\"treeSize\">Calculated size of the tree.</param>\n    /// <returns>Generated tree.</returns>\n    treeFromData(blCount, nextCode, lengths, code, treeSize) {\n        let tree = new Int16Array(treeSize);\n        let pointer = 512;\n        let increment = 1 << 7;\n        for (let bits = DecompressorHuffmanTree.MAX_BITLEN; bits >= 10; bits--) {\n            let end = code & 0x1ff80;\n            code -= blCount[bits] << (16 - bits);\n            let start = code & 0x1ff80;\n            for (let i = start; i < end; i += increment) {\n                tree[Utils.bitReverse(i)] = Utils.bitConverterInt32ToInt16((-pointer << 4) | bits);\n                pointer += 1 << (bits - 9);\n            }\n        }\n        for (let i = 0; i < lengths.length; i++) {\n            let bits = lengths[i];\n            if (bits == 0) {\n                continue;\n            }\n            code = nextCode[bits];\n            let revcode = Utils.bitReverse(code);\n            if (bits <= 9) {\n                do {\n                    tree[revcode] = Utils.bitConverterInt32ToInt16((i << 4) | bits);\n                    revcode += 1 << bits;\n                } while (revcode < 512);\n            }\n            else {\n                let subTree = tree[revcode & 511];\n                let treeLen = 1 << (subTree & 15);\n                subTree = -(subTree >> 4);\n                do {\n                    tree[subTree | (revcode >> 9)] = Utils.bitConverterInt32ToInt16((i << 4) | bits);\n                    revcode += 1 << bits;\n                } while (revcode < treeLen);\n            }\n            nextCode[bits] = code + (1 << (16 - bits));\n        }\n        return tree;\n    }\n    /// <summary>\n    /// Builds huffman tree from array of code lengths.\n    /// </summary>\n    /// <param name=\"lengths\">Array of code lengths.</param>\n    buildTree(lengths) {\n        // Count of codes for each code length.\n        let blCount = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        // Numerical value of the smallest code for each code length.\n        let nextCode = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        let prepareData = this.prepareData(blCount, nextCode, lengths);\n        this.m_Tree = this.treeFromData(blCount, nextCode, lengths, prepareData.code, prepareData.treeSize);\n    }\n    /// <summary>\n    /// Reads and decompresses one symbol.\n    /// </summary>\n    /// <param name=\"input\"></param>\n    /// <returns></returns>\n    unpackSymbol(input) {\n        let lookahead;\n        let symbol;\n        if ((lookahead = input.peekBits(9)) >= 0) {\n            if ((symbol = this.m_Tree[lookahead]) >= 0) {\n                input.skipBits((symbol & 15));\n                return symbol >> 4;\n            }\n            let subtree = -(symbol >> 4);\n            let bitlen = symbol & 15;\n            if ((lookahead = input.peekBits(bitlen)) >= 0) {\n                symbol = this.m_Tree[subtree | (lookahead >> 9)];\n                input.skipBits((symbol & 15));\n                return symbol >> 4;\n            }\n            else {\n                let bits = input.availableBits;\n                lookahead = input.peekBits(bits);\n                symbol = this.m_Tree[subtree | (lookahead >> 9)];\n                if ((symbol & 15) <= bits) {\n                    input.skipBits((symbol & 15));\n                    return symbol >> 4;\n                }\n                else {\n                    return -1;\n                }\n            }\n        }\n        else {\n            let bits = input.availableBits;\n            lookahead = input.peekBits(bits);\n            symbol = this.m_Tree[lookahead];\n            if (symbol >= 0 && (symbol & 15) <= bits) {\n                input.skipBits((symbol & 15));\n                return symbol >> 4;\n            }\n            else {\n                return -1;\n            }\n        }\n    }\n    /// <summary>\n    /// GET huffman tree for encoding and decoding lengths.\n    /// </summary>\n    static get lengthTree() {\n        return this.m_LengthTree;\n    }\n    /// <summary>\n    /// GET huffman tree for encoding and decoding distances.\n    /// </summary>\n    static get distanceTree() {\n        return this.m_DistanceTree;\n    }\n}\n/// <summary>\n/// Maximum count of bits.\n/// </summary>\nDecompressorHuffmanTree.MAX_BITLEN = 15;\n/* eslint-enable */ \n","/* eslint-disable */\n/// <summary>\n/// Checksum calculator, based on Adler32 algorithm.\n/// </summary>\nexport class ChecksumCalculator {\n    /// <summary>\n    /// Updates checksum by calculating checksum of the\n    /// given buffer and adding it to current value.\n    /// </summary>\n    /// <param name=\"checksum\">Current checksum.</param>\n    /// <param name=\"buffer\">Data byte array.</param>\n    /// <param name=\"offset\">Offset in the buffer.</param>\n    /// <param name=\"length\">Length of data to be used from the stream.</param>\n    static ChecksumUpdate(checksum, buffer, offset, length) {\n        let checkSumUInt = checksum;\n        let s1 = checkSumUInt & 65535;\n        let s2 = checkSumUInt >> this.DEF_CHECKSUM_BIT_OFFSET;\n        while (length > 0) {\n            let steps = Math.min(length, this.DEF_CHECKSUM_ITERATIONSCOUNT);\n            length -= steps;\n            while (--steps >= 0) {\n                s1 = s1 + (buffer[offset++] & 255);\n                s2 = s2 + s1;\n            }\n            s1 %= this.DEF_CHECKSUM_BASE;\n            s2 %= this.DEF_CHECKSUM_BASE;\n        }\n        checkSumUInt = (s2 << this.DEF_CHECKSUM_BIT_OFFSET) | s1;\n        checksum = checkSumUInt;\n    }\n    /// <summary>\n    /// Generates checksum by calculating checksum of the\n    /// given buffer.\n    /// </summary>\n    /// <param name=\"buffer\">Data byte array.</param>\n    /// <param name=\"offset\">Offset in the buffer.</param>\n    /// <param name=\"length\">Length of data to be used from the stream.</param>\n    static ChecksumGenerate(buffer, offset, length) {\n        const result = 1;\n        ChecksumCalculator.ChecksumUpdate(result, buffer, offset, length);\n        return result;\n    }\n}\n/// <summary>\n/// Bits offset, used in adler checksum calculation.\n/// </summary>\nChecksumCalculator.DEF_CHECKSUM_BIT_OFFSET = 16;\n/// <summary>\n/// Lagrest prime, less than 65535\n/// </summary>\nChecksumCalculator.DEF_CHECKSUM_BASE = 65521;\n/// <summary>\n/// Count of iteration used in calculated of the adler checksumm.\n/// </summary>\nChecksumCalculator.DEF_CHECKSUM_ITERATIONSCOUNT = 3800;\n/* eslint-enable */ \n","/* eslint-disable */\nimport { DecompressorHuffmanTree } from './decompressor-huffman-tree';\nimport { Utils } from './utils';\nimport { ChecksumCalculator } from './checksum-calculator';\nexport class CompressedStreamReader {\n    constructor(stream, bNoWrap) {\n        /// <summary>\n        /// Code lengths for the code length alphabet.\n        /// </summary>\n        this.defaultHuffmanDynamicTree = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n        /// <summary>\n        /// Mask for compression method to be decoded from 16-bit header.\n        /// </summary>\n        this.DEF_HEADER_METHOD_MASK = 15 << 8;\n        /// <summary>\n        /// Mask for compression info to be decoded from 16-bit header.\n        /// </summary>\n        this.DEF_HEADER_INFO_MASK = 240 << 8;\n        /// <summary>\n        /// Mask for check bits to be decoded from 16-bit header.\n        /// </summary>\n        this.DEF_HEADER_FLAGS_FCHECK = 31;\n        /// <summary>\n        /// Mask for dictionary presence to be decoded from 16-bit header.\n        /// </summary>\n        this.DEF_HEADER_FLAGS_FDICT = 32;\n        /// <summary>\n        /// Mask for compression level to be decoded from 16-bit header.\n        /// </summary>\n        this.DEF_HEADER_FLAGS_FLEVEL = 192;\n        /// <summary>\n        /// Maximum size of the data window.\n        /// </summary>\n        this.DEF_MAX_WINDOW_SIZE = 65535;\n        /// <summary>\n        /// Maximum length of the repeatable block.\n        /// </summary>\n        this.DEF_HUFFMAN_REPEATE_MAX = 258;\n        /// <summary>\n        /// End of the block sign.\n        /// </summary>\n        this.DEF_HUFFMAN_END_BLOCK = 256;\n        /// <summary>\n        /// Minimal length code.\n        /// </summary>\n        this.DEF_HUFFMAN_LENGTH_MINIMUMCODE = 257;\n        /// <summary>\n        /// Maximal length code.\n        /// </summary>\n        this.DEF_HUFFMAN_LENGTH_MAXIMUMCODE = 285;\n        /// <summary>\n        /// Maximal distance code.\n        /// </summary>\n        this.DEF_HUFFMAN_DISTANCE_MAXIMUMCODE = 29;\n        /// <summary>\n        /// Currently calculated checksum,\n        /// based on Adler32 algorithm.\n        /// </summary>\n        this.mCheckSum = 1;\n        /// <summary>\n        /// Currently read 4 bytes.\n        /// </summary>\n        this.tBuffer = 0;\n        /// <summary>\n        /// Count of bits that are in buffer.\n        /// </summary>\n        this.mBufferedBits = 0;\n        /// <summary>\n        /// Temporary buffer.\n        /// </summary>\n        this.mTempBuffer = new Uint8Array(4);\n        /// <summary>\n        /// 32k buffer for unpacked data.\n        /// </summary>\n        this.mBlockBuffer = new Uint8Array(this.DEF_MAX_WINDOW_SIZE);\n        /// <summary>\n        /// No wrap mode.\n        /// </summary>\n        this.mbNoWrap = false;\n        /// <summary>\n        /// Window size, can not be larger than 32k.\n        /// </summary>\n        this.mWindowSize = 0;\n        /// <summary>\n        /// Current position in output stream.\n        /// Current in-block position can be extracted by applying Int16.MaxValue mask.\n        /// </summary>\n        this.mCurrentPosition = 0;\n        /// <summary>\n        /// Data length.\n        /// Current in-block position can be extracted by applying Int16.MaxValue mask.\n        /// </summary>\n        this.mDataLength = 0;\n        /// <summary>\n        /// Specifies wheather next block can to be read.\n        /// Reading can be denied because the header of the last block have been read.\n        /// </summary>\n        this.mbCanReadNextBlock = true;\n        /// <summary>\n        /// Specifies wheather user can read more data from stream.\n        /// </summary>\n        this.mbCanReadMoreData = true;\n        /// <summary>\n        /// Specifies wheather checksum has been read.\n        /// </summary>\n        this.mbCheckSumRead = false;\n        if (stream == null) {\n            throw new DOMException('stream');\n        }\n        if (stream.length === 0) {\n            throw new DOMException('stream - string can not be empty');\n        }\n        DecompressorHuffmanTree.init();\n        this.mInputStream = new Stream(stream);\n        this.mbNoWrap = bNoWrap;\n        if (!this.mbNoWrap) {\n            this.readZLibHeader();\n        }\n        this.decodeBlockHeader();\n    }\n    get mBuffer() {\n        return this.tBuffer;\n    }\n    set mBuffer(value) {\n        this.tBuffer = value;\n    }\n    /**\n     * Initializes compressor and writes ZLib header if needed.\n     * @param {boolean} noWrap - optional if true, ZLib header and checksum will not be written.\n     */\n    /// <summary>\n    /// Reads specified count of bits without adjusting position.\n    /// </summary>\n    /// <param name=\"count\">Count of bits to be read.</param>\n    /// <returns>Read value.</returns>\n    peekBits(count) {\n        if (count < 0) {\n            throw new DOMException('count', 'Bits count can not be less than zero.');\n        }\n        if (count > 32) {\n            throw new DOMException('count', 'Count of bits is too large.');\n        }\n        // If buffered data is not enough to give result,\n        // fill buffer.\n        if (this.mBufferedBits < count) {\n            this.fillBuffer();\n        }\n        // If you want to read 4 bytes and there is partial data in\n        // buffer, than you will fail.\n        if (this.mBufferedBits < count) {\n            return -1;\n        }\n        // Create bitmask for reading of count bits\n        const bitMask = ~(4294967295 << count);\n        const result = Utils.bitConverterUintToInt32(this.mBuffer & bitMask);\n        //Debug.WriteLine( /*new string( ' ', 32 - mBufferedBits + (int)( ( 32 - mBufferedBits ) / 8 ) ) + BitsToString( (int)mBuffer, mBufferedBits ) + \" \" + BitsToString( result, count ) +*/ \" \" + result.ToString() );\n        return result;\n    }\n    fillBuffer() {\n        const length = 4 - (this.mBufferedBits >> 3) -\n            (((this.mBufferedBits & 7) !== 0) ? 1 : 0);\n        if (length === 0) {\n            return;\n        }\n        //TODO: fix this\n        const bytesRead = this.mInputStream.read(this.mTempBuffer, 0, length);\n        for (let i = 0; i < bytesRead; i++) {\n            this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer |\n                (Utils.bitConverterInt32ToUint(this.mTempBuffer[i] << this.mBufferedBits)));\n            this.mBufferedBits += 8;\n        }\n        //TODO: fix this\n    }\n    /// <summary>\n    /// Skips specified count of bits.\n    /// </summary>\n    /// <param name=\"count\">Count of bits to be skipped.</param>\n    skipBits(count) {\n        if (count < 0) {\n            throw new DOMException('count', 'Bits count can not be less than zero.');\n        }\n        if (count === 0) {\n            return;\n        }\n        if (count >= this.mBufferedBits) {\n            count -= this.mBufferedBits;\n            this.mBufferedBits = 0;\n            this.mBuffer = 0;\n            // if something left, skip it.\n            if (count > 0) {\n                // Skip entire bytes.\n                this.mInputStream.position += (count >> 3); //TODO: fix this\n                count &= 7;\n                // Skip bits.\n                if (count > 0) {\n                    this.fillBuffer();\n                    this.mBufferedBits -= count;\n                    this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);\n                }\n            }\n        }\n        else {\n            this.mBufferedBits -= count;\n            this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);\n        }\n    }\n    get availableBits() {\n        return this.mBufferedBits;\n    }\n    /// <summary>\n    /// Reads ZLib header with compression method and flags.\n    /// </summary>\n    readZLibHeader() {\n        // first 8 bits - compression Method and flags\n        // 8 other - flags\n        const header = this.readInt16();\n        //Debug.WriteLine( BitsToString( header ) );\n        if (header === -1) {\n            throw new DOMException('Header of the stream can not be read.');\n        }\n        if (header % 31 !== 0) {\n            throw new DOMException('Header checksum illegal');\n        }\n        if ((header & this.DEF_HEADER_METHOD_MASK) !== (8 << 8)) {\n            throw new DOMException('Unsupported compression method.');\n        }\n        this.mWindowSize = Math.pow(2, ((header & this.DEF_HEADER_INFO_MASK) >> 12) + 8);\n        if (this.mWindowSize > 65535) {\n            throw new DOMException('Unsupported window size for deflate compression method.');\n        }\n        if ((header & this.DEF_HEADER_FLAGS_FDICT) >> 5 === 1) {\n            // Get dictionary.\n            throw new DOMException('Custom dictionary is not supported at the moment.');\n        }\n    }\n    /// <summary>\n    /// TODO: place correct comment here\n    /// </summary>\n    /// <returns>\n    /// TODO: place correct comment here\n    /// </returns>\n    readInt16() {\n        let result = (this.readBits(8) << 8);\n        result |= this.readBits(8);\n        return result;\n    }\n    /// <summary>\n    /// Reads specified count of bits from stream.\n    /// </summary>\n    /// <param name=\"count\">Count of bits to be read.</param>\n    /// <returns>\n    /// TODO: place correct comment here\n    /// </returns>\n    readBits(count) {\n        const result = this.peekBits(count);\n        if (result === -1) {\n            return -1;\n        }\n        this.mBufferedBits -= count;\n        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);\n        return result;\n    }\n    /// <summary>\n    /// Reads and decodes block of data.\n    /// </summary>\n    /// <returns>True if buffer was empty and new data was read, otherwise - False.</returns>\n    decodeBlockHeader() {\n        if (!this.mbCanReadNextBlock) {\n            return false;\n        }\n        const bFinalBlock = this.readBits(1);\n        if (bFinalBlock === -1) {\n            return false;\n        }\n        const blockType = this.readBits(2);\n        if (blockType === -1) {\n            return false;\n        }\n        this.mbCanReadNextBlock = (bFinalBlock === 0);\n        //      ChecksumReset();\n        switch (blockType) {\n            case 0:\n                // Uncompressed data\n                this.mbReadingUncompressed = true;\n                this.skipToBoundary();\n                const length = this.readInt16Inverted();\n                const lengthComplement = this.readInt16Inverted();\n                if (length !== (lengthComplement ^ 0xffff)) {\n                    throw new DOMException('Wrong block length.');\n                }\n                if (length > 65535) {\n                    throw new DOMException('Uncompressed block length can not be more than 65535.');\n                }\n                this.mUncompressedDataLength = length;\n                this.mCurrentLengthTree = null;\n                this.mCurrentDistanceTree = null;\n                break;\n            case 1:\n                // Compressed data with fixed huffman codes.\n                this.mbReadingUncompressed = false;\n                this.mUncompressedDataLength = -1;\n                this.mCurrentLengthTree = DecompressorHuffmanTree.lengthTree;\n                this.mCurrentDistanceTree = DecompressorHuffmanTree.distanceTree;\n                break;\n            case 2:\n                // Compressed data with dynamic huffman codes.\n                this.mbReadingUncompressed = false;\n                this.mUncompressedDataLength = -1;\n                const trees = this.decodeDynamicHeader(this.mCurrentLengthTree, this.mCurrentDistanceTree);\n                this.mCurrentLengthTree = trees.lengthTree;\n                this.mCurrentDistanceTree = trees.distanceTree;\n                break;\n            default:\n                throw new DOMException('Wrong block type.');\n        }\n        return true;\n    }\n    /// <summary>\n    /// Discards left-most partially used byte.\n    /// </summary>\n    skipToBoundary() {\n        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> (this.mBufferedBits & 7));\n        this.mBufferedBits &= ~7;\n    }\n    /// <summary>\n    /// TODO: place correct comment here\n    /// </summary>\n    /// <returns>\n    /// TODO: place correct comment here\n    /// </returns>\n    readInt16Inverted() {\n        let result = (this.readBits(8));\n        result |= this.readBits(8) << 8;\n        return result;\n    }\n    /// <summary>\n    /// Reades dynamic huffman codes from block header.\n    /// </summary>\n    /// <param name=\"lengthTree\">Literals/Lengths tree.</param>\n    /// <param name=\"distanceTree\">Distances tree.</param>\n    decodeDynamicHeader(lengthTree, distanceTree) {\n        let bLastSymbol = 0;\n        let iLengthsCount = this.readBits(5);\n        let iDistancesCount = this.readBits(5);\n        let iCodeLengthsCount = this.readBits(4);\n        if (iLengthsCount < 0 || iDistancesCount < 0 || iCodeLengthsCount < 0) {\n            throw new DOMException('Wrong dynamic huffman codes.');\n        }\n        iLengthsCount += 257;\n        iDistancesCount += 1;\n        const iResultingCodeLengthsCount = iLengthsCount + iDistancesCount;\n        const arrResultingCodeLengths = new Uint8Array(iResultingCodeLengthsCount);\n        const arrDecoderCodeLengths = new Uint8Array(19);\n        iCodeLengthsCount += 4;\n        let iCurrentCode = 0;\n        while (iCurrentCode < iCodeLengthsCount) {\n            const len = this.readBits(3);\n            if (len < 0) {\n                throw new DOMException('Wrong dynamic huffman codes.');\n            }\n            arrDecoderCodeLengths[this.defaultHuffmanDynamicTree[iCurrentCode++]] = len;\n        }\n        const treeInternalDecoder = new DecompressorHuffmanTree(arrDecoderCodeLengths);\n        iCurrentCode = 0;\n        for (;;) {\n            let symbol;\n            let bNeedBreak = false;\n            symbol = treeInternalDecoder.unpackSymbol(this);\n            while ((symbol & ~15) === 0) {\n                arrResultingCodeLengths[iCurrentCode++] = bLastSymbol = symbol;\n                if (iCurrentCode === iResultingCodeLengthsCount) {\n                    bNeedBreak = true;\n                    break;\n                }\n                symbol = treeInternalDecoder.unpackSymbol(this);\n            }\n            if (bNeedBreak) {\n                break;\n            }\n            if (symbol < 0) {\n                throw new DOMException('Wrong dynamic huffman codes.');\n            }\n            if (symbol >= 17) {\n                bLastSymbol = 0;\n            }\n            else if (iCurrentCode === 0) {\n                throw new DOMException('Wrong dynamic huffman codes.');\n            }\n            const miRepSymbol = symbol - 16;\n            const bits = CompressedStreamReader.DEF_HUFFMAN_DYNTREE_REPEAT_BITS[miRepSymbol];\n            let count = this.readBits(bits);\n            if (count < 0) {\n                throw new DOMException('Wrong dynamic huffman codes.');\n            }\n            count += CompressedStreamReader.DEF_HUFFMAN_DYNTREE_REPEAT_MINIMUMS[miRepSymbol];\n            if (iCurrentCode + count > iResultingCodeLengthsCount) {\n                throw new DOMException('Wrong dynamic huffman codes.');\n            }\n            while (count-- > 0) {\n                arrResultingCodeLengths[iCurrentCode++] = bLastSymbol;\n            }\n            if (iCurrentCode === iResultingCodeLengthsCount) {\n                break;\n            }\n        }\n        let tempArray = new Uint8Array(iLengthsCount);\n        tempArray.set(arrResultingCodeLengths.subarray(0, iLengthsCount), 0);\n        //sourceArray, sourceIndex, destinationArray, destinationIndex, length\n        //Array.copy( arrResultingCodeLengths, 0, tempArray, 0, iLengthsCount );\n        lengthTree = new DecompressorHuffmanTree(tempArray);\n        tempArray = arrResultingCodeLengths.slice(iLengthsCount, iLengthsCount + iDistancesCount);\n        //Array.copy( arrResultingCodeLengths, iLengthsCount, tempArray, 0, iDistancesCount );\n        distanceTree = new DecompressorHuffmanTree(tempArray);\n        return { 'lengthTree': lengthTree, 'distanceTree': distanceTree };\n    }\n    /// <summary>\n    /// Decodes huffman codes.\n    /// </summary>\n    /// <returns>True if some data was read.</returns>\n    readHuffman() {\n        let free = this.DEF_MAX_WINDOW_SIZE - (this.mDataLength - this.mCurrentPosition);\n        let dataRead = false;\n        //long maxdistance = DEF_MAX_WINDOW_SIZE >> 1;\n        const readdata = {};\n        // DEF_HUFFMAN_REPEATE_MAX - longest repeatable block, we should always reserve space for it because\n        // if we should not, we will have buffer overrun.\n        while (free >= this.DEF_HUFFMAN_REPEATE_MAX) {\n            let symbol;\n            symbol = this.mCurrentLengthTree.unpackSymbol(this);\n            // Only codes 0..255 are valid independent symbols.\n            while (((symbol) & ~0xff) === 0) {\n                readdata[(this.mDataLength + 1) % this.DEF_MAX_WINDOW_SIZE] = symbol;\n                this.mBlockBuffer[this.mDataLength++ % this.DEF_MAX_WINDOW_SIZE] = symbol;\n                dataRead = true;\n                if (--free < this.DEF_HUFFMAN_REPEATE_MAX) {\n                    return true;\n                }\n                //if( (mDataLength - mCurrentPosition ) < maxdistance ) return true;\n                symbol = this.mCurrentLengthTree.unpackSymbol(this);\n            }\n            if (symbol < this.DEF_HUFFMAN_LENGTH_MINIMUMCODE) {\n                if (symbol < this.DEF_HUFFMAN_END_BLOCK) {\n                    throw new DOMException('Illegal code.');\n                }\n                const numDataRead = dataRead ? 1 : 0;\n                this.mbCanReadMoreData = this.decodeBlockHeader();\n                const numReadMore = (this.mbCanReadMoreData) ? 1 : 0;\n                return (numDataRead | numReadMore) ? true : false;\n            }\n            if (symbol > this.DEF_HUFFMAN_LENGTH_MAXIMUMCODE) {\n                throw new DOMException('Illegal repeat code length.');\n            }\n            let iRepeatLength = CompressedStreamReader.DEF_HUFFMAN_REPEAT_LENGTH_BASE[symbol -\n                this.DEF_HUFFMAN_LENGTH_MINIMUMCODE];\n            let iRepeatExtraBits = CompressedStreamReader.DEF_HUFFMAN_REPEAT_LENGTH_EXTENSION[symbol -\n                this.DEF_HUFFMAN_LENGTH_MINIMUMCODE];\n            if (iRepeatExtraBits > 0) {\n                const extra = this.readBits(iRepeatExtraBits);\n                if (extra < 0) {\n                    throw new DOMException('Wrong data.');\n                }\n                iRepeatLength += extra;\n            }\n            // Unpack repeat distance.\n            symbol = this.mCurrentDistanceTree.unpackSymbol(this);\n            if (symbol < 0 || symbol > CompressedStreamReader.DEF_HUFFMAN_REPEAT_DISTANCE_BASE.length) {\n                throw new DOMException('Wrong distance code.');\n            }\n            let iRepeatDistance = CompressedStreamReader.DEF_HUFFMAN_REPEAT_DISTANCE_BASE[symbol];\n            iRepeatExtraBits = CompressedStreamReader.DEF_HUFFMAN_REPEAT_DISTANCE_EXTENSION[symbol];\n            if (iRepeatExtraBits > 0) {\n                const extra = this.readBits(iRepeatExtraBits);\n                if (extra < 0) {\n                    throw new DOMException('Wrong data.');\n                }\n                iRepeatDistance += extra;\n            }\n            // Copy data in slow repeat mode\n            for (let i = 0; i < iRepeatLength; i++) {\n                this.mBlockBuffer[this.mDataLength % this.DEF_MAX_WINDOW_SIZE] =\n                    this.mBlockBuffer[(this.mDataLength - iRepeatDistance) % this.DEF_MAX_WINDOW_SIZE];\n                this.mDataLength++;\n                free--;\n            }\n            dataRead = true;\n        }\n        return dataRead;\n    }\n    /// <summary>\n    /// Reads data to buffer.\n    /// </summary>\n    /// <param name=\"buffer\">Output buffer for data.</param>\n    /// <param name=\"offset\">Offset in output data.</param>\n    /// <param name=\"length\">Length of the data to be read.</param>\n    /// <returns>Count of bytes actually read.</returns>\n    read(buffer, offset, length) {\n        if (buffer == null) {\n            throw new DOMException('buffer');\n        }\n        if (offset < 0 || offset > buffer.length - 1) {\n            throw new DOMException('offset', 'Offset does not belong to specified buffer.');\n        }\n        if (length < 0 || length > buffer.length - offset) {\n            throw new DOMException('length', 'Length is illegal.');\n        }\n        const initialLength = length;\n        while (length > 0) {\n            // Read from internal buffer.\n            if (this.mCurrentPosition < this.mDataLength) {\n                // Position in buffer array.\n                const inBlockPosition = (this.mCurrentPosition % this.DEF_MAX_WINDOW_SIZE);\n                // We can not read more than we have in buffer at once,\n                // and we not read more than till the array end.\n                let dataToCopy = Math.min(this.DEF_MAX_WINDOW_SIZE - inBlockPosition, (this.mDataLength - this.mCurrentPosition));\n                // Reading not more, than the rest of the buffer.\n                dataToCopy = Math.min(dataToCopy, length);\n                //sourceArray, sourceIndex, destinationArray, destinationIndex, length\n                // Copy data.\n                //Array.Copy( mBlockBuffer, inBlockPosition, buffer, offset, dataToCopy );\n                //buffer.set(this.mBlockBuffer.slice(inBlockPosition, dataToCopy), offset);\n                Utils.arrayCopy(this.mBlockBuffer, inBlockPosition, buffer, offset, dataToCopy);\n                // Correct position, length,\n                this.mCurrentPosition += dataToCopy;\n                offset += dataToCopy;\n                length -= dataToCopy;\n            }\n            else {\n                if (!this.mbCanReadMoreData) {\n                    break;\n                }\n                const oldDataLength = this.mDataLength;\n                if (!this.mbReadingUncompressed) {\n                    if (!this.readHuffman()) {\n                        break;\n                    }\n                }\n                else {\n                    if (this.mUncompressedDataLength === 0) {\n                        // If there is no more data in stream, just exit.\n                        this.mbCanReadMoreData = this.decodeBlockHeader();\n                        if (!(this.mbCanReadMoreData)) {\n                            break;\n                        }\n                    }\n                    else {\n                        // Position of the data end in block buffer.\n                        const inBlockPosition = (this.mDataLength % this.DEF_MAX_WINDOW_SIZE);\n                        const dataToRead = Math.min(this.mUncompressedDataLength, this.DEF_MAX_WINDOW_SIZE - inBlockPosition);\n                        const dataRead = this.readPackedBytes(this.mBlockBuffer, inBlockPosition, dataToRead);\n                        if (dataToRead !== dataRead) {\n                            throw new DOMException('Not enough data in stream.');\n                        }\n                        this.mUncompressedDataLength -= dataRead;\n                        this.mDataLength += dataRead;\n                    }\n                }\n                if (oldDataLength < this.mDataLength) {\n                    const start = (oldDataLength % this.DEF_MAX_WINDOW_SIZE);\n                    const end = (this.mDataLength % this.DEF_MAX_WINDOW_SIZE);\n                    if (start < end) {\n                        this.checksumUpdate(this.mBlockBuffer, start, end - start);\n                    }\n                    else {\n                        this.checksumUpdate(this.mBlockBuffer, start, this.DEF_MAX_WINDOW_SIZE - start);\n                        if (end > 0) {\n                            this.checksumUpdate(this.mBlockBuffer, 0, end);\n                        }\n                    }\n                }\n            }\n        }\n        if (!this.mbCanReadMoreData && !this.mbCheckSumRead && !this.mbNoWrap) {\n            this.skipToBoundary();\n            const checkSum = this.readInt32();\n            //Debug.Assert( checkSum == mCheckSum, \"\" );\n            if (checkSum !== this.mCheckSum) {\n                throw new DOMException('Checksum check failed.');\n            }\n            this.mbCheckSumRead = true;\n        }\n        return initialLength - length;\n    }\n    /// <summary>\n    /// Reads array of bytes.\n    /// </summary>\n    /// <param name=\"buffer\">Output buffer.</param>\n    /// <param name=\"offset\">Offset in output buffer.</param>\n    /// <param name=\"length\">Length of the data to be read.</param>\n    /// <returns>Count of bytes actually read to the buffer.</returns>\n    readPackedBytes(buffer, offset, length) {\n        if (buffer == null) {\n            throw new DOMException('buffer');\n        }\n        if (offset < 0 || offset > buffer.length - 1) {\n            throw new DOMException('offset\", \"Offset can not be less than zero or greater than buffer length - 1.');\n        }\n        if (length < 0) {\n            throw new DOMException('length\", \"Length can not be less than zero.');\n        }\n        if (length > buffer.length - offset) {\n            throw new DOMException('length\", \"Length is too large.');\n        }\n        if ((this.mBufferedBits & 7) !== 0) {\n            throw new DOMException('Reading of unalligned data is not supported.');\n        }\n        if (length === 0) {\n            return 0;\n        }\n        let result = 0;\n        while (this.mBufferedBits > 0 && length > 0) {\n            buffer[offset++] = (this.mBuffer);\n            this.mBufferedBits -= 8;\n            this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> 8);\n            length--;\n            result++;\n        }\n        if (length > 0) {\n            //TODO: Fix this.\n            result += this.mInputStream.read(buffer, offset, length);\n        }\n        return result;\n    }\n    /// <summary>\n    /// TODO: place correct comment here\n    /// </summary>\n    /// <returns>\n    /// TODO: place correct comment here\n    /// </returns>\n    readInt32() {\n        let result = this.readBits(8) << 24;\n        result |= this.readBits(8) << 16;\n        result |= this.readBits(8) << 8;\n        result |= this.readBits(8);\n        return result;\n    }\n    /// <summary>\n    /// Updates checksum by calculating checksum of the\n    /// given buffer and adding it to current value.\n    /// </summary>\n    /// <param name=\"buffer\">Data byte array.</param>\n    /// <param name=\"offset\">Offset in the buffer.</param>\n    /// <param name=\"length\">Length of data to be used from the stream.</param>\n    checksumUpdate(buffer, offset, length) {\n        ChecksumCalculator.ChecksumUpdate(this.mCheckSum, buffer, offset, length);\n    }\n}\nCompressedStreamReader.DEF_REVERSE_BITS = new Uint8Array([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]);\n/// <summary>\n/// Minimum count of repetions.\n/// </summary>\nCompressedStreamReader.DEF_HUFFMAN_DYNTREE_REPEAT_MINIMUMS = [3, 3, 11];\n/// <summary>\n/// Bits, that responds for different repetion modes.\n/// </summary>\nCompressedStreamReader.DEF_HUFFMAN_DYNTREE_REPEAT_BITS = [2, 3, 7];\n/// <summary>\n/// Length bases.\n/// </summary>\nCompressedStreamReader.DEF_HUFFMAN_REPEAT_LENGTH_BASE = [\n    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258\n];\n/// <summary>\n/// Length extended bits count.\n/// </summary>\nCompressedStreamReader.DEF_HUFFMAN_REPEAT_LENGTH_EXTENSION = [\n    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,\n    3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0\n];\n/// <summary>\n/// Distance bases.\n/// </summary>\nCompressedStreamReader.DEF_HUFFMAN_REPEAT_DISTANCE_BASE = [\n    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n    8193, 12289, 16385, 24577\n];\n/// <summary>\n/// Distance extanded bits count.\n/// </summary>\nCompressedStreamReader.DEF_HUFFMAN_REPEAT_DISTANCE_EXTENSION = [\n    0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\n    7, 7, 8, 8, 9, 9, 10, 10, 11, 11,\n    12, 12, 13, 13\n];\nexport class Stream {\n    constructor(input) {\n        this.position = 0;\n        this.inputStream = new Uint8Array(input.buffer);\n    }\n    get length() {\n        return this.inputStream.buffer.byteLength;\n    }\n    read(buffer, start, length) {\n        let temp = new Uint8Array(this.inputStream.buffer, this.position + start);\n        let data = temp.subarray(0, length);\n        buffer.set(data, 0);\n        this.position += data.byteLength;\n        return data.byteLength;\n    }\n    readByte() {\n        return this.inputStream[this.position++];\n    }\n    write(inputBuffer, offset, count) {\n        Utils.arrayCopy(inputBuffer, 0, this.inputStream, this.position + offset, count);\n        // this.inputStream = new Uint8Array(this.inputStream.buffer, this.position + offset);\n        // this.inputStream.set(inputBuffer, offset);\n        this.position += count;\n    }\n    toByteArray() {\n        return new Uint8Array(this.inputStream.buffer);\n    }\n}\n/* eslint-enable */ \n","/**\n * export ZipArchive class\n */\nexport * from './zip-archive';\nexport * from './compression-writer';\nexport * from './utils';\nexport * from './decompressor-huffman-tree';\nexport * from './compression-reader';\n"],"names":["ChecksumCalculator"],"mappings":"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"}