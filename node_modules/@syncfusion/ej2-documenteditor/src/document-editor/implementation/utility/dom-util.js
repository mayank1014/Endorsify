import { L10n, createElement, isNullOrUndefined } from '@syncfusion/ej2-base';
//import { DocumentEditorRulerModel } from '../ruler-settings-model';
import { Ruler } from '../ruler/index';
import { HelperMethods, Point } from '../editor/editor-helper';
import { WTabStop } from '../format/paragraph-format';
/**
 * Size defines and processes the size(width/height) of the objects
 * @private
 */
var Size = /** @class */ (function () {
    function Size(width, height) {
        this.width = width;
        this.height = height;
    }
    /**
     * isEmpty method \
     *
     * @returns { boolean } isEmpty method .\
     *
     * @private
     */
    Size.prototype.isEmpty = function () {
        return this.height === 0 && this.width === 0;
    };
    /**
    * clone method \
    *
    * @returns { Size } clone method .\
    *
    * @private
    */
    Size.prototype.clone = function () {
        return new Size(this.width, this.height);
    };
    return Size;
}());
export { Size };
/* eslint-disable */
/**
 * defines the helper methods for the ruler
 * @private
 */
var RulerHelper = /** @class */ (function () {
    function RulerHelper() {
    }
    /**
     * @private
     */
    RulerHelper.prototype.hideTabStopSwitch = function (show) {
        if (this.tabStopStwitch) {
            this.showHideElement(show, this.tabStopStwitch);
        }
    };
    /**
     * @private
     */
    RulerHelper.prototype.hideRulerBottom = function (show) {
        if (this.hRulerBottom) {
            this.showHideElement(show, this.hRulerBottom);
        }
        if (this.vRulerBottom) {
            this.showHideElement(show, this.vRulerBottom);
        }
    };
    RulerHelper.prototype.showHideElement = function (show, element) {
        if (show) {
            element.style.display = 'block';
        }
        else {
            element.style.display = 'none';
        }
    };
    /* eslint-enable */
    /**
     * createHtmlElement method \
     *
     * @returns {SVGSVGElement} createHtmlElement method .\
     * @param { string } elementType - provide the diagramId  value.
     * @param { Object } attribute - provide the diagramId  value.
     * @private
     */
    RulerHelper.prototype.createHtmlElement = function (elementType, attribute) {
        var element = createElement(elementType);
        this.setAttributeHtml(element, attribute);
        return element;
    };
    /**
     * createSvgElement method \
     *
     * @returns {SVGSVGElement} createSvgElement method .\
     * @param { string } elementType - provide the elementType  value.
     * @param { Object } attribute - provide the attribute  value.
     * @private
     */
    RulerHelper.prototype.createSvgElement = function (elementType, attribute) {
        var element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
        this.setAttributeSvg(element, attribute);
        return element;
    };
    /**
     * applyStyleAgainstCsp method   \
     *
     * @returns {void} applyStyleAgainstCsp method .\
     * @param { SVGElement } svg - provide the svg  value.
     * @param { string } attributes - provide the boolean  value.
     * @private
     */
    RulerHelper.prototype.applyStyleAgainstCsp = function (svg, attributes) {
        var keys = attributes.split(';');
        for (var i = 0; i < keys.length; i++) {
            var attribute = keys[parseInt(i.toString(), 10)].split(':');
            if (attribute.length === 2) {
                svg.style[attribute[0].trim()] = attribute[1].trim();
            }
        }
    };
    /**
     * setAttributeSvg method.
     *
     * @returns {void} setAttributeSvg method .\
     * @param { SVGElement } svg - provide the svg  value.
     * @param { Object } attributes - provide the boolean  value.
     * @private
     */
    RulerHelper.prototype.setAttributeSvg = function (svg, attributes) {
        var keys = Object.keys(attributes);
        for (var i = 0; i < keys.length; i++) {
            // Added below condition to check whether svg is undefined or not
            if (svg && keys[parseInt(i.toString(), 10)] !== 'style') {
                svg.setAttribute(keys[parseInt(i.toString(), 10)], attributes[keys[parseInt(i.toString(), 10)]]);
            }
            else {
                this.applyStyleAgainstCsp(svg, attributes[keys[parseInt(i.toString(), 10)]]);
            }
        }
    };
    /**
     * setAttributeHtml method   \
     *
     * @returns {void} setAttributeHtml method .\
     * @param { HTMLElement } element - provide the svg  value.
     * @param { Object } attributes - provide the boolean  value.
     * @private
     */
    RulerHelper.prototype.setAttributeHtml = function (element, attributes) {
        var keys = Object.keys(attributes);
        for (var i = 0; i < keys.length; i++) {
            if (keys[parseInt(i.toString(), 10)] !== 'style') {
                element.setAttribute(keys[parseInt(i.toString(), 10)], attributes[keys[parseInt(i.toString(), 10)]]);
            }
            else {
                this.applyStyleAgainstCsp(element, attributes[keys[parseInt(i.toString(), 10)]]);
            }
        }
    };
    /**
     * renderOverlapElement method \
     *
     * @returns {void} renderOverlapElement method .\
     * @param { DocumentEditor} documentEditor - provide the content  value.
     * @private
     */
    RulerHelper.prototype.renderOverlapElement = function (documentEditor) {
        var rulerSize = this.getRulerSize(documentEditor);
        var attributes = {
            'id': documentEditor.element.id + '_overlapRuler',
            style: 'height:' + rulerSize.height + 'px;width:' + rulerSize.width + 'px;position:absolute;margin-left:0;margin-top:0;diplay:none',
            class: 'e-ruler-overlap'
        };
        var overlap = this.createHtmlElement('div', attributes);
        var element = document.getElementById(documentEditor.element.id + '_viewerContainer');
        element.insertBefore(overlap, element.firstChild);
        return overlap;
    };
    RulerHelper.prototype.renderRulerMarkerIndicatorElement = function (documentEditor) {
        if (!documentEditor.enableSelection) {
            return;
        }
        var rulerSize = this.getRulerSize(documentEditor);
        var attributes = {
            'id': documentEditor.element.id + '_markIndicator',
            style: 'height:' + rulerSize.height + 'px;width:' + rulerSize.width + 'px;position:absolute;margin-left:0;margin-top:0;z-index:5;border:1px solid #ccc;display:' + (documentEditor.layoutType === 'Pages' ? 'block;' : 'none;'),
            class: 'e-de-ruler-markIndicator'
        };
        var markIndicator = this.createHtmlElement('div', attributes);
        this.tabStopStwitch = markIndicator;
        var element = document.getElementById(documentEditor.element.id + '_viewerContainer');
        element.insertBefore(markIndicator, element.firstChild);
        var ownerId = documentEditor.element.id;
        var firstLineIndent = document.getElementById(ownerId + '_firstLineIndent').cloneNode(true);
        var hangingIndent = document.getElementById(ownerId + '_hangingIndent').cloneNode(true);
        firstLineIndent.style.left = '1px';
        firstLineIndent.style.top = rulerSize.height / 2 - 3 + 'px';
        firstLineIndent.style.display = 'none';
        firstLineIndent.classList.add('e-de-ruler-marker');
        firstLineIndent.setAttribute('id', ownerId + '_firstLineIndent_-1');
        hangingIndent.style.left = '1px';
        hangingIndent.style.top = rulerSize.height / 2 - 3 + 'px';
        hangingIndent.style.display = 'none';
        hangingIndent.classList.add('e-de-ruler-marker');
        hangingIndent.setAttribute('id', ownerId + '_hangingIndent_-1');
        markIndicator.appendChild(hangingIndent);
        markIndicator.appendChild(firstLineIndent);
        var justification = ['Left', 'Center', 'Right', 'Decimal', 'Bar'];
        var locale = new L10n('documenteditor', documentEditor.defaultLocale);
        locale.setLocale(documentEditor.locale);
        for (var i = 0; i < 5; i++) {
            this.renderTab(documentEditor, rulerSize, undefined, justification[parseInt(i.toString(), 10)], -1, locale);
            var element_1 = document.getElementById(documentEditor.element.id + '_' + justification[parseInt(i.toString(), 10)] + 'Tab_-1');
            if (!isNullOrUndefined(element_1)) {
                element_1.classList.remove('e-de-ruler-tab');
                element_1.classList.add('e-de-ruler-marker');
                element_1.style.display = i == 0 ? 'block' : 'none';
                element_1.style.position = 'absolute';
                element_1.style.margin = '4px 3px';
                markIndicator.appendChild(element_1);
            }
        }
        markIndicator.addEventListener('click', function (event) {
            var divElements = document.querySelector('.e-de-ruler-markIndicator');
            for (var i = 0; i < divElements.childNodes.length; i++) {
                var currentDiv = divElements.childNodes[parseInt(i.toString(), 10)];
                if (currentDiv.style.display === 'block') {
                    currentDiv.style.display = 'none';
                    var nextIndex = (i + 1) % divElements.childNodes.length;
                    divElements.childNodes[parseInt(nextIndex.toString(), 10)].style.display = 'block';
                    break;
                }
            }
        });
    };
    /**
     * renderRuler method \
     *
     * @returns {void} renderRuler method .\
     * @param { DocumentEditor} documentEditor - provide the content  value.
     * @param { boolean} isHorizontal - provide the content  value.
     * @private
     */
    RulerHelper.prototype.renderRuler = function (documentEditor, isHorizontal) {
        var _this = this;
        if (!documentEditor.enableSelection) {
            return;
        }
        var div = document.getElementById(documentEditor.element.id + (isHorizontal ? '_hRuler' : '_vRuler'));
        var rulerSize = this.getRulerSize(documentEditor);
        var rulerGeometry = this.getRulerGeometry(documentEditor);
        var height = isHorizontal ? documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.x
            : (documentEditor.selection.getPageTop(documentEditor.selection.end.paragraph.bodyWidget.page));
        var margin = isHorizontal ? ('margin-left:' + height + 'px;') : ('margin-top:' + height + 'px;');
        if (documentEditor.selection.isForward) {
            this.position = documentEditor.selection.start;
        }
        else {
            this.position = documentEditor.selection.end;
        }
        // const margin: string = isHorizontal ? ('margin-left:' + (pixelsToPoints(documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.x)) + 'px;') : ('margin-top:' + rulerSize.height + 'px;');
        if (!div) {
            var style_1 = 'height:' + (isHorizontal ? rulerSize.height : rulerGeometry.height) + 'px;overflow:hidden;width:' +
                (isHorizontal ? rulerGeometry.width : rulerSize.width) + 'px;position:absolute;font-size:9px;text-align: left;z-index: 4;user-select:none;' + margin;
            var attributes_1 = {
                'id': documentEditor.element.id + (isHorizontal ? '_hRuler' : '_vRuler'),
                style: style_1, class: (isHorizontal ? 'e-de-hRuler' : 'e-de-vRuler')
            };
            div = this.createHtmlElement('div', attributes_1);
        }
        div.addEventListener('dblclick', function () {
            documentEditor.showDialog('PageSetup');
        });
        var pageElement = document.getElementById(documentEditor.element.id + '_pageContainer');
        var style = 'height:' + (isHorizontal ? rulerSize.height : pageElement.getBoundingClientRect().height) + 'px;overflow:hidden;width:' +
            (isHorizontal ? pageElement.getBoundingClientRect().width : rulerSize.width) + 'px;position:absolute;z-index: 3;';
        var attributes = {
            'id': documentEditor.element.id + (isHorizontal ? '_hRulerBottom' : '_vRulerBottom'),
            style: style, class: (isHorizontal ? 'e-de-hRuler' : 'e-de-vRuler')
        };
        var overlap = this.createHtmlElement('div', attributes);
        isHorizontal ? (this.hRulerBottom = overlap) : (this.vRulerBottom = overlap);
        var parentElement = document.getElementById(documentEditor.element.id + '_viewerContainer');
        parentElement.insertBefore(overlap, parentElement.firstChild);
        var element = isHorizontal ? document.getElementById(documentEditor.element.id + '_hRulerBottom') : document.getElementById(documentEditor.element.id + '_vRulerBottom');
        element.insertBefore(div, element.firstChild);
        this.renderRulerMargins(documentEditor, isHorizontal, div);
        //const documentEditorRuler: DocumentEditorRulerModel = isHorizontal ? documentEditor.documentEditorSettings.rulerSettings.horizontalRuler : documentEditor.documentEditorSettings.rulerSettings.verticalRuler;
        var ruler = new Ruler(div, this);
        ruler.orientation = isHorizontal ? 'Horizontal' : 'Vertical';
        this.updateMargin(ruler, documentEditor, isHorizontal);
        // ruler.pageWidth = documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.width;
        // ruler.pageHeight = documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.height;
        // ruler.length = (isHorizontal ? rulerGeometry.width : rulerGeometry.height) + documentEditorRuler.segmentWidth;
        ruler.length = ruler.zeroPosition * 2;
        ruler.appendTo();
        // eslint-disable-next-line
        isHorizontal ? documentEditor.hRuler = ruler : documentEditor.vRuler = ruler;
        this.updateRulerPosition(documentEditor, isHorizontal);
        var rulerObj = document.getElementById(documentEditor.element.id + (isHorizontal ? '_hRuler' : '_vRuler'));
        // eslint-disable-next-line
        isHorizontal ? documentEditor.hRuler.element = rulerObj : documentEditor.vRuler.element = rulerObj;
        if (rulerObj) {
            // Set the scrollLeft property to the desired value (e.g., 100 pixels)
            if (isHorizontal) {
                rulerObj.scrollLeft = ruler.zeroPosition -
                    HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin);
            }
            else {
                rulerObj.scrollTop = ruler.zeroPosition -
                    HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.topMargin);
            }
        }
        this.locale = new L10n('documenteditor', documentEditor.defaultLocale);
        if (isHorizontal) {
            this.renderIndents(documentEditor, isHorizontal, rulerSize, rulerGeometry, this.locale);
        }
        var resizerEnabled = false;
        var isDragging = false;
        var isLeftRulerMargin = undefined;
        var isLeftMultiColumn = false;
        var isRightMultiColumn = false;
        var multiColumnElement;
        var hRuler = document.getElementById(documentEditor.element.id + '_hRuler');
        var columnInitialValue;
        var initialValue;
        var currentScrollLeft;
        var initialRightMargin;
        var finalmouseXRelativeToDiv;
        if (isHorizontal) {
            document.addEventListener('mousemove', function (e) {
                if (documentEditor.isDestroyed || !documentEditor.documentEditorSettings.showRuler) {
                    return;
                }
                var divRect = hRuler.getBoundingClientRect();
                var leftMargin = documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin * documentEditor.zoomFactor;
                var rightMargin = (HelperMethods.convertPixelToPoint(divRect.width) - documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin * documentEditor.zoomFactor);
                var pixelValue = Math.round(e.clientX - divRect.left);
                var mouseXRelativeToDiv = HelperMethods.convertPixelToPoint(pixelValue);
                if (!isDragging) {
                    if (documentEditor.isOnIndent) {
                        hRuler.style.cursor = 'default';
                        if (hRuler.hasAttribute('title')) {
                            hRuler.removeAttribute('title');
                        }
                        resizerEnabled = false;
                    }
                    else if (((leftMargin - 3) <= mouseXRelativeToDiv) && ((leftMargin + 3) >= mouseXRelativeToDiv)) {
                        if (documentEditor.layoutType === 'Pages') {
                            hRuler.style.cursor = 'e-resize';
                            hRuler.setAttribute('title', _this.locale.getConstant('Left Margin'));
                            resizerEnabled = true;
                            isLeftRulerMargin = true;
                        }
                    }
                    else if ((((rightMargin - 3) <= mouseXRelativeToDiv) && ((rightMargin + 3) >= mouseXRelativeToDiv))) {
                        if (documentEditor.layoutType === 'Pages') {
                            hRuler.style.cursor = 'e-resize';
                            hRuler.setAttribute('title', _this.locale.getConstant('Right Margin'));
                            resizerEnabled = true;
                            isLeftRulerMargin = false;
                        }
                    }
                    else if (documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.columns.length > 0) {
                        var columns = documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.columns;
                        if (documentEditor.layoutType === 'Pages') {
                            for (var i = 1; i <= columns.length; i++) {
                                var rulerMarginDiv = document.getElementById(documentEditor.element.id + '_hRuler_Margin' + i);
                                var maginLeft = rulerMarginDiv.getBoundingClientRect().left;
                                var width = rulerMarginDiv.getBoundingClientRect().width;
                                if (((maginLeft - 3) <= e.clientX) && ((maginLeft + 3) >= e.clientX)) {
                                    hRuler.style.cursor = "e-resize";
                                    multiColumnElement = rulerMarginDiv;
                                    hRuler.setAttribute('title', _this.locale.getConstant('Left Margin'));
                                    isLeftMultiColumn = true;
                                    resizerEnabled = true;
                                    break;
                                }
                                else if (((maginLeft + width - 3) <= e.clientX) && ((maginLeft + width + 3) >= e.clientX)) {
                                    hRuler.style.cursor = "e-resize";
                                    multiColumnElement = rulerMarginDiv;
                                    hRuler.setAttribute('title', _this.locale.getConstant('Right Margin'));
                                    isRightMultiColumn = true;
                                    resizerEnabled = true;
                                    break;
                                }
                                else {
                                    hRuler.style.cursor = "default";
                                    if (hRuler.hasAttribute('title')) {
                                        hRuler.removeAttribute('title');
                                    }
                                    isLeftMultiColumn = false;
                                    isRightMultiColumn = false;
                                    resizerEnabled = false;
                                }
                            }
                        }
                    }
                    else {
                        hRuler.style.cursor = 'default';
                        if (hRuler.hasAttribute('title')) {
                            hRuler.removeAttribute('title');
                        }
                        resizerEnabled = false;
                    }
                }
                if (isDragging) {
                    var rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin) * documentEditor.zoomFactor;
                    var pageWidth = documentEditor.selection.sectionFormat.pageWidth;
                    var rightMarginValue = documentEditor.selection.sectionFormat.rightMargin;
                    var rightIndentValue = documentEditor.selection.paragraphFormat.rightIndent;
                    rightIndentValue = rightIndentValue > 0 ? rightIndentValue : 0;
                    var minimumValue = 42;
                    var firstLineIndent = documentEditor.selection.paragraphFormat.firstLineIndent;
                    var leftMarginValue = documentEditor.selection.sectionFormat.leftMargin;
                    firstLineIndent = firstLineIndent >= 0 ? firstLineIndent : 0;
                    var leftIndent = documentEditor.selection.paragraphFormat.leftIndent;
                    if (isLeftRulerMargin) {
                        var leftMaxLimit = rulerZeroPoint + (HelperMethods.convertPointToPixel(pageWidth - rightMarginValue - rightIndentValue - minimumValue - firstLineIndent - leftIndent) * documentEditor.zoomFactor);
                        var leftMinLimit = rulerZeroPoint;
                        if (pixelValue + rulerZeroPoint > leftMaxLimit) {
                            pixelValue = leftMaxLimit - rulerZeroPoint;
                            mouseXRelativeToDiv = HelperMethods.convertPixelToPoint(pixelValue);
                        }
                        else if (pixelValue + rulerZeroPoint < leftMinLimit) {
                            pixelValue = leftMinLimit - rulerZeroPoint;
                            mouseXRelativeToDiv = HelperMethods.convertPixelToPoint(pixelValue);
                        }
                    }
                    else {
                        var rightMinLimit = rulerZeroPoint + (HelperMethods.convertPointToPixel(leftMarginValue + leftIndent + firstLineIndent + minimumValue + rightIndentValue) * documentEditor.zoomFactor);
                        var rightMaxLimit = rulerZeroPoint + (HelperMethods.convertPointToPixel(pageWidth) * documentEditor.zoomFactor);
                        if (pixelValue + rulerZeroPoint > rightMaxLimit) {
                            pixelValue = rightMaxLimit - rulerZeroPoint;
                            mouseXRelativeToDiv = HelperMethods.convertPixelToPoint(pixelValue);
                        }
                        else if (pixelValue + rulerZeroPoint < rightMinLimit) {
                            pixelValue = rightMinLimit - rulerZeroPoint;
                            mouseXRelativeToDiv = HelperMethods.convertPixelToPoint(pixelValue);
                        }
                    }
                    finalmouseXRelativeToDiv = mouseXRelativeToDiv;
                    var currentRightMargin = (HelperMethods.convertPixelToPoint(divRect.width) - (documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin * documentEditor.zoomFactor));
                    if (documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.numberOfColumns <= 1) {
                        _this.resizeRulerMargins(isLeftRulerMargin, initialValue, currentScrollLeft, currentRightMargin, hRuler, mouseXRelativeToDiv, true, documentEditor);
                    }
                    var rightIndent = document.getElementById(documentEditor.element.id + '_rightIndent');
                    if (isLeftRulerMargin) {
                        var difference = mouseXRelativeToDiv - initialValue;
                        rightIndent.style.left = (initialRightMargin - HelperMethods.convertPointToPixel(difference)) + 'px';
                    }
                    else {
                        var difference = mouseXRelativeToDiv - initialValue;
                        rightIndent.style.left = (initialRightMargin + HelperMethods.convertPointToPixel(difference)) + 'px';
                    }
                    var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                    var indicatorLineValue = startValue + pixelValue;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.left = indicatorLineValue + 'px';
                }
            });
            var mouseDownTabValue_1;
            var mouseUpTabValue_1;
            hRuler.addEventListener("mouseenter", function (e) {
                if (!isNullOrUndefined(_this.currentTabStopElement)) {
                    _this.currentTabStopElement.style.display = 'block';
                }
            });
            hRuler.addEventListener("mouseleave", function (e) {
                if (!isNullOrUndefined(_this.currentTabStopElement)) {
                    _this.currentTabStopElement.style.display = 'none';
                    //this.currentTabStopElement = undefined;
                }
            });
            hRuler.addEventListener("mousedown", function (e) {
                if (resizerEnabled && !documentEditor.isTableMarkerDragging) {
                    isDragging = true;
                    if (documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.columns.length > 0) {
                        if (isLeftMultiColumn) {
                            columnInitialValue = multiColumnElement.getBoundingClientRect().left;
                        }
                        else if (isRightMultiColumn) {
                            columnInitialValue = multiColumnElement.getBoundingClientRect().left + multiColumnElement.getBoundingClientRect().width;
                        }
                    }
                    var divRect_1 = hRuler.getBoundingClientRect();
                    initialValue = HelperMethods.convertPixelToPoint(Math.round(e.clientX - divRect_1.left));
                    currentScrollLeft = hRuler.scrollLeft;
                    var rightIndent = document.getElementById(documentEditor.element.id + '_rightIndent');
                    initialRightMargin = HelperMethods.getNumberFromString(rightIndent.style.left);
                    var pixelValue = Math.round(e.clientX - divRect_1.left);
                    var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                    var indicatorLineValue = startValue + pixelValue;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.left = indicatorLineValue + 'px';
                    lineSvg.style.display = 'block';
                }
                var divRect = hRuler.getBoundingClientRect();
                if (divRect.y + (divRect.height / 2) <= e.clientY) {
                    mouseDownTabValue_1 = e.clientX - hRuler.getBoundingClientRect().left;
                    if (documentEditor.layoutType === 'Pages') {
                        mouseDownTabValue_1 = HelperMethods.convertPixelToPoint(mouseDownTabValue_1 - HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin) * documentEditor.zoomFactor);
                        if (_this.position.paragraph.paragraphFormat.bidi) {
                            var paraWidth = !isNullOrUndefined(_this.position.paragraph['absoluteXPosition']) ? parseFloat(_this.position.paragraph['absoluteXPosition']['width'].toString()) : _this.position.paragraph.width;
                            paraWidth = HelperMethods.convertPixelToPoint(paraWidth * documentEditor.zoomFactor);
                            mouseDownTabValue_1 = paraWidth - mouseDownTabValue_1;
                        }
                    }
                    else if (documentEditor.layoutType === 'Continuous') {
                        if (_this.position.paragraph.paragraphFormat.bidi) {
                            mouseDownTabValue_1 = HelperMethods.convertPixelToPoint((mouseDownTabValue_1) - 20);
                            var paraWidth = !isNullOrUndefined(_this.position.paragraph['absoluteXPosition']) ? parseFloat(_this.position.paragraph['absoluteXPosition']['width'].toString()) : _this.position.paragraph.width;
                            paraWidth = HelperMethods.convertPixelToPoint(paraWidth * documentEditor.zoomFactor);
                            mouseDownTabValue_1 = paraWidth - mouseDownTabValue_1;
                        }
                        else {
                            mouseDownTabValue_1 = HelperMethods.convertPixelToPoint((mouseDownTabValue_1) - 20);
                        }
                    }
                }
            });
            hRuler.addEventListener("mouseup", function (e) {
                var container = document.getElementById(documentEditor.element.id + '_markIndicator');
                var divRect = hRuler.getBoundingClientRect();
                if (divRect.y + (divRect.height / 2) <= e.clientY) {
                    mouseUpTabValue_1 = e.clientX - hRuler.getBoundingClientRect().left;
                    if (documentEditor.layoutType === 'Pages') {
                        mouseUpTabValue_1 = HelperMethods.convertPixelToPoint(mouseUpTabValue_1 - HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin) * documentEditor.zoomFactor);
                        if (_this.position.paragraph.paragraphFormat.bidi) {
                            var paraWidth = !isNullOrUndefined(_this.position.paragraph['absoluteXPosition']) ? parseFloat(_this.position.paragraph['absoluteXPosition']['width'].toString()) : _this.position.paragraph.width;
                            paraWidth = HelperMethods.convertPixelToPoint(paraWidth * documentEditor.zoomFactor);
                            mouseUpTabValue_1 = paraWidth - mouseUpTabValue_1;
                        }
                    }
                    else if (documentEditor.layoutType === 'Continuous') {
                        if (_this.position.paragraph.paragraphFormat.bidi) {
                            mouseUpTabValue_1 = HelperMethods.convertPixelToPoint((mouseUpTabValue_1) - 20);
                            var paraWidth = !isNullOrUndefined(_this.position.paragraph['absoluteXPosition']) ? parseFloat(_this.position.paragraph['absoluteXPosition']['width'].toString()) : _this.position.paragraph.width;
                            paraWidth = HelperMethods.convertPixelToPoint(paraWidth * documentEditor.zoomFactor);
                            mouseUpTabValue_1 = paraWidth - mouseUpTabValue_1;
                        }
                        else {
                            mouseUpTabValue_1 = HelperMethods.convertPixelToPoint((mouseUpTabValue_1) - 20);
                        }
                    }
                    var rightIndent = document.getElementById(documentEditor.element.id + '_rightIndent');
                    var rightIndentValue = HelperMethods.getNumberFromString(rightIndent.style.left);
                    var maxValue = rightIndentValue;
                    if (mouseUpTabValue_1 > 0 && mouseUpTabValue_1 < maxValue && mouseDownTabValue_1 == mouseUpTabValue_1) {
                        if (!isNullOrUndefined(container)) {
                            var visibleElement = container.querySelector('.e-de-ruler-marker[style*="display: block;"]');
                            if (!isNullOrUndefined(visibleElement)) {
                                mouseUpTabValue_1 /= documentEditor.zoomFactor;
                                var dataNameValue = visibleElement.getAttribute('data-name');
                                if (dataNameValue == 'LeftTab' || dataNameValue == 'CenterTab' || dataNameValue == 'RightTab' || dataNameValue == 'DecimalTab' || dataNameValue == 'BarTab') {
                                    var tabStop = new WTabStop();
                                    tabStop.position = mouseUpTabValue_1;
                                    tabStop.tabJustification = _this.getTabJustification(dataNameValue);
                                    tabStop.deletePosition = 0;
                                    tabStop.tabLeader = 'None';
                                    documentEditor.editor.onApplyParagraphFormat('tabStop', [tabStop], false, false);
                                }
                                else if (dataNameValue == 'FirstLineIndent' || dataNameValue == 'HangingIndent') {
                                    var property = 'firstLineIndent';
                                    if (dataNameValue == 'HangingIndent') {
                                        var initialValue = documentEditor.selection.paragraphFormat.firstLineIndent;
                                        var differenceValue = mouseUpTabValue_1 + initialValue;
                                        var currentValue = documentEditor.selection.start.paragraph.paragraphFormat.firstLineIndent;
                                        documentEditor.editor.onApplyParagraphFormat('firstLineIndent', currentValue - differenceValue, false, false);
                                        var leftIndentCurrentValue = documentEditor.selection.start.paragraph.paragraphFormat.leftIndent + currentValue;
                                        currentValue = currentValue - differenceValue;
                                        documentEditor.editor.onApplyParagraphFormat('leftIndent', leftIndentCurrentValue - currentValue, false, false, true);
                                    }
                                    else {
                                        documentEditor.editor.onApplyParagraphFormat(property, mouseDownTabValue_1, false, false);
                                    }
                                }
                            }
                        }
                    }
                }
            });
            document.addEventListener("mouseup", function (e) {
                if (isDragging && !documentEditor.isTableMarkerDragging) {
                    var divRect = hRuler.getBoundingClientRect();
                    var mouseXRelativeToDiv = finalmouseXRelativeToDiv; // HelperMethods.convertPixelToPoint(Math.round(e.clientX - divRect.left));
                    // const currentLeftMargin = documentEditor.hRuler.startMargin * documentEditor.zoomFactor;
                    // const currentScrollLeft = hRuler.scrollLeft;
                    // const currentRightMargin = (HelperMethods.convertPixelToPoint(divRect.width) - (documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin * documentEditor.zoomFactor));
                    // resizeRulerMargins(isLeftRulerMargin, currentLeftMargin, currentScrollLeft, currentRightMargin, hRuler, mouseXRelativeToDiv, true, documentEditor);
                    // if (hRuler) {
                    //     rulerObj.scrollLeft = rulerObj.scrollLeft - HelperMethods.convertPointToPixel((documentEditor.hRuler.leftMargin < mouseXRelativeToDiv) ? (mouseXRelativeToDiv - documentEditor.hRuler.leftMargin) : (documentEditor.hRuler.leftMargin - mouseXRelativeToDiv));
                    // }
                    // updateRuler(documentEditor, documentEditor.hRuler, true);
                    if (isLeftMultiColumn || isRightMultiColumn) {
                        var finalvalue = 0;
                        finalvalue = e.clientX - columnInitialValue;
                        var secFormat = documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.cloneFormat();
                        var pageWidth = documentEditor.selection.sectionFormat.pageWidth - documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin - documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin;
                        var columnSpace = isLeftMultiColumn ? (secFormat.columns[0].space + ((HelperMethods.convertPixelToPoint(finalvalue)))) : (secFormat.columns[0].space - ((HelperMethods.convertPixelToPoint(finalvalue))));
                        for (var i = 0; i < secFormat.columns.length; i++) {
                            var col = secFormat.columns[parseInt(i.toString(), 10)];
                            if (columnSpace >= 0 && col.width >= 36) {
                                var widthCal = HelperMethods.convertPointToPixel((pageWidth - (HelperMethods.convertPixelToPoint(columnSpace) * (secFormat.numberOfColumns - 1))) / (secFormat.numberOfColumns));
                                col.width = widthCal;
                                if (i < secFormat.columns.length - 1) {
                                    col.space = columnSpace;
                                }
                            }
                            else {
                                col[0].space = col[1].space;
                            }
                        }
                        documentEditor.editorModule.onApplySectionFormat(undefined, secFormat);
                        isLeftMultiColumn = false;
                        isRightMultiColumn = false;
                    }
                    else if (isLeftRulerMargin) {
                        documentEditor.hRuler.startMargin = (mouseXRelativeToDiv / documentEditor.zoomFactor);
                        documentEditor.selection.sectionFormat.leftMargin = mouseXRelativeToDiv / documentEditor.zoomFactor;
                    }
                    else {
                        var rightMargin = HelperMethods.convertPixelToPoint(rulerGeometry.width) - (mouseXRelativeToDiv / documentEditor.zoomFactor);
                        // documentEditor.hRuler.endMargin = rightMargin;
                        documentEditor.selection.sectionFormat.rightMargin = rightMargin;
                    }
                    resizerEnabled = false;
                    isDragging = false;
                    isLeftRulerMargin = undefined;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.display = 'none';
                }
            });
        }
        //Vertical Ruler Resizing
        var vRuler = document.getElementById(documentEditor.element.id + '_vRuler');
        var isTopRulerMargin = false;
        var initialYValue;
        var currentScrollTop;
        if (!isHorizontal) {
            document.addEventListener("mousemove", function (e) {
                if (documentEditor.isDestroyed || !documentEditor.documentEditorSettings.showRuler) {
                    return;
                }
                var divRect = vRuler.getBoundingClientRect();
                var topMargin = documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.topMargin * documentEditor.zoomFactor;
                var bottomMargin = (HelperMethods.convertPixelToPoint(divRect.height) - documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.bottomMargin * documentEditor.zoomFactor);
                var mouseXRelativeToDiv = HelperMethods.convertPixelToPoint(Math.round(e.clientY - divRect.top));
                var pixelValue = Math.round(e.clientY - divRect.top);
                if (!isDragging) {
                    if (((topMargin - 3) <= mouseXRelativeToDiv) && ((topMargin + 3) >= mouseXRelativeToDiv)) {
                        vRuler.style.cursor = "n-resize";
                        vRuler.setAttribute('title', _this.locale.getConstant('Top Margin'));
                        resizerEnabled = true;
                        isTopRulerMargin = true;
                    }
                    else if ((((bottomMargin - 3) <= mouseXRelativeToDiv) && ((bottomMargin + 3) >= mouseXRelativeToDiv))) {
                        vRuler.style.cursor = "n-resize";
                        vRuler.setAttribute('title', _this.locale.getConstant('Bottom Margin'));
                        resizerEnabled = true;
                        isTopRulerMargin = false;
                    }
                    else {
                        vRuler.style.cursor = "default";
                        if (vRuler.hasAttribute('title')) {
                            vRuler.removeAttribute('title');
                        }
                        resizerEnabled = false;
                    }
                }
                if (isDragging) {
                    var mouseXRelativeToDiv_1 = HelperMethods.convertPixelToPoint(Math.round(e.clientY - divRect.top));
                    var rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.topMargin) * documentEditor.zoomFactor;
                    var pageHeight = documentEditor.selection.sectionFormat.pageHeight;
                    var minimumValue = 12;
                    var bottomMarginValue = documentEditor.selection.sectionFormat.bottomMargin;
                    var topMarginValue = documentEditor.selection.sectionFormat.topMargin;
                    if (isTopRulerMargin) {
                        var topMinLimit = rulerZeroPoint;
                        var topMaxLimit = rulerZeroPoint + (HelperMethods.convertPointToPixel(pageHeight - bottomMarginValue - minimumValue) * documentEditor.zoomFactor);
                        if (pixelValue + rulerZeroPoint > topMaxLimit) {
                            pixelValue = topMaxLimit - rulerZeroPoint;
                            mouseXRelativeToDiv_1 = HelperMethods.convertPixelToPoint(pixelValue);
                        }
                        else if (pixelValue + rulerZeroPoint < topMinLimit) {
                            pixelValue = topMinLimit - rulerZeroPoint;
                            mouseXRelativeToDiv_1 = HelperMethods.convertPixelToPoint(pixelValue);
                        }
                    }
                    else {
                        var bottomMinLimit = rulerZeroPoint + (HelperMethods.convertPointToPixel(topMarginValue + minimumValue) * documentEditor.zoomFactor);
                        var bottomMaxLimit = rulerZeroPoint + (HelperMethods.convertPointToPixel(pageHeight) * documentEditor.zoomFactor);
                        if (pixelValue + rulerZeroPoint > bottomMaxLimit) {
                            pixelValue = bottomMaxLimit - rulerZeroPoint;
                            mouseXRelativeToDiv_1 = HelperMethods.convertPixelToPoint(pixelValue);
                        }
                        else if (pixelValue + rulerZeroPoint < bottomMinLimit) {
                            pixelValue = bottomMinLimit - rulerZeroPoint;
                            mouseXRelativeToDiv_1 = HelperMethods.convertPixelToPoint(pixelValue);
                        }
                    }
                    var currentBottomMargin = (HelperMethods.convertPixelToPoint(divRect.height) - (documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.bottomMargin * documentEditor.zoomFactor));
                    _this.resizeVRulerMargins(isTopRulerMargin, initialYValue, currentScrollTop, currentBottomMargin, vRuler, mouseXRelativeToDiv_1, documentEditor);
                    var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.y * documentEditor.zoomFactor;
                    var indicatorLineValue = startValue + pixelValue; // + 15;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_vRuler_indicator_svg');
                    lineSvg.style.top = indicatorLineValue + 'px';
                }
            });
            vRuler.addEventListener("mousedown", function (e) {
                if (resizerEnabled) {
                    isDragging = true;
                    var divRect = vRuler.getBoundingClientRect();
                    initialYValue = HelperMethods.convertPixelToPoint(Math.round(e.clientY - divRect.top));
                    currentScrollTop = vRuler.scrollTop;
                    var pixelValue = Math.round(e.clientY - divRect.top);
                    var lineSvg = document.getElementById(documentEditor.element.id + '_vRuler_indicator_svg');
                    var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.y * documentEditor.zoomFactor;
                    var indicatorLineValue = (startValue + pixelValue); // + 15;
                    lineSvg.style.top = indicatorLineValue + 'px';
                    lineSvg.style.display = 'block';
                }
            });
            document.addEventListener("mouseup", function (e) {
                if (isDragging) {
                    var divRect = vRuler.getBoundingClientRect();
                    var mouseXRelativeToDiv = HelperMethods.convertPixelToPoint(Math.round(e.clientY - divRect.top));
                    // const currentTopMargin = documentEditor.hRuler.startMargin * documentEditor.zoomFactor;
                    // const currentScrollTop = vRuler.scrollTop;
                    // const currentBottomMargin = (HelperMethods.convertPixelToPoint(divRect.height) - (documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.bottomMargin * documentEditor.zoomFactor));
                    // resizeVRulerMargins(isTopRulerMargin, currentTopMargin, currentScrollTop, currentBottomMargin, vRuler, mouseXRelativeToDiv, documentEditor);
                    // if (hRuler) {
                    //     rulerObj.scrollLeft = rulerObj.scrollLeft - HelperMethods.convertPointToPixel((documentEditor.hRuler.leftMargin < mouseXRelativeToDiv) ? (mouseXRelativeToDiv - documentEditor.hRuler.leftMargin) : (documentEditor.hRuler.leftMargin - mouseXRelativeToDiv));
                    // }
                    // updateRuler(documentEditor, documentEditor.hRuler, true);
                    if (isTopRulerMargin) {
                        documentEditor.vRuler.startMargin = (mouseXRelativeToDiv / documentEditor.zoomFactor);
                        documentEditor.selection.sectionFormat.topMargin = mouseXRelativeToDiv / documentEditor.zoomFactor;
                    }
                    else {
                        var bottomtMargin = HelperMethods.convertPixelToPoint(rulerGeometry.height) - (mouseXRelativeToDiv / documentEditor.zoomFactor);
                        documentEditor.vRuler.endMargin = bottomtMargin;
                        documentEditor.selection.sectionFormat.bottomMargin = bottomtMargin;
                    }
                    resizerEnabled = false;
                    isDragging = false;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_vRuler_indicator_svg');
                    lineSvg.style.display = 'none';
                    isTopRulerMargin = undefined;
                }
            });
        }
    };
    RulerHelper.prototype.updateRulerPosition = function (documentEditor, isHorizontal) {
        var rulerObj = document.getElementById(documentEditor.element.id + (isHorizontal ? '_hRuler' : '_vRuler'));
        // eslint-disable-next-line
        isHorizontal ? documentEditor.hRuler.element = rulerObj : documentEditor.vRuler.element = rulerObj;
        if (rulerObj) {
            // Set the scrollLeft property to the desired value (e.g., 100 pixels)
            rulerObj.scrollLeft = 2112 - HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin);
        }
    };
    RulerHelper.prototype.updateIndicatorLines = function (documentEditor) {
        var hRulerSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
        var hRulerLine = document.getElementById(documentEditor.element.id + '_hRuler_indicator');
        var vRulerSvg = document.getElementById(documentEditor.element.id + '_vRuler_indicator_svg');
        var vRulerLine = document.getElementById(documentEditor.element.id + '_vRuler_indicator');
        var pageContainer = document.getElementById(documentEditor.element.id + '_pageContainer');
        var pageData = pageContainer.getBoundingClientRect();
        var pageHeight = pageData.height;
        var pageWidth = pageData.width;
        hRulerSvg.style.height = pageHeight + 'px';
        hRulerLine.setAttribute('y2', "" + pageHeight);
        vRulerSvg.style.width = pageWidth + 'px';
        vRulerLine.setAttribute('x2', "" + pageWidth);
    };
    RulerHelper.prototype.createIndicatorLines = function (documentEditor) {
        if (!documentEditor.enableSelection) {
            return;
        }
        var viewerContainer = document.getElementById(documentEditor.element.id + '_viewerContainer');
        var pageContainer = document.getElementById(documentEditor.element.id + '_pageContainer');
        // let container = document.getElementById(documentEditor.element.id);
        var data = viewerContainer.getBoundingClientRect();
        var pageData = pageContainer.getBoundingClientRect();
        var pageHeight = pageData.height;
        var pageWidth = pageData.width;
        var hRuler = document.getElementById(documentEditor.element.id + '_hRuler');
        var hSvgAttr = {
            id: documentEditor.element.id + '_hRuler_indicator_svg',
            width: 0.5 + 'px',
            height: pageHeight + 'px',
            style: 'position:absolute;z-index:1;display:none;'
        };
        var hSvg = this.createSvgElement('svg', hSvgAttr);
        var verticalLineAttr = { 'x1': 0, 'y1': hRuler.getBoundingClientRect().height + 5, 'x2': 0, 'y2': pageHeight, 'stroke-width': 0.5, 'stroke': 'black' };
        var vLine = this.createSvgElement('line', verticalLineAttr);
        vLine.setAttribute('id', documentEditor.element.id + '_hRuler_indicator');
        hSvg.appendChild(vLine);
        viewerContainer.insertBefore(hSvg, viewerContainer.firstChild);
        var vRuler = document.getElementById(documentEditor.element.id + '_vRuler');
        var vSvgAttr = {
            id: documentEditor.element.id + '_vRuler_indicator_svg',
            width: pageWidth + 'px',
            height: 0.5 + 'px',
            style: 'position:absolute;z-index:1;display:none;'
        };
        var vSvg = this.createSvgElement('svg', vSvgAttr);
        var horizontalLineAttr = { 'x1': vRuler.getBoundingClientRect().width + 5, 'y1': 0, 'x2': pageWidth, 'y2': 0, 'stroke-width': 0.5, 'stroke': 'black' };
        var hLine = this.createSvgElement('line', horizontalLineAttr);
        hLine.setAttribute('id', documentEditor.element.id + '_vRuler_indicator');
        vSvg.appendChild(hLine);
        viewerContainer.insertBefore(vSvg, viewerContainer.firstChild);
    };
    RulerHelper.prototype.updateIndentMarkers = function (documentEditor) {
        if (isNullOrUndefined(documentEditor) || isNullOrUndefined(documentEditor.element) || isNullOrUndefined(documentEditor.element.id) || isNullOrUndefined(documentEditor.hRuler) || isNullOrUndefined(documentEditor.hRuler.zeroPosition)) {
            return;
        }
        var indent = undefined;
        var ownerId = documentEditor.element.id;
        var rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin);
        var currentIndentValue;
        var finalValue;
        var currentMargin;
        var pixelValue;
        // if (documentEditor.selection.end.paragraph.isInsideTable) {
        //     currentIndentValue = documentEditor.selection.paragraphFormat.leftIndent;
        //     currentMargin = documentEditor.selection.sectionFormat.leftMargin;
        //     finalValue = HelperMethods.convertPointToPixel(currentIndentValue) + currentCell.x;
        //     pixelValue = (((rulerZeroPoint + ((finalValue))) * documentEditor.zoomFactor)) + 'px';
        //     indent = document.getElementById(ownerId + '_leftIndent');
        //     if (!isNullOrUndefined(indent)) {
        //         indent.style.left = pixelValue;
        //     }
        //     indent = document.getElementById(ownerId + '_hangingIndent');
        //     if (!isNullOrUndefined(indent)) {
        //         indent.style.left = pixelValue;
        //     }
        //     indent = document.getElementById(ownerId + '_firstLineIndent');
        //     currentIndentValue = documentEditor.selection.paragraphFormat.firstLineIndent;
        //     currentMargin = documentEditor.selection.paragraphFormat.leftIndent;
        //     finalValue = HelperMethods.convertPointToPixel(currentIndentValue + currentMargin) + currentCell.x;
        //     pixelValue = (((rulerZeroPoint + ((finalValue))) * documentEditor.zoomFactor)) + 'px';
        //     if (!isNullOrUndefined(indent)) {
        //         indent.style.left = pixelValue;
        //     }
        //     indent = document.getElementById(ownerId + '_rightIndent');
        //     currentIndentValue = documentEditor.selection.paragraphFormat.rightIndent;
        //     currentMargin = documentEditor.selection.sectionFormat.rightMargin;
        //     finalValue = (currentCell.x + currentCell.width) - HelperMethods.convertPointToPixel(currentIndentValue);
        //     pixelValue = ((rulerZeroPoint + finalValue - 2) * documentEditor.zoomFactor) + 'px';
        //     if (!isNullOrUndefined(indent)) {
        //         indent.style.left = pixelValue;
        //     }
        // }
        // else {
        //     indent = document.getElementById(ownerId + '_leftIndent');
        //     currentIndentValue = documentEditor.selection.paragraphFormat.leftIndent;
        //     currentMargin = documentEditor.selection.sectionFormat.leftMargin;
        //     finalValue = currentMargin + currentIndentValue;
        //     pixelValue = (((rulerZeroPoint + (HelperMethods.convertPointToPixel(finalValue))) * documentEditor.zoomFactor) - 6) + 'px';
        //     if (!isNullOrUndefined(indent)) {
        //         indent.style.left = pixelValue;
        //     }
        //     indent = document.getElementById(ownerId + '_hangingIndent');
        //     if (!isNullOrUndefined(indent)) {
        //         indent.style.left = pixelValue;
        //     }
        //     indent = document.getElementById(ownerId + '_firstLineIndent');
        //     currentIndentValue = documentEditor.selection.paragraphFormat.firstLineIndent;
        //     let leftIndent = documentEditor.selection.paragraphFormat.leftIndent;
        //     let leftMargin = documentEditor.selection.sectionFormat.leftMargin;
        //     if (currentIndentValue < 0 && leftIndent < 0) {
        //         currentIndentValue = currentIndentValue < 0 ? 0 : currentIndentValue;
        //     }
        //     finalValue = leftMargin + leftIndent + currentIndentValue;
        //     pixelValue = (((rulerZeroPoint + HelperMethods.convertPointToPixel(finalValue)) * documentEditor.zoomFactor) - 6) + 'px';
        //     if (!isNullOrUndefined(indent)) {
        //         indent.style.left = pixelValue;
        //     }
        //     indent = document.getElementById(ownerId + '_rightIndent');
        //     currentIndentValue = documentEditor.selection.paragraphFormat.rightIndent;
        //     currentMargin = documentEditor.selection.sectionFormat.rightMargin;
        //     finalValue = documentEditor.selection.sectionFormat.pageWidth - (currentIndentValue + currentMargin);
        //     pixelValue = (((rulerZeroPoint + HelperMethods.convertPointToPixel(finalValue)) * documentEditor.zoomFactor) - 6) + 'px';
        //     if (!isNullOrUndefined(indent)) {
        //         indent.style.left = pixelValue;
        //     }
        // }
        var rulerGeometry = this.getRulerGeometry(documentEditor);
        if (this.position.paragraph.paragraphFormat.bidi || (this.position.paragraph.isInsideTable && this.position.paragraph.associatedCell.ownerTable.tableFormat.bidi)) {
            var rulerMarginDivWidth = ((rulerGeometry.width / documentEditor.zoomFactor) - (HelperMethods.convertPointToPixel((this.position.paragraph.bodyWidget.sectionFormat.rightMargin) + (this.position.paragraph.bodyWidget.sectionFormat.leftMargin))));
            rulerZeroPoint -= rulerMarginDivWidth;
        }
        var paraStart = !isNullOrUndefined(this.position.paragraph['absoluteXPosition']) ? parseFloat(this.position.paragraph['absoluteXPosition']['x'].toString()) : this.position.paragraph.x;
        var paraWidth = !isNullOrUndefined(this.position.paragraph['absoluteXPosition']) ? parseFloat(this.position.paragraph['absoluteXPosition']['width'].toString()) : this.position.paragraph.width;
        var finalValueTemp;
        if (this.position.paragraph.paragraphFormat.bidi) {
            rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin - (documentEditor.selection.sectionFormat.pageWidth - documentEditor.selection.sectionFormat.leftMargin - documentEditor.selection.sectionFormat.rightMargin));
        }
        var leftIndent = document.getElementById(documentEditor.element.id + '_leftIndent');
        var rightIndent = document.getElementById(documentEditor.element.id + '_rightIndent');
        if (this.position.paragraph.paragraphFormat.bidi) {
            leftIndent.setAttribute('title', this.locale.getConstant('Right Indent'));
            rightIndent.setAttribute('title', this.locale.getConstant('Left Indent'));
            finalValueTemp = rulerZeroPoint + paraStart + paraWidth;
        }
        else {
            leftIndent.setAttribute('title', this.locale.getConstant('Left Indent'));
            rightIndent.setAttribute('title', this.locale.getConstant('Right Indent'));
            finalValueTemp = rulerZeroPoint + paraStart;
        }
        var firstLineIndent = this.position.paragraph.paragraphFormat.firstLineIndent;
        indent = document.getElementById(ownerId + '_leftIndent');
        if (!isNullOrUndefined(indent)) {
            if (documentEditor.layoutType === 'Pages') {
                indent.style.left = ((finalValueTemp * documentEditor.zoomFactor) - 6) + 'px';
            }
            else if (documentEditor.layoutType === 'Continuous') {
                if (this.position.paragraph.paragraphFormat.bidi) {
                    rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - documentEditor.viewer.clientArea.width;
                    finalValueTemp = rulerZeroPoint + paraStart + paraWidth;
                    indent.style.left = finalValueTemp + 'px';
                }
                else {
                    rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                    finalValueTemp = rulerZeroPoint + (paraStart * documentEditor.zoomFactor);
                    indent.style.left = finalValueTemp + 'px';
                }
            }
        }
        indent = document.getElementById(ownerId + '_hangingIndent');
        if (!isNullOrUndefined(indent)) {
            if (documentEditor.layoutType === 'Pages') {
                indent.style.left = ((finalValueTemp * documentEditor.zoomFactor) - 6) + 'px';
            }
            else if (documentEditor.layoutType === 'Continuous') {
                if (this.position.paragraph.paragraphFormat.bidi) {
                    rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - documentEditor.viewer.clientArea.width;
                    finalValueTemp = rulerZeroPoint + paraStart + paraWidth;
                    indent.style.left = finalValueTemp + 'px';
                }
                else {
                    rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                    finalValueTemp = rulerZeroPoint + (paraStart * documentEditor.zoomFactor);
                    indent.style.left = finalValueTemp + 'px';
                }
            }
        }
        indent = document.getElementById(ownerId + '_firstLineIndent');
        if (documentEditor.layoutType === 'Pages') {
            if (!isNullOrUndefined(indent)) {
                if (this.position.paragraph.paragraphFormat.bidi) {
                    indent.style.left = (((finalValueTemp - HelperMethods.convertPointToPixel(firstLineIndent)) * documentEditor.zoomFactor) - 6) + 'px';
                }
                else {
                    indent.style.left = (((finalValueTemp + HelperMethods.convertPointToPixel(firstLineIndent)) * documentEditor.zoomFactor) - 6) + 'px';
                }
            }
        }
        else if (documentEditor.layoutType === 'Continuous') {
            if (this.position.paragraph.paragraphFormat.bidi) {
                rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - documentEditor.viewer.clientArea.width;
                finalValueTemp = rulerZeroPoint + paraStart + paraWidth - (HelperMethods.convertPointToPixel(firstLineIndent) * documentEditor.zoomFactor);
            }
            else {
                rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                finalValueTemp = rulerZeroPoint + ((paraStart + HelperMethods.convertPointToPixel(firstLineIndent)) * documentEditor.zoomFactor);
            }
            indent.style.left = finalValueTemp + 'px';
        }
        indent = document.getElementById(ownerId + '_rightIndent');
        if (documentEditor.layoutType === 'Pages') {
            if (this.position.paragraph.paragraphFormat.bidi) {
                finalValueTemp = rulerZeroPoint + paraStart;
            }
            else {
                finalValueTemp = rulerZeroPoint + paraStart + paraWidth;
            }
            if (!isNullOrUndefined(indent)) {
                indent.style.left = ((finalValueTemp * documentEditor.zoomFactor) - 6) + 'px';
            }
        }
        else if (documentEditor.layoutType === 'Continuous') {
            if (this.position.paragraph.paragraphFormat.bidi) {
                rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - (documentEditor.viewer.clientArea.width * documentEditor.zoomFactor);
                finalValueTemp = rulerZeroPoint + paraStart;
                indent.style.left = finalValueTemp + 'px';
            }
            else {
                rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                finalValueTemp = rulerZeroPoint + ((paraStart + paraWidth) * documentEditor.zoomFactor);
                indent.style.left = finalValueTemp + 'px';
            }
        }
    };
    RulerHelper.prototype.updateTabStopMarkers = function (documentEditor) {
        if (isNullOrUndefined(documentEditor) || isNullOrUndefined(documentEditor.element) || isNullOrUndefined(documentEditor.element.id) || isNullOrUndefined(documentEditor.hRuler) || isNullOrUndefined(documentEditor.hRuler.zeroPosition)) {
            return;
        }
        var locale = new L10n('documenteditor', documentEditor.defaultLocale);
        locale.setLocale(documentEditor.locale);
        var ownerId = documentEditor.element.id;
        var element = document.getElementById(ownerId + '_markIndicator');
        element.style.display = documentEditor.layoutType === 'Pages' ? 'block' : 'none';
        var paragarph = this.position.paragraph;
        var tabs = paragarph.paragraphFormat.tabs;
        var zoomFactor = documentEditor.zoomFactor;
        var rulerSize = this.getRulerSize(documentEditor);
        var RenderedTabElement = HelperMethods.convertNodeListToArray(document.querySelectorAll('.e-de-ruler-tab'));
        for (var i = 0; i < tabs.length; i++) {
            var tabStop = tabs[parseInt(i.toString(), 10)];
            var justification = tabStop.tabJustification;
            // const position: number = tabStop.position;
            var id = documentEditor.element.id + '_' + justification + 'Tab_' + i.toString();
            var tabMarker = document.getElementById(id);
            if (!isNullOrUndefined(tabMarker)) {
                if (!isNullOrUndefined(RenderedTabElement) && RenderedTabElement.length > 0) {
                    RenderedTabElement.splice(RenderedTabElement.indexOf(tabMarker), 1);
                }
                var value = this.position.paragraph.paragraphFormat.bidi ?
                    (HelperMethods.convertPointToPixel(1584 - tabStop.position))
                    : (HelperMethods.convertPointToPixel(1584 + tabStop.position));
                if (justification === 'Center' || justification === 'Decimal') {
                    tabMarker.style.left = ((value * zoomFactor) - 4) + 'px';
                }
                else if (justification === 'Right') {
                    tabMarker.style.left = ((value * zoomFactor) - 5.5) + 'px';
                }
                else {
                    tabMarker.style.left = ((value * zoomFactor) - 1.5) + 'px';
                }
            }
            else {
                this.renderTab(documentEditor, rulerSize, tabStop, justification, i, locale);
            }
        }
        if (!isNullOrUndefined(RenderedTabElement)) {
            for (var i = 0; i < RenderedTabElement.length; i++) {
                var elementToRemove = RenderedTabElement[parseInt(i.toString(), 10)];
                if (!isNullOrUndefined(elementToRemove)) {
                    elementToRemove.parentNode.removeChild(elementToRemove);
                }
            }
        }
    };
    RulerHelper.prototype.renderRulerMargins = function (documentEditor, isHorizontal, rulerContainer) {
        var rulerSize = this.getRulerSize(documentEditor);
        var rulerGeometry = this.getRulerGeometry(documentEditor);
        var height = isHorizontal ? documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.x
            : (documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.y + rulerSize.height);
        // const margin: string = isHorizontal ? ('margin-left:' + height + 'px;') : ('margin-top:' + height + 'px;');
        //const leftMarginValue = 2112 - (HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin));
        var leftMarginValue = 2112 * documentEditor.zoomFactor;
        var rulerMarginDiv;
        var rulerMargin = isHorizontal ? ('margin-left:' + leftMarginValue + 'px;') : ('margin-top:' + leftMarginValue + 'px;');
        var rulerHeight = (isHorizontal ? rulerSize.height : (rulerGeometry.height - (HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.topMargin + documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.bottomMargin) * documentEditor.zoomFactor)));
        // const rulerHeight =  (isHorizontal ? rulerSize.height : rulerGeometry.height);
        if (isHorizontal) {
            for (var i = 1; i <= 13; i++) {
                rulerMarginDiv = document.getElementById(documentEditor.element.id + '_hRuler_Margin' + i);
                if (!rulerMarginDiv) {
                    var rulerstyle = 'height:' + rulerHeight + 'px;overflow:hidden;width:' +
                        (rulerGeometry.width - (HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin + documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin) * documentEditor.zoomFactor)) + 'px;position:absolute;' + 'font-size:9px;text-align: left;z-index: -1;display: block' + rulerMargin;
                    var rulerattributes = {
                        'id': documentEditor.element.id + '_hRuler_Margin' + i,
                        style: rulerstyle,
                        class: 'e-de-ruler-margin'
                    };
                    rulerMarginDiv = this.createHtmlElement('div', rulerattributes);
                }
                rulerContainer.appendChild(rulerMarginDiv);
            }
        }
        else {
            if (!rulerMarginDiv) {
                rulerMarginDiv = document.getElementById(documentEditor.element.id + '_vRuler_Margin');
                var rulerstyle = 'height:' + rulerHeight + 'px;overflow:hidden;width:' +
                    rulerSize.width + 'px;position:absolute;' + 'font-size:9px;text-align: left;z-index: -1;' + rulerMargin;
                var rulerattributes = {
                    'id': documentEditor.element.id + '_vRuler_Margin',
                    style: rulerstyle,
                    class: 'e-de-ruler-margin'
                };
                rulerMarginDiv = this.createHtmlElement('div', rulerattributes);
            }
            rulerContainer.appendChild(rulerMarginDiv);
        }
    };
    RulerHelper.prototype.updateRulerMargins = function (documentEditor) {
        var rulerGeometry = this.getRulerGeometry(documentEditor);
        var leftMarginValue = (documentEditor.hRuler.zeroPosition) * documentEditor.zoomFactor;
        this.updateHorizontalRulerMargin(documentEditor);
        var verticalRulerMarginDiv = document.getElementById(documentEditor.element.id + '_vRuler_Margin');
        var rulerMarginDivHeight = rulerGeometry.height - (HelperMethods.convertPointToPixel((documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.bottomMargin * documentEditor.zoomFactor) + (documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.topMargin * documentEditor.zoomFactor)));
        verticalRulerMarginDiv.style.marginTop = leftMarginValue + "px";
        verticalRulerMarginDiv.style.height = rulerMarginDivHeight + "px";
    };
    RulerHelper.prototype.updateHorizontalRulerMargin = function (documentEditor) {
        var columns = documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.columns;
        var leftMarginValue = (documentEditor.hRuler.zeroPosition) * documentEditor.zoomFactor;
        var skipLoop = false;
        var paraBidi = this.position.paragraph.paragraphFormat.bidi;
        var tableBidi = false;
        var currnLefttMargin = HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin - 72);
        var currentRightMargin = HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin - 72);
        if (this.position.paragraph.isInsideTable) {
            tableBidi = this.position.paragraph.associatedCell.ownerTable.tableFormat.bidi;
        }
        var rulerMarginDivWidth = (this.getRulerGeometry(documentEditor).width - (HelperMethods.convertPointToPixel((documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin * documentEditor.zoomFactor) + (documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin * documentEditor.zoomFactor))));
        if (paraBidi || tableBidi) {
            leftMarginValue = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - rulerMarginDivWidth;
        }
        for (var i = 0; i < 13; i++) {
            var horizontalRulerMarginDiv = document.getElementById(documentEditor.element.id + '_hRuler_Margin' + (i + 1));
            if (horizontalRulerMarginDiv) {
                if ((columns.length === 0 && !skipLoop) || (documentEditor.layoutType === "Continuous" && !skipLoop)) {
                    if (paraBidi || tableBidi) {
                        var startValue = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - rulerMarginDivWidth;
                        horizontalRulerMarginDiv.style.marginLeft = startValue + "px";
                    }
                    else {
                        horizontalRulerMarginDiv.style.marginLeft = leftMarginValue + "px";
                    }
                    horizontalRulerMarginDiv.style.display = 'block';
                    if (documentEditor.layoutType === 'Continuous') {
                        var paraWidth = !isNullOrUndefined(this.position.paragraph['absoluteXPosition']) ? parseFloat(this.position.paragraph['absoluteXPosition']['width'].toString()) : this.position.paragraph.width;
                        horizontalRulerMarginDiv.style.width = (paraWidth * documentEditor.zoomFactor) + "px";
                    }
                    else {
                        horizontalRulerMarginDiv.style.width = rulerMarginDivWidth + "px";
                    }
                    skipLoop = true;
                }
                else if ((columns.length >= i + 1) && documentEditor.layoutType === "Pages") {
                    if (paraBidi || tableBidi) {
                        horizontalRulerMarginDiv.style.marginLeft = leftMarginValue + 'px';
                        leftMarginValue -= ((currnLefttMargin + currentRightMargin) / (columns.length)) * documentEditor.zoomFactor;
                        leftMarginValue = leftMarginValue + (columns[parseInt(i.toString(), 10)].width + columns[parseInt(i.toString(), 10)].space) * documentEditor.zoomFactor;
                    }
                    else {
                        horizontalRulerMarginDiv.style.marginLeft = leftMarginValue + 'px';
                        leftMarginValue -= ((currnLefttMargin + currentRightMargin) / (columns.length)) * documentEditor.zoomFactor;
                        leftMarginValue = leftMarginValue + (columns[parseInt(i.toString(), 10)].width + columns[parseInt(i.toString(), 10)].space) * documentEditor.zoomFactor;
                    }
                    horizontalRulerMarginDiv.style.display = 'block';
                    horizontalRulerMarginDiv.style.width = (columns[parseInt(i.toString(), 10)].width - ((currnLefttMargin + currentRightMargin) / columns.length)) * documentEditor.zoomFactor + "px";
                }
                else {
                    horizontalRulerMarginDiv.style.display = 'none';
                }
            }
        }
    };
    RulerHelper.prototype.resizeVRulerMargins = function (isRulerTopMargin, currentTopMargin, currentScrollTop, currentBottomMargin, ruler, mousePosition, documentEditor) {
        var rulerMarginDiv = document.getElementById(documentEditor.element.id + '_vRuler_Margin');
        var rulerGeometry = this.getRulerGeometry(documentEditor);
        if (isRulerTopMargin) {
            rulerMarginDiv.style.height = (rulerGeometry.height - HelperMethods.convertPointToPixel((documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.bottomMargin * documentEditor.zoomFactor) + mousePosition)).toString() + "px";
            if (currentTopMargin < mousePosition) {
                ruler.scrollTop = currentScrollTop - HelperMethods.convertPointToPixel(mousePosition - currentTopMargin);
            }
            else {
                ruler.scrollTop = currentScrollTop + HelperMethods.convertPointToPixel(currentTopMargin - mousePosition);
            }
        }
        else {
            var bottomMargin = HelperMethods.convertPixelToPoint(rulerGeometry.height) - mousePosition;
            rulerMarginDiv.style.height = (rulerGeometry.height - HelperMethods.convertPointToPixel((documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.topMargin * documentEditor.zoomFactor) + (bottomMargin))).toString() + "px";
            if (currentBottomMargin < mousePosition) {
                //  ruler.scrollLeft = currentScrollLeft - HelperMethods.convertPointToPixel(mousePosition - currentRightMargin);
            }
            else {
                //  ruler.scrollLeft = currentScrollLeft + HelperMethods.convertPointToPixel(currentRightMargin - mousePosition);
            }
        }
    };
    RulerHelper.prototype.resizeRulerMargins = function (isRulerLeftMargin, currentLeftMargin, currentScrollLeft, currentRightMargin, ruler, mousePosition, isHorizontal, documentEditor) {
        var rulerMarginDiv = document.getElementById(documentEditor.element.id + (isHorizontal ? '_hRuler_Margin1' : '_vRuler_Margin'));
        var rulerGeometry = this.getRulerGeometry(documentEditor);
        if (!isNullOrUndefined(isRulerLeftMargin) && isRulerLeftMargin) {
            rulerMarginDiv.style.width = (rulerGeometry.width - HelperMethods.convertPointToPixel((documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin * documentEditor.zoomFactor) + mousePosition)).toString() + "px";
            if (currentLeftMargin < mousePosition) {
                ruler.scrollLeft = currentScrollLeft - HelperMethods.convertPointToPixel(mousePosition - currentLeftMargin);
            }
            else {
                ruler.scrollLeft = currentScrollLeft + HelperMethods.convertPointToPixel(currentLeftMargin - mousePosition);
            }
        }
        else {
            var rightMargin = HelperMethods.convertPixelToPoint(rulerGeometry.width) - mousePosition;
            rulerMarginDiv.style.width = (rulerGeometry.width - HelperMethods.convertPointToPixel((documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin * documentEditor.zoomFactor) + (rightMargin))).toString() + "px";
            if (currentRightMargin < mousePosition) {
                //  ruler.scrollLeft = currentScrollLeft - HelperMethods.convertPointToPixel(mousePosition - currentRightMargin);
            }
            else {
                //  ruler.scrollLeft = currentScrollLeft + HelperMethods.convertPointToPixel(currentRightMargin - mousePosition);
            }
        }
    };
    RulerHelper.prototype.getRulerOrigin = function () {
        var range = 1584;
        var pixelValue = HelperMethods.convertPointToPixel(1584);
        //console.log('PixelValue: ', pixelValue);
        //console.log('PointsValue: ', range);
    };
    RulerHelper.prototype.renderIndents = function (documentEditor, isHorizontal, rulerSize, rulerGeometry, locale) {
        var _this = this;
        var hRuler = document.getElementById(documentEditor.element.id + '_hRuler');
        var firstLineIndent = document.getElementById(documentEditor.element.id + '_firstLineIndent');
        if (!firstLineIndent) {
            var margin = ('left:' + (HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin) - 6) * documentEditor.zoomFactor + 'px;');
            var style = 'height:' + ((rulerSize.height - 3) / 2) + 'px;overflow:hidden;width:12px;position:absolute;font-size:11px;text-align: left;z-index: 5;' + margin;
            var attributes = {
                'id': documentEditor.element.id + '_firstLineIndent',
                style: style,
                'data-name': 'FirstLineIndent',
                class: 'e-de-ruler-indent'
            };
            firstLineIndent = this.createHtmlElement('div', attributes);
            firstLineIndent.setAttribute('title', locale.getConstant('First Line Indent'));
            var svg = void 0;
            // Create an SVG element
            var attr = {
                'id': documentEditor.element.id + '_firstLineIndent_svg',
                width: rulerSize.width + 'px',
                height: ((rulerSize.height - 3) / 2) + 'px',
                style: 'position:inherit;left:0px'
            };
            svg = this.createSvgElement('svg', attr);
            svg.setAttribute("fill", "none");
            var pathattr = {
                style: 'position:inherit;left:0px'
            };
            // Create a path element inside the SVG
            var pathElement = this.createSvgElement('path', pathattr);
            pathElement.setAttribute("class", "e-de-ruler-indent-svg");
            pathElement.setAttribute("d", "M 0.5 0.5 H 11.5 V 2.7128 L 6 5.4211 L 0.5 2.7128 V 0.5 Z");
            pathElement.setAttribute("fill", "white");
            pathElement.setAttribute("stroke", "#A1A1A1");
            // Append the path element to the SVG element
            svg.appendChild(pathElement);
            firstLineIndent.appendChild(svg);
            hRuler.append(firstLineIndent);
            firstLineIndent.addEventListener("dblclick", function (event) {
                documentEditor.showDialog('Paragraph');
                event.stopPropagation();
            });
            //Draggable for first line Indent.
            var isDragging_1 = false;
            var firstLineOffset_1;
            var initialValue_1 = HelperMethods.getNumberFromString(firstLineIndent.style.left); // for mouse up event
            var initialValue2 = HelperMethods.getNumberFromString(firstLineIndent.style.left); // for mouse move event
            firstLineIndent.addEventListener("mouseenter", function (e) {
                documentEditor.isOnIndent = true;
            });
            firstLineIndent.addEventListener("mouseleave", function (e) {
                documentEditor.isOnIndent = false;
            });
            firstLineIndent.addEventListener("mousedown", function (e) {
                isDragging_1 = true;
                firstLineOffset_1 = e.clientX - firstLineIndent.getBoundingClientRect().left;
                initialValue_1 = HelperMethods.getNumberFromString(firstLineIndent.style.left);
                var rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin) * documentEditor.zoomFactor;
                if (documentEditor.selection.paragraphFormat.bidi) {
                    rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin - (documentEditor.selection.sectionFormat.pageWidth - documentEditor.selection.sectionFormat.leftMargin - documentEditor.selection.sectionFormat.rightMargin)) * documentEditor.zoomFactor;
                }
                if (documentEditor.layoutType === 'Continuous') {
                    rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                    if (documentEditor.selection.paragraphFormat.bidi) {
                        rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - (documentEditor.viewer.clientArea.width * documentEditor.zoomFactor);
                    }
                }
                var value = rulerZeroPoint + e.clientX - firstLineOffset_1 - hRuler.getBoundingClientRect().left;
                var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                startValue = documentEditor.layoutType === 'Continuous' ? 0 : startValue;
                var indicatorLineValue = startValue + (value - rulerZeroPoint) + 6;
                var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                lineSvg.style.left = indicatorLineValue + 'px';
                lineSvg.style.display = 'block';
                e.stopPropagation();
            });
            document.addEventListener("mousemove", function (e) {
                if (isDragging_1) {
                    var rulerZeroPoint = void 0;
                    var maxValue = void 0;
                    var minValue = void 0;
                    var rightIndent_1 = document.getElementById(documentEditor.element.id + '_rightIndent');
                    var rightIndentValue = HelperMethods.getNumberFromString(rightIndent_1.style.left);
                    if (documentEditor.layoutType === 'Pages') {
                        if (documentEditor.selection.paragraphFormat.bidi) {
                            rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin - (documentEditor.selection.sectionFormat.pageWidth - documentEditor.selection.sectionFormat.leftMargin - documentEditor.selection.sectionFormat.rightMargin)) * documentEditor.zoomFactor;
                            maxValue = rulerZeroPoint - 6 + (HelperMethods.convertPointToPixel(documentEditor.selection.sectionFormat.pageWidth) * documentEditor.zoomFactor);
                            minValue = rightIndentValue + HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor;
                        }
                        else {
                            rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin) * documentEditor.zoomFactor;
                            minValue = rulerZeroPoint - 6;
                            maxValue = rightIndentValue - HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor;
                        }
                    }
                    else if (documentEditor.layoutType === 'Continuous') {
                        if (_this.position.paragraph.paragraphFormat.bidi) {
                            rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - (documentEditor.viewer.clientArea.width * documentEditor.zoomFactor);
                            maxValue = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 + 40 - 6;
                            minValue = rightIndentValue + (HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                        }
                        else {
                            rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                            minValue = rulerZeroPoint - 6;
                            maxValue = rightIndentValue - (HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                        }
                    }
                    var value = rulerZeroPoint + e.clientX - firstLineOffset_1 - hRuler.getBoundingClientRect().left;
                    if (value < minValue) {
                        value = minValue;
                    }
                    else if (value > maxValue) {
                        value = maxValue;
                    }
                    firstLineIndent.style.left = value + "px";
                    var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                    startValue = documentEditor.layoutType === 'Continuous' ? 0 : startValue;
                    var indicatorLineValue = startValue + (value - rulerZeroPoint) + 6;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.left = indicatorLineValue + 'px';
                }
            });
            document.addEventListener("mouseup", function () {
                if (isDragging_1) {
                    isDragging_1 = false;
                    var finalValue = HelperMethods.getNumberFromString(firstLineIndent.style.left);
                    if (parseInt(firstLineIndent.style.left.replace('px', '')) < 0) {
                        finalValue *= -1;
                    }
                    if (documentEditor.selection.paragraphFormat.bidi) {
                        documentEditor.editor.applyRulerMarkerValues('firstLineIndent', finalValue, initialValue_1);
                    }
                    else {
                        documentEditor.editor.applyRulerMarkerValues('firstLineIndent', initialValue_1, finalValue);
                    }
                    initialValue_1 = finalValue;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.display = 'none';
                }
            });
        }
        //Rendering HangingIndent
        var hangingIndent = document.getElementById(documentEditor.element.id + '_hangingIndent');
        if (!hangingIndent) {
            var margin = ('left:' + (HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin) - 6) + 'px;');
            var style = 'height:' + (rulerSize.height / 2) + 'px;top:' + (((rulerSize.height - 3) / 2) + 1) + 'px;overflow:hidden;width:12px;position:absolute;font-size:11px;text-align: left;z-index: 5;' + margin;
            var attributes = {
                'id': documentEditor.element.id + '_hangingIndent',
                style: style,
                'data-name': 'HangingIndent',
                class: 'e-de-ruler-indent'
            };
            hangingIndent = this.createHtmlElement('div', attributes);
            hangingIndent.setAttribute('title', locale.getConstant('Hanging Indent'));
            var hangingIndentSvg = void 0;
            // Create an SVG element
            var attr = {
                'id': documentEditor.element.id + '_hangingIndent_svg',
                width: rulerSize.width + 'px',
                height: ((rulerSize.height - 3) / 2) + 'px',
                style: 'position:inherit;left:0px'
            };
            hangingIndentSvg = this.createSvgElement('svg', attr);
            hangingIndentSvg.setAttribute("fill", "none");
            var pathattr = {
                style: 'position:inherit;left:0px'
            };
            // Create a path element inside the SVG
            var pathElement = this.createSvgElement('path', pathattr);
            pathElement.setAttribute("class", "e-de-ruler-indent-svg");
            pathElement.setAttribute("d", "M 0.5 5.3211 H 11.5 V 3.1083 L 6 0.4 L 0.5 3.1083 V 5.3211 Z");
            pathElement.setAttribute("fill", "white");
            pathElement.setAttribute("stroke", "#A1A1A1");
            // Append the path element to the SVG element
            hangingIndentSvg.appendChild(pathElement);
            hangingIndent.appendChild(hangingIndentSvg);
            hRuler.append(hangingIndent);
            hangingIndent.addEventListener("dblclick", function (event) {
                documentEditor.showDialog('Paragraph');
                event.stopPropagation();
            });
            //Draggable for hanging line Indent.
            var isDragging_2 = false;
            var hangingLineOffset_1;
            var initialValue_2 = HelperMethods.getNumberFromString(hangingIndent.style.left); // for mouse up event
            var initialValue2 = HelperMethods.getNumberFromString(hangingIndent.style.left); // for mouse move event
            var minLimit_1;
            var maxLimit_1;
            var leftIndent_1;
            hangingIndent.addEventListener("mouseenter", function (e) {
                documentEditor.isOnIndent = true;
            });
            hangingIndent.addEventListener("mouseleave", function (e) {
                documentEditor.isOnIndent = false;
            });
            hangingIndent.addEventListener("mousedown", function (e) {
                isDragging_2 = true;
                hangingLineOffset_1 = e.clientX - hangingIndent.getBoundingClientRect().left;
                initialValue_2 = HelperMethods.getNumberFromString(hangingIndent.style.left);
                var rightIndent = document.getElementById(documentEditor.element.id + '_rightIndent');
                var rightPosition = HelperMethods.getNumberFromString(rightIndent.style.left);
                var rulerZeroPoint;
                if (documentEditor.layoutType === 'Pages') {
                    if (documentEditor.selection.paragraphFormat.bidi) {
                        rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin - (documentEditor.selection.sectionFormat.pageWidth - documentEditor.selection.sectionFormat.leftMargin - documentEditor.selection.sectionFormat.rightMargin)) * documentEditor.zoomFactor;
                        minLimit_1 = rightPosition + (HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                        maxLimit_1 = rulerZeroPoint - 6 + (HelperMethods.convertPointToPixel(documentEditor.selection.sectionFormat.pageWidth) * documentEditor.zoomFactor);
                    }
                    else {
                        rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin) * documentEditor.zoomFactor;
                        minLimit_1 = rulerZeroPoint - 6;
                        maxLimit_1 = (rightPosition - HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                    }
                }
                else if (documentEditor.layoutType === 'Continuous') {
                    if (_this.position.paragraph.paragraphFormat.bidi) {
                        rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - (documentEditor.viewer.clientArea.width * documentEditor.zoomFactor);
                        maxLimit_1 = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 + 40 - 6;
                        minLimit_1 = rightPosition + (HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                    }
                    else {
                        rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                        minLimit_1 = rulerZeroPoint - 6;
                        maxLimit_1 = (rightPosition - HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                    }
                }
                leftIndent_1 = document.getElementById(documentEditor.element.id + '_leftIndent');
                var value = rulerZeroPoint + e.clientX - hangingLineOffset_1 - hRuler.getBoundingClientRect().left;
                var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                startValue = documentEditor.layoutType === 'Continuous' ? 0 : startValue;
                var indicatorLineValue = startValue + (value - rulerZeroPoint) + 6;
                var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                lineSvg.style.left = indicatorLineValue + 'px';
                lineSvg.style.display = 'block';
                e.stopPropagation();
            });
            document.addEventListener("mousemove", function (e) {
                if (isDragging_2) {
                    var rulerZeroPoint = void 0;
                    if (documentEditor.layoutType === 'Pages') {
                        if (documentEditor.selection.paragraphFormat.bidi) {
                            rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin - (documentEditor.selection.sectionFormat.pageWidth - documentEditor.selection.sectionFormat.leftMargin - documentEditor.selection.sectionFormat.rightMargin)) * documentEditor.zoomFactor;
                        }
                        else {
                            rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin) * documentEditor.zoomFactor;
                        }
                    }
                    else if (documentEditor.layoutType === 'Continuous') {
                        if (_this.position.paragraph.paragraphFormat.bidi) {
                            rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - (documentEditor.viewer.clientArea.width * documentEditor.zoomFactor);
                        }
                        else {
                            rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                        }
                    }
                    var value = rulerZeroPoint + e.clientX - hangingLineOffset_1 - hRuler.getBoundingClientRect().left;
                    if ((value) > maxLimit_1) {
                        value = maxLimit_1;
                    }
                    else if (value < minLimit_1) {
                        value = minLimit_1;
                    }
                    leftIndent_1.style.left = value + "px";
                    hangingIndent.style.left = value + "px";
                    var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                    startValue = documentEditor.layoutType === 'Continuous' ? 0 : startValue;
                    var indicatorLineValue = startValue + (value - rulerZeroPoint) + 6;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.left = indicatorLineValue + 'px';
                }
            });
            document.addEventListener("mouseup", function () {
                if (isDragging_2) {
                    isDragging_2 = false;
                    var finalValue = HelperMethods.getNumberFromString(hangingIndent.style.left);
                    if (parseInt(hangingIndent.style.left.replace('px', '')) < 0) {
                        finalValue *= -1;
                    }
                    if (documentEditor.selection.paragraphFormat.bidi) {
                        documentEditor.editor.applyRulerMarkerValues('hangingIndent', finalValue, initialValue_2);
                    }
                    else {
                        documentEditor.editor.applyRulerMarkerValues('hangingIndent', initialValue_2, finalValue);
                    }
                    initialValue_2 = finalValue;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.display = 'none';
                }
            });
        }
        //Rendering LeftIndent
        var leftIndent = document.getElementById(documentEditor.element.id + '_leftIndent');
        if (!leftIndent) {
            var margin = ('left:' + (HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin) - 6) + 'px;');
            var style = 'height:4px;top:11px;overflow:hidden;width:12px;position:absolute;font-size:11px;text-align: left;z-index: 5;' + margin;
            var attributes = {
                'id': documentEditor.element.id + '_leftIndent',
                style: style,
                class: 'e-de-ruler-indent'
            };
            leftIndent = this.createHtmlElement('div', attributes);
            leftIndent.setAttribute('title', locale.getConstant('Left Indent'));
            var leftIndentSvg = void 0;
            // Create an SVG element
            var attr = {
                'id': documentEditor.element.id + '_leftIndent_svg',
                width: rulerSize.width + 'px',
                height: '4px',
                style: 'position:inherit;left:0px'
            };
            leftIndentSvg = this.createSvgElement('svg', attr);
            leftIndentSvg.setAttribute("fill", "none");
            var pathattr = {
                style: 'position:inherit;left:0px'
            };
            // Create a path element inside the SVG
            var pathElement = this.createSvgElement('path', pathattr);
            pathElement.setAttribute("class", "e-de-ruler-indent-svg");
            pathElement.setAttribute("d", "M 0.5 3.5 H 11.5 V 0.5 H 0.5 V 3.5 Z");
            pathElement.setAttribute("fill", "white");
            pathElement.setAttribute("stroke", "#A1A1A1");
            // Append the path element to the SVG element
            leftIndentSvg.appendChild(pathElement);
            leftIndent.appendChild(leftIndentSvg);
            hRuler.append(leftIndent);
            leftIndent.addEventListener("dblclick", function (event) {
                documentEditor.showDialog('Paragraph');
                event.stopPropagation();
            });
            //Draggable for left line Indent.
            var isDragging_3 = false;
            var leftLineOffset_1;
            var initialValue_3 = HelperMethods.getNumberFromString(leftIndent.style.left); // for mouse down event
            var initialValue2 = HelperMethods.getNumberFromString(leftIndent.style.left); // for mouse move event
            var firstIndentInitialValue_1;
            var diff_1;
            var minLimit_2;
            var maxLimit_2;
            var isHangingIndent_1;
            leftIndent.addEventListener("mouseenter", function (e) {
                documentEditor.isOnIndent = true;
            });
            leftIndent.addEventListener("mouseleave", function (e) {
                documentEditor.isOnIndent = false;
            });
            leftIndent.addEventListener("mousedown", function (e) {
                var rulerZeroPoint;
                isDragging_3 = true;
                leftLineOffset_1 = e.clientX - leftIndent.getBoundingClientRect().left;
                initialValue_3 = HelperMethods.getNumberFromString(leftIndent.style.left);
                firstIndentInitialValue_1 = HelperMethods.getNumberFromString(firstLineIndent.style.left);
                diff_1 = firstIndentInitialValue_1 - initialValue_3;
                firstLineIndent = document.getElementById(documentEditor.element.id + '_firstLineIndent');
                var rightIndent = document.getElementById(documentEditor.element.id + '_rightIndent');
                var rightPosition = HelperMethods.getNumberFromString(rightIndent.style.left);
                if (documentEditor.layoutType === 'Pages') {
                    if (documentEditor.selection.paragraphFormat.bidi) {
                        rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin - (documentEditor.selection.sectionFormat.pageWidth - documentEditor.selection.sectionFormat.leftMargin - documentEditor.selection.sectionFormat.rightMargin)) * documentEditor.zoomFactor;
                        minLimit_2 = (rightPosition + HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                        maxLimit_2 = rulerZeroPoint - 6 + (HelperMethods.convertPointToPixel(documentEditor.selection.sectionFormat.pageWidth) * documentEditor.zoomFactor);
                        isHangingIndent_1 = (HelperMethods.getNumberFromString(hangingIndent.style.left) - rightPosition) <= (HelperMethods.getNumberFromString(firstLineIndent.style.left) - rightPosition);
                    }
                    else {
                        rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin) * documentEditor.zoomFactor;
                        minLimit_2 = rulerZeroPoint - 6;
                        maxLimit_2 = (rightPosition - HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                        isHangingIndent_1 = (rightPosition - HelperMethods.getNumberFromString(hangingIndent.style.left)) <= (rightPosition - HelperMethods.getNumberFromString(firstLineIndent.style.left));
                    }
                }
                else if (documentEditor.layoutType === 'Continuous') {
                    if (_this.position.paragraph.paragraphFormat.bidi) {
                        rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - (documentEditor.viewer.clientArea.width * documentEditor.zoomFactor);
                        maxLimit_2 = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 + 40 - 6;
                        minLimit_2 = rightPosition + (HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                        isHangingIndent_1 = (HelperMethods.getNumberFromString(hangingIndent.style.left) - rightPosition) <= (HelperMethods.getNumberFromString(firstLineIndent.style.left) - rightPosition);
                    }
                    else {
                        rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                        minLimit_2 = rulerZeroPoint - 6;
                        maxLimit_2 = (rightPosition - HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                        isHangingIndent_1 = (rightPosition - HelperMethods.getNumberFromString(hangingIndent.style.left)) <= (rightPosition - HelperMethods.getNumberFromString(firstLineIndent.style.left));
                    }
                }
                var value = rulerZeroPoint + e.clientX - leftLineOffset_1 - hRuler.getBoundingClientRect().left;
                var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                startValue = documentEditor.layoutType === 'Continuous' ? 0 : startValue;
                var indicatorLineValue = startValue + (value - rulerZeroPoint) + 6;
                var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                lineSvg.style.left = indicatorLineValue + 'px';
                lineSvg.style.display = 'block';
                e.stopPropagation();
            });
            document.addEventListener("mousemove", function (e) {
                if (isDragging_3) {
                    var rulerZeroPoint = void 0;
                    var value = void 0;
                    if (documentEditor.selection.paragraphFormat.bidi) {
                        if (documentEditor.layoutType === 'Pages') {
                            rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin - (documentEditor.selection.sectionFormat.pageWidth - documentEditor.selection.sectionFormat.leftMargin - documentEditor.selection.sectionFormat.rightMargin)) * documentEditor.zoomFactor;
                        }
                        else if (documentEditor.layoutType === 'Continuous') {
                            rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - (documentEditor.viewer.clientArea.width * documentEditor.zoomFactor);
                        }
                        value = rulerZeroPoint + e.clientX - leftLineOffset_1 - hRuler.getBoundingClientRect().left;
                        if (isHangingIndent_1) {
                            if ((value + diff_1) > maxLimit_2) {
                                value = maxLimit_2 - diff_1;
                            }
                        }
                        else {
                            if ((value) > maxLimit_2) {
                                value = maxLimit_2;
                            }
                        }
                        if (isHangingIndent_1) {
                            if (value < minLimit_2) {
                                value = minLimit_2;
                            }
                        }
                        else {
                            if ((value + diff_1) < minLimit_2) {
                                value = minLimit_2 - diff_1;
                            }
                        }
                    }
                    else {
                        if (documentEditor.layoutType === 'Pages') {
                            rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin) * documentEditor.zoomFactor;
                        }
                        else if (documentEditor.layoutType === 'Continuous') {
                            rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                        }
                        value = rulerZeroPoint + e.clientX - leftLineOffset_1 - hRuler.getBoundingClientRect().left;
                        if (isHangingIndent_1) {
                            if ((value) > maxLimit_2) {
                                value = maxLimit_2;
                            }
                        }
                        else {
                            if ((value + diff_1) > maxLimit_2) {
                                value = maxLimit_2 - diff_1;
                            }
                        }
                        if (isHangingIndent_1) {
                            if ((value + diff_1) < minLimit_2) {
                                value = minLimit_2 - diff_1;
                            }
                        }
                        else {
                            if (value < minLimit_2) {
                                value = minLimit_2;
                            }
                        }
                    }
                    hangingIndent.style.left = value + "px";
                    leftIndent.style.left = value + "px";
                    firstLineIndent.style.left = (firstIndentInitialValue_1 + (value - initialValue_3)) + "px";
                    var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                    startValue = documentEditor.layoutType === 'Continuous' ? 0 : startValue;
                    var indicatorLineValue = startValue + (value - rulerZeroPoint) + 6;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.left = indicatorLineValue + 'px';
                }
            });
            document.addEventListener("mouseup", function () {
                if (isDragging_3) {
                    isDragging_3 = false;
                    var finalValue = HelperMethods.getNumberFromString(leftIndent.style.left);
                    if (parseInt(leftIndent.style.left.replace('px', '')) < 0) {
                        finalValue *= -1;
                    }
                    if (documentEditor.selection.paragraphFormat.bidi) {
                        documentEditor.editor.applyRulerMarkerValues('leftIndent', finalValue, initialValue_3);
                    }
                    else {
                        documentEditor.editor.applyRulerMarkerValues('leftIndent', initialValue_3, finalValue);
                    }
                    initialValue_3 = finalValue;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.display = 'none';
                }
            });
        }
        //Rendering RightIndent
        var rightIndent = document.getElementById(documentEditor.element.id + '_rightIndent');
        if (!rightIndent) {
            var margin = ('left:' + (documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.width - HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin) - 6) + 'px;');
            var style = 'height:7px;top:8px;overflow:hidden;width:12px;position:absolute;font-size:11px;text-align: left;z-index: 4;' + margin;
            var attributes = {
                'id': documentEditor.element.id + '_rightIndent',
                style: style,
                class: 'e-de-ruler-indent'
            };
            rightIndent = this.createHtmlElement('div', attributes);
            rightIndent.setAttribute('title', locale.getConstant('Right Indent'));
            var rightIndentSvg = void 0;
            // Create an SVG element
            var attr = {
                'id': documentEditor.element.id + '_rightIndent_svg',
                width: rulerSize.width + 'px',
                height: '7px',
                style: 'position:inherit;left:0px'
            };
            rightIndentSvg = this.createSvgElement('svg', attr);
            rightIndentSvg.setAttribute("fill", "none");
            var pathattr = {
                style: 'position:inherit;left:0px'
            };
            // Create a path element inside the SVG
            var pathElement = this.createSvgElement('path', pathattr);
            pathElement.setAttribute("class", "e-de-ruler-indent-svg");
            pathElement.setAttribute("d", "M 0.5 6.5 H 11.5 V 4.2872 L 6 1.5789 L 0.5 4.2872 V 6.5 Z");
            pathElement.setAttribute("fill", "white");
            pathElement.setAttribute("stroke", "#A1A1A1");
            // Append the path element to the SVG element
            rightIndentSvg.appendChild(pathElement);
            rightIndent.appendChild(rightIndentSvg);
            hRuler.append(rightIndent);
            rightIndent.addEventListener("dblclick", function (event) {
                documentEditor.showDialog('Paragraph');
                event.stopPropagation();
            });
            //Draggable for left line Indent.
            var isDragging_4 = false;
            var rightLineOffset_1;
            var initialValue_4 = HelperMethods.getNumberFromString(rightIndent.style.left); // for mouse down event
            var initialValue2 = HelperMethods.getNumberFromString(rightIndent.style.left); // for mouse move event
            rightIndent.addEventListener("mouseenter", function (e) {
                documentEditor.isOnIndent = true;
            });
            rightIndent.addEventListener("mouseleave", function (e) {
                documentEditor.isOnIndent = false;
            });
            rightIndent.addEventListener("mousedown", function (e) {
                isDragging_4 = true;
                rightLineOffset_1 = e.clientX - rightIndent.getBoundingClientRect().left;
                initialValue_4 = HelperMethods.getNumberFromString(rightIndent.style.left);
                var rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin) * documentEditor.zoomFactor;
                if (documentEditor.selection.paragraphFormat.bidi) {
                    rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin - (documentEditor.selection.sectionFormat.pageWidth - documentEditor.selection.sectionFormat.leftMargin - documentEditor.selection.sectionFormat.rightMargin)) * documentEditor.zoomFactor;
                }
                if (documentEditor.layoutType === 'Continuous') {
                    rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                    if (documentEditor.selection.paragraphFormat.bidi) {
                        rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - (documentEditor.viewer.clientArea.width * documentEditor.zoomFactor);
                    }
                }
                var value = rulerZeroPoint + e.clientX - rightLineOffset_1 - hRuler.getBoundingClientRect().left;
                var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                startValue = documentEditor.layoutType === 'Continuous' ? 0 : startValue;
                var indicatorLineValue = startValue + (value - rulerZeroPoint) + 6;
                var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                lineSvg.style.left = indicatorLineValue + 'px';
                lineSvg.style.display = 'block';
                e.stopPropagation();
            });
            document.addEventListener("mousemove", function (e) {
                if (isDragging_4) {
                    var rulerZeroPoint = void 0;
                    var value = void 0;
                    var leftIndent_2 = document.getElementById(documentEditor.element.id + '_leftIndent');
                    var firstLineIndent_1 = document.getElementById(documentEditor.element.id + '_firstLineIndent');
                    var maxValue = void 0;
                    var minValue = void 0;
                    if (documentEditor.selection.paragraphFormat.bidi) {
                        if (documentEditor.layoutType === 'Pages') {
                            rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin - (documentEditor.selection.sectionFormat.pageWidth - documentEditor.selection.sectionFormat.leftMargin - documentEditor.selection.sectionFormat.rightMargin)) * documentEditor.zoomFactor;
                        }
                        else if (documentEditor.layoutType === 'Continuous') {
                            rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - (documentEditor.viewer.clientArea.width * documentEditor.zoomFactor);
                        }
                        value = rulerZeroPoint + e.clientX - rightLineOffset_1 - hRuler.getBoundingClientRect().left;
                        var nearestElement = (HelperMethods.getNumberFromString(leftIndent_2.style.left) - value) <= (HelperMethods.getNumberFromString(firstLineIndent_1.style.left) - value) ? leftIndent_2 : firstLineIndent_1;
                        var indentValue = HelperMethods.getNumberFromString(nearestElement.style.left);
                        maxValue = indentValue - (HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                        minValue = rulerZeroPoint - 6;
                    }
                    else {
                        if (documentEditor.layoutType === 'Pages') {
                            rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin) * documentEditor.zoomFactor;
                        }
                        else if (documentEditor.layoutType === 'Continuous') {
                            rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                        }
                        value = rulerZeroPoint + e.clientX - rightLineOffset_1 - hRuler.getBoundingClientRect().left;
                        var nearestElement = (value - HelperMethods.getNumberFromString(leftIndent_2.style.left)) <= (value - HelperMethods.getNumberFromString(firstLineIndent_1.style.left)) ? leftIndent_2 : firstLineIndent_1;
                        var indentValue = HelperMethods.getNumberFromString(nearestElement.style.left);
                        maxValue = rulerZeroPoint + (documentEditor.documentHelper.currentPage.boundingRectangle.width * documentEditor.zoomFactor) - 6;
                        minValue = indentValue + (HelperMethods.convertPointToPixel(42) * documentEditor.zoomFactor);
                    }
                    if (value < minValue) {
                        value = minValue;
                    }
                    else if (value > maxValue) {
                        value = maxValue;
                    }
                    rightIndent.style.left = value + "px";
                    var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                    startValue = documentEditor.layoutType === 'Continuous' ? 0 : startValue;
                    var indicatorLineValue = startValue + (value - rulerZeroPoint) + 6;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.left = indicatorLineValue + 'px';
                }
            });
            document.addEventListener("mouseup", function () {
                if (isDragging_4) {
                    isDragging_4 = false;
                    var finalValue = HelperMethods.getNumberFromString(rightIndent.style.left);
                    if (documentEditor.selection.paragraphFormat.bidi) {
                        documentEditor.editor.applyRulerMarkerValues('rightIndent', initialValue_4, finalValue);
                    }
                    else {
                        documentEditor.editor.applyRulerMarkerValues('rightIndent', finalValue, initialValue_4);
                    }
                    initialValue_4 = finalValue;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.display = 'none';
                }
            });
        }
        this.updateIndentMarkers(documentEditor);
    };
    /**
     * updateRuler method
     *
     * @returns {void} updateRuler method.
     * @param { DocumentEditor} documentEditor - provide the documentEditor  value.
     * @private
     */
    RulerHelper.prototype.updateRuler = function (documentEditor, rerenderRuler) {
        if (documentEditor.rulerHelper && documentEditor.documentEditorSettings && !documentEditor.documentEditorSettings.showRuler ||
            documentEditor.isReadOnlyMode) {
            return;
        }
        // const hOffset: number = - documentEditor.scroller.horizontalOffset;
        // const vOffset: number = - documentEditor.scroller.verticalOffset;
        var hOffset = 0;
        // const vOffset: number = - documentEditor.scroller.verticalOffset;
        if (isNullOrUndefined(documentEditor.hRuler) && isNullOrUndefined(documentEditor.vRuler)) {
            return;
        }
        if (documentEditor.selection.isForward) {
            this.position = documentEditor.selection.start;
        }
        else {
            this.position = documentEditor.selection.end;
        }
        this.updateRulerDimension(documentEditor, documentEditor.hRuler, hOffset, rerenderRuler);
        this.updateRulerDimension(documentEditor, documentEditor.vRuler, hOffset, rerenderRuler);
        this.updateRulerMargins(documentEditor);
        this.updateIndentMarkers(documentEditor);
        this.updateTabStopMarkers(documentEditor);
        if (this.position.paragraph.isInsideTable) {
            this.updateTableMarkers(documentEditor, documentEditor.hRuler);
        }
        else {
            this.removeTableMarkers(documentEditor, documentEditor.hRuler);
        }
        this.updateIndicatorLines(documentEditor);
    };
    RulerHelper.prototype.removeTableMarkers = function (documentEditor, ruler) {
        var renderedTableMarkers = HelperMethods.convertNodeListToArray(document.querySelectorAll('.e-de-ruler-table-marker'));
        if (!isNullOrUndefined(renderedTableMarkers)) {
            for (var i = 0; i < renderedTableMarkers.length; i++) {
                var elementToRemove = renderedTableMarkers[parseInt(i.toString(), 10)];
                if (!isNullOrUndefined(elementToRemove)) {
                    elementToRemove.parentNode.removeChild(elementToRemove);
                }
            }
        }
    };
    RulerHelper.prototype.updateTableMarkers = function (documentEditor, ruler) {
        var renderedTableMarkers = HelperMethods.convertNodeListToArray(document.querySelectorAll('.e-de-ruler-table-marker'));
        if (isNullOrUndefined(renderedTableMarkers)) {
            // const tablewidget: TableWidget =
            // ((documentEditor.selection.end.paragraph.containerWidget as TableCellWidget).ownerTable as TableWidget);
            // const tableColumns = ((documentEditor.selection.end.paragraph.containerWidget as TableCellWidget).ownerTable
            //  as TableWidget).tableHolder.columns.length;
            // const tableXPos: number = undefined;
            // const hRuler: HTMLElement = document.getElementById(documentEditor.element.id + '_hRuler');
            this.renderTableMarkers(documentEditor, ruler);
        }
        else if (this.position.paragraph.isInsideTable) {
            this.renderTableMarkers(documentEditor, ruler);
        }
    };
    RulerHelper.prototype.renderTableMarkers = function (documentEditor, ruler) {
        var _this = this;
        this.removeTableMarkers(documentEditor, documentEditor.hRuler);
        var intialPosition;
        var tablewidget = this.position.paragraph.containerWidget.ownerTable;
        var tableRowWidget = this.position.paragraph.associatedCell.ownerRow.clone();
        var cellWidgets = tableRowWidget.childWidgets;
        var value = this.position.paragraph.associatedCell.ownerTable.tableFormat.bidi ? cellWidgets.length : 0;
        if (this.position.paragraph.associatedCell.ownerTable.tableFormat.bidi) {
            cellWidgets.reverse();
        }
        var tableXPos;
        var hRuler = document.getElementById(documentEditor.element.id + '_hRuler');
        var _loop_1 = function (i) {
            var tableMarker = document.getElementById(documentEditor.element.id + '_tableMarker_' + value);
            //if (!tableMarker) {   
            var margin = void 0;
            if (i == 0) {
                tableXPos = (cellWidgets[parseInt(i.toString(), 10)].x - cellWidgets[parseInt(i.toString(), 10)].margin.left) * documentEditor.zoomFactor + hRuler.scrollLeft;
                margin = ('left:' + (tableXPos - 4) + 'px;');
            }
            else {
                tableXPos = tableXPos + ((cellWidgets[i - 1].width
                    + cellWidgets[i - 1].margin.left
                    + cellWidgets[i - 1].margin.right) * documentEditor.zoomFactor);
                margin = 'left:' + (tableXPos - 4) + 'px;';
            }
            var style = 'height:' + (ruler.thickness) + 'px;overflow:hidden;width:10px;position:absolute;font-size:11px;text-align: left;z-index: 4;' + margin;
            var attributes = {
                'id': documentEditor.element.id + '_tableMarker_' + value,
                'class': 'e-de-ruler-table-marker',
                style: style
            };
            tableMarker = this_1.createHtmlElement('div', attributes);
            var locale = new L10n('documenteditor', documentEditor.defaultLocale);
            tableMarker.setAttribute('title', locale.getConstant('Move Table Column'));
            // Create an SVG element
            var attr = {
                'id': documentEditor.element.id + '_tableMarker_svg' + i,
                width: 9 + 'px',
                height: 11 + 'px',
                style: 'position:inherit;left:0px;top:3px;'
            };
            var svg = this_1.createSvgElement('svg', attr);
            svg.setAttribute('fill', 'none');
            var pathattr = {
                style: 'position:inherit;left:0px;'
            };
            // Create a path element inside the SVG
            var pathElement = this_1.createSvgElement('path', pathattr);
            pathElement.setAttribute('class', 'e-de-ruler-table-svg');
            pathElement.setAttribute('d', 'M1 1V0H2V1H3V0H4V1H5V0H6V1H7V2H6V3H7V4H6V5H7V6H6V7H7V8H0V7H1V6H0V5H1V4H0V3H1V2H0V1H1ZM2 2V3H3V2H2ZM4 2V3H5V2H4ZM5 4H4V5H5V4ZM5 6H4V7H5V6ZM3 7V6H2V7H3ZM2 5H3V4H2V5Z');
            pathElement.setAttribute('fill', '#A1A1A1');
            // Append the path element to the SVG element
            svg.appendChild(pathElement);
            tableMarker.appendChild(svg);
            hRuler.append(tableMarker);
            // }
            if (this_1.position.paragraph.associatedCell.ownerTable.tableFormat.bidi) {
                value--;
            }
            else {
                value++;
            }
            tableMarker.addEventListener('dblclick', function (event) {
                documentEditor.showDialog('TableProperties');
                event.stopPropagation();
            });
            var tableMarkerOffset;
            tableMarker.addEventListener('mousedown', function (e) {
                tableMarkerOffset = e.clientX - tableMarker.getBoundingClientRect().left;
                documentEditor.startXPosition = HelperMethods.convertPixelToPoint(e.clientX);
                documentEditor.isTableMarkerDragging = true;
                var cursorPoint = new Point(e.clientX, e.clientY);
                var touchPoint = documentEditor.viewer.findFocusedPage(cursorPoint, true, true);
                var currentMarkerPostion;
                if (e.currentTarget instanceof HTMLElement) {
                    var parts = e.currentTarget.id.split('_');
                    var value_1 = parts[parts.length - 1];
                    currentMarkerPostion = parseInt(value_1);
                }
                var tableWidget = documentEditor.selection.end.paragraph.containerWidget.ownerTable;
                documentEditor.editorModule.tableResize.currentResizingTable = tableWidget;
                documentEditor.editorModule.tableResize.resizeNode = 0;
                documentEditor.editorModule.tableResize.resizerPosition = currentMarkerPostion;
                documentEditor.editorModule.tableResize.startingPoint.x = touchPoint.x;
                documentEditor.editorModule.tableResize.startingPoint.y = touchPoint.y;
                documentEditor.editorHistory.initResizingHistory(touchPoint, documentEditor.editorModule.tableResize);
                var rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin) * documentEditor.zoomFactor;
                var value = rulerZeroPoint + e.clientX - tableMarkerOffset - hRuler.getBoundingClientRect().left;
                var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                var indicatorLineValue = startValue + (value - rulerZeroPoint) + 6;
                var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                lineSvg.style.left = (indicatorLineValue - 6) + 'px';
                lineSvg.style.display = 'block';
            });
            document.addEventListener("mousemove", function (e) {
                if (documentEditor.isDestroyed || !documentEditor.documentEditorSettings.showRuler) {
                    return;
                }
                if (documentEditor.isTableMarkerDragging) {
                    var hRuler_1 = document.getElementById(documentEditor.element.id + '_hRuler');
                    var rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin) * documentEditor.zoomFactor;
                    if (documentEditor.selection.end.paragraph.associatedCell.ownerTable.tableFormat.bidi) {
                        var rulerGeometry = _this.getRulerGeometry(documentEditor);
                        var rulerMarginDivWidth = (rulerGeometry.width - (HelperMethods.convertPointToPixel((documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin * documentEditor.zoomFactor) + (documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin * documentEditor.zoomFactor))));
                        rulerZeroPoint -= rulerMarginDivWidth;
                    }
                    var value_2 = rulerZeroPoint + e.clientX - tableMarkerOffset - hRuler_1.getBoundingClientRect().left;
                    tableMarker.style.left = value_2 + "px";
                    var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                    var indicatorLineValue = startValue + (value_2 - rulerZeroPoint) + 6;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.left = (indicatorLineValue - 6) + 'px';
                }
            });
            document.addEventListener("mouseup", function (e) {
                if (documentEditor.isDestroyed || !documentEditor.documentEditorSettings.showRuler) {
                    return;
                }
                if (documentEditor.isTableMarkerDragging) {
                    var cursorPoint = new Point(e.clientX, e.clientY);
                    var dragValue = _this.position.paragraph.associatedCell.ownerTable.tableFormat.bidi ? (documentEditor.startXPosition - HelperMethods.convertPixelToPoint(e.clientX)) : (HelperMethods.convertPixelToPoint(e.clientX) - documentEditor.startXPosition);
                    documentEditor.editorModule.tableResize.handleResizing(cursorPoint, true, (dragValue / documentEditor.zoomFactor));
                    documentEditor.editorModule.tableResize.updateResizingHistory(documentEditor.viewer.findFocusedPage(cursorPoint, true, true));
                    documentEditor.isTableMarkerDragging = false;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.display = 'none';
                }
            });
        };
        var this_1 = this;
        for (var i = 0; i <= cellWidgets.length; i++) {
            _loop_1(i);
        }
    };
    /**
     * updateRulerDimension method \
     *
     * @returns {void} updateRulerDimension method .\
     * @param { Diagram} diagram - provide the content  value.
     * @param { Ruler} ruler - provide the content  value.
     * @param { number} offset - provide the content  value.
     * @param { boolean} isHorizontal - provide the content  value.
     * @private
     */
    RulerHelper.prototype.updateRulerDimension = function (documentEditor, ruler, offset, rerenderRuler) {
        var isHorizontal = ruler.orientation === "Horizontal" ? true : false;
        var rulerSize = this.getRulerSize(documentEditor);
        var rulerGeometry = this.getRulerGeometry(documentEditor);
        //const documentEditorRuler: DocumentEditorRulerModel = isHorizontal ? documentEditor.documentEditorSettings.rulerSettings.horizontalRuler : documentEditor.documentEditorSettings.rulerSettings.verticalRuler;
        this.updateRulerDiv(documentEditor, rulerGeometry, isHorizontal, ruler);
        this.updateRulerSpace(documentEditor, rulerGeometry, isHorizontal, ruler);
        this.updateMargin(ruler, documentEditor, isHorizontal);
        // ruler.pageWidth = documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.width * documentEditor.zoomFactor;
        // ruler.pageHeight = documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.height * documentEditor.zoomFactor;
        ruler.length = documentEditor.zoomFactor < 1 ? ((ruler.zeroPosition * 2) / documentEditor.zoomFactor) : ((ruler.zeroPosition * 2) * documentEditor.zoomFactor);
        var rulerObj = ruler.element;
        if (isHorizontal) {
            rulerObj.style.marginLeft = (documentEditor.layoutType === 'Pages' ? documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.x : 0) + 'px';
        }
        else {
            rulerObj.parentElement.style.display = documentEditor.layoutType === 'Pages' ? 'block' : 'none';
            rulerObj.style.marginTop = documentEditor.selection.getPageTop(documentEditor.selection.end.paragraph.bodyWidget.page) + 'px';
        }
        if (rerenderRuler) {
            ruler.offset = offset;
            ruler.scale = documentEditor.zoomFactor;
            // if (documentEditor.layoutType === 'Pages') {
            ruler.length = documentEditor.zoomFactor < 1 ? ((ruler.zeroPosition * 2) / documentEditor.zoomFactor) : ((ruler.zeroPosition * 2) * documentEditor.zoomFactor);
            // } else if (documentEditor.layoutType === 'Continuous') {
            //     ruler.length = (ruler.zeroPosition * 2) / documentEditor.zoomFactor;
            // }
            ruler.updateRuler();
        }
        if (isHorizontal) {
            if (documentEditor.layoutType === 'Pages') {
                var paraBidi = this.position.paragraph.paragraphFormat.bidi;
                var tableBidi = false;
                if (this.position.paragraph.isInsideTable) {
                    tableBidi = this.position.paragraph.associatedCell.ownerTable.tableFormat.bidi;
                }
                if (paraBidi || tableBidi) {
                    var rulerMarginDivWidth = (rulerGeometry.width - (HelperMethods.convertPointToPixel((documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin * documentEditor.zoomFactor))));
                    rulerObj.scrollLeft = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - rulerMarginDivWidth;
                }
                else {
                    rulerObj.scrollLeft = (ruler.zeroPosition - HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin)) * documentEditor.zoomFactor;
                }
            }
            else {
                var paraBidi = this.position.paragraph.paragraphFormat.bidi;
                var tableBidi = false;
                if (this.position.paragraph.isInsideTable) {
                    tableBidi = this.position.paragraph.associatedCell.ownerTable.tableFormat.bidi;
                }
                if (paraBidi || tableBidi) {
                    // const rulerMarginDivWidth = (rulerGeometry.width - 40);
                    rulerObj.scrollLeft = ((ruler.zeroPosition - documentEditor.viewer.clientActiveArea.width) * documentEditor.zoomFactor) - 20;
                }
                else {
                    // 20 is set approximately to the web layout.
                    rulerObj.scrollLeft = (ruler.zeroPosition * documentEditor.zoomFactor) - 20;
                }
            }
        }
        else {
            rulerObj.scrollTop = (ruler.zeroPosition - HelperMethods.convertPointToPixel(documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.topMargin)) * documentEditor.zoomFactor;
        }
    };
    /**
     * updateRulerSpace method \
     *
     * @returns {void} updateRulerSpace method .\
     * @param { Diagram} diagram - provide the content  value.
     * @param { Size} rulerGeometry - provide the content  value.
     * @param { boolean} isHorizontal - provide the content  value.
     * @private
     */
    RulerHelper.prototype.updateRulerSpace = function (documentEditor, rulerGeometry, isHorizontal, ruler) {
        var div = document.getElementById(documentEditor.element.id + (isHorizontal ? '_hRuler_ruler_space' : '_vRuler_ruler_space'));
        if (div && documentEditor && rulerGeometry) {
            div.style.width = (isHorizontal ? (rulerGeometry.width + (ruler.segmentWidth * 2)) : ruler.thickness) + 'px';
            div.style.height = (isHorizontal ? ruler.thickness : (rulerGeometry.height + (ruler.segmentWidth * 2))) + 'px';
        }
    };
    /**
     * updateRulerDiv method \
     *
     * @returns {void} updateRulerDiv method .\
     * @param { Diagram} diagram - provide the content  value.
     * @param { Size} rulerGeometry - provide the content  value.
     * @param { boolean} isHorizontal - provide the content  value.
     * @private
     */
    RulerHelper.prototype.updateRulerDiv = function (documentEditor, rulerGeometry, isHorizontal, ruler) {
        // parent div
        var div = document.getElementById(documentEditor.element.id + (isHorizontal ? '_hRuler' : '_vRuler'));
        if (div && documentEditor && rulerGeometry) {
            div.style.width = (isHorizontal ? documentEditor.layoutType === 'Continuous' ? rulerGeometry.width / documentEditor.zoomFactor : rulerGeometry.width : ruler.thickness) + 'px';
            div.style.height = (isHorizontal ? ruler.thickness : rulerGeometry.height) + 'px';
            div = document.getElementById(documentEditor.element.id + '_overlapRuler');
            if (div) {
                // eslint-disable-next-line
                isHorizontal ? (div.style.height === ruler.thickness + 'px') : (div.style.width === ruler.thickness + 'px');
            }
        }
        if (isHorizontal) {
            if (this.hRulerBottom) {
                var pageElement = document.getElementById(documentEditor.element.id + '_pageContainer');
                this.hRulerBottom.style.width = pageElement.getBoundingClientRect().width + 'px';
            }
        }
        // let vRulerDiv: HTMLElement = document.getElementById(documentEditor.element.id + '_vRuler');
        // if (vRulerDiv) {
        //     vRulerDiv.style.width = ruler.thickness + 'px';
        //     vRulerDiv.style.height =  rulerGeometry.height + 'px';                  
        // }
    };
    /**
     * getRulerGeometry method \
     *
     * @returns {void} getRulerGeometry method .\
     * @param { DocumentEditor} documentEditor - provide the documentEditor  value.
     * @private
     */
    RulerHelper.prototype.getRulerGeometry = function (documentEditor) {
        var rulerSize = this.getRulerSize(documentEditor);
        var height = (documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.height * documentEditor.zoomFactor);
        var width = (documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.width * documentEditor.zoomFactor);
        return new Size(width, height);
    };
    RulerHelper.prototype.getVerticalHeight = function (documentEditor) {
        var pageheight = HelperMethods.convertPixelToPoint(documentEditor.selection.end.paragraph.bodyWidget.page.boundingRectangle.height);
        var containerHeight = documentEditor.element.getBoundingClientRect().height;
        if (pageheight < containerHeight) {
            return pageheight;
        }
        else {
            return containerHeight - documentEditor.documentHelper.pages[0].boundingRectangle.y;
        }
    };
    RulerHelper.prototype.renderTab = function (documentEditor, rulerSize, tabStop, tabJustification, i, locale) {
        var _this = this;
        var hRuler = document.getElementById(documentEditor.element.id + '_hRuler');
        var zoomFactor = documentEditor.documentHelper.zoomFactor;
        var value;
        switch (tabJustification) {
            case 'Left':
                var leftTab = document.getElementById(documentEditor.element.id + '_LeftTab' + '_' + i);
                if (!leftTab) {
                    var style = '';
                    if (!isNullOrUndefined(tabStop)) {
                        value = this.position.paragraph.paragraphFormat.bidi ? (HelperMethods.convertPointToPixel(1584 - tabStop.position)) : (HelperMethods.convertPointToPixel(1584 + tabStop.position));
                        var margin = ('left:' + ((value - 1.5) * zoomFactor) + 'px;');
                        style = 'height:9px;overflow:hidden;top:7px;width:12px;position:absolute;font-size:11px;text-align: left;z-index: 4;' + margin;
                    }
                    var attributes = {
                        'id': documentEditor.element.id + '_LeftTab' + '_' + i,
                        'class': 'e-de-ruler-tab e-de-ruler-tab-left',
                        style: style,
                        'data-name': 'LeftTab'
                    };
                    leftTab = this.createHtmlElement('div', attributes);
                    leftTab.setAttribute('title', locale.getConstant('Left Tab'));
                    var svg = void 0;
                    // Create an SVG element
                    var attr = {
                        'id': documentEditor.element.id + '_leftTab_svg',
                        width: rulerSize.width / 2 + 'px',
                        height: rulerSize.height / 2 + 'px',
                        style: 'position:inherit;left:0px'
                    };
                    svg = this.createSvgElement('svg', attr);
                    svg.setAttribute("fill", "none");
                    var pathattr = {
                        style: 'position:inherit;left:0px'
                    };
                    // Create a path element inside the SVG
                    var pathElement = this.createSvgElement('path', pathattr);
                    pathElement.setAttribute("class", "e-de-ruler-tab-svg");
                    pathElement.setAttribute("d", "M3 5H7V7H1V1H3V5Z");
                    pathElement.setAttribute("fill", "#605E5C");
                    pathElement.setAttribute("stroke", "#A1A1A1");
                    // Append the path element to the SVG element
                    svg.appendChild(pathElement);
                    leftTab.appendChild(svg);
                    hRuler.append(leftTab);
                }
                break;
            case 'Center':
                var centerTab = document.getElementById(documentEditor.element.id + '_CenterTab' + '_' + i);
                if (!centerTab) {
                    var style = '';
                    if (!isNullOrUndefined(tabStop)) {
                        value = this.position.paragraph.paragraphFormat.bidi ? (HelperMethods.convertPointToPixel(1584 - tabStop.position)) : (HelperMethods.convertPointToPixel(1584 + tabStop.position));
                        var margin = ('left:' + ((value - 4) * zoomFactor) + 'px;');
                        style = 'height:9px;overflow:hidden;top:7px;width:12px;position:absolute;font-size:11px;text-align: left;z-index: 4;' + margin;
                    }
                    var attributes = {
                        'id': documentEditor.element.id + '_CenterTab' + '_' + i,
                        'class': 'e-de-ruler-tab e-de-ruler-tab-center',
                        style: style,
                        'data-name': 'CenterTab'
                    };
                    centerTab = this.createHtmlElement('div', attributes);
                    centerTab.setAttribute('title', locale.getConstant('Center Tab'));
                    var svg = void 0;
                    // Create an SVG element
                    var attr = {
                        'id': documentEditor.element.id + '_centerTab_svg',
                        width: rulerSize.width / 2 + 'px',
                        height: rulerSize.height / 2 + 'px',
                        style: 'position:inherit;left:0px'
                    };
                    svg = this.createSvgElement('svg', attr);
                    svg.setAttribute("fill", "none");
                    var pathattr = {
                        style: 'position:inherit;left:0px'
                    };
                    // Create a path element inside the SVG
                    var pathElement = this.createSvgElement('path', pathattr);
                    pathElement.setAttribute("class", "e-de-ruler-tab-svg");
                    pathElement.setAttribute("d", "M5 5H8V7H0V5H3V1H5V5Z");
                    pathElement.setAttribute("fill", "#605E5C");
                    pathElement.setAttribute("stroke", "#A1A1A1");
                    // Append the path element to the SVG element
                    svg.appendChild(pathElement);
                    centerTab.appendChild(svg);
                    hRuler.append(centerTab);
                }
                break;
            case 'Right':
                var rightTab = document.getElementById(documentEditor.element.id + '_RightTab' + '_' + i);
                if (!rightTab) {
                    var style = '';
                    if (!isNullOrUndefined(tabStop)) {
                        value = this.position.paragraph.paragraphFormat.bidi ? (HelperMethods.convertPointToPixel(1584 - tabStop.position)) : (HelperMethods.convertPointToPixel(1584 + tabStop.position));
                        var margin = ('left:' + ((value - 5.5) * zoomFactor) + 'px;');
                        style = 'height:9px;overflow:hidden;top:7px;width:12px;position:absolute;font-size:11px;text-align: left;z-index: 4;' + margin;
                    }
                    var attributes = {
                        'id': documentEditor.element.id + '_RightTab' + '_' + i,
                        'class': 'e-de-ruler-tab e-de-ruler-tab-right',
                        style: style,
                        'data-name': 'RightTab'
                    };
                    rightTab = this.createHtmlElement('div', attributes);
                    rightTab.setAttribute('title', locale.getConstant('Right Tab'));
                    var svg = void 0;
                    // Create an SVG element
                    var attr = {
                        'id': documentEditor.element.id + '_rightTab_svg',
                        width: rulerSize.width / 2 + 'px',
                        height: rulerSize.height / 2 + 'px',
                        style: 'position:inherit;left:0px'
                    };
                    svg = this.createSvgElement('svg', attr);
                    svg.setAttribute("fill", "none");
                    var pathattr = {
                        style: 'position:inherit;left:0px'
                    };
                    // Create a path element inside the SVG
                    var pathElement = this.createSvgElement('path', pathattr);
                    pathElement.setAttribute("class", "e-de-ruler-tab-svg");
                    pathElement.setAttribute("d", "M5 5V1H7V7H1V5H5Z");
                    pathElement.setAttribute("fill", "#605E5C");
                    pathElement.setAttribute("stroke", "#A1A1A1");
                    // Append the path element to the SVG element
                    svg.appendChild(pathElement);
                    rightTab.appendChild(svg);
                    hRuler.append(rightTab);
                }
                break;
            case 'Decimal':
                var decimalTab = document.getElementById(documentEditor.element.id + '_DecimalTab' + '_' + i);
                if (!decimalTab) {
                    var style = '';
                    if (!isNullOrUndefined(tabStop)) {
                        value = this.position.paragraph.paragraphFormat.bidi ? (HelperMethods.convertPointToPixel(1584 - tabStop.position)) : (HelperMethods.convertPointToPixel(1584 + tabStop.position));
                        var margin = ('left:' + ((value * zoomFactor) - 4) + 'px;');
                        style = 'height:9px;overflow:hidden;top:7px;width:12px;position:absolute;font-size:11px;text-align: left;z-index: 4;' + margin;
                    }
                    var attributes = {
                        'id': documentEditor.element.id + '_DecimalTab' + '_' + i,
                        'class': 'e-de-ruler-tab e-de-ruler-tab-decimal',
                        style: style,
                        'data-name': 'DecimalTab'
                    };
                    decimalTab = this.createHtmlElement('div', attributes);
                    decimalTab.setAttribute('title', locale.getConstant('Decimal Tab'));
                    var svg = void 0;
                    // Create an SVG element
                    var attr = {
                        'id': documentEditor.element.id + '_decimalTab_svg',
                        width: rulerSize.width / 2 + 'px',
                        height: rulerSize.height / 2 + 'px',
                        style: 'position:inherit;left:0px'
                    };
                    svg = this.createSvgElement('svg', attr);
                    svg.setAttribute("fill", "none");
                    var pathattr = {
                        style: 'position:inherit;left:0px'
                    };
                    // Create a path element inside the SVG
                    var pathElement = this.createSvgElement('path', pathattr);
                    pathElement.setAttribute("class", "e-de-ruler-tab-svg");
                    pathElement.setAttribute("d", "M6 0H4V6H0V8H4H6H10V6H6V0Z");
                    pathElement.setAttribute("fill", "#605E5C");
                    pathElement.setAttribute("clip-rule", "evenodd");
                    pathElement.setAttribute("fill-rule", "evenodd");
                    pathElement.setAttribute("stroke", "#A1A1A1");
                    // Append the path element to the SVG element
                    svg.appendChild(pathElement);
                    decimalTab.appendChild(svg);
                    hRuler.append(decimalTab);
                }
                break;
            case 'Bar':
                var barTab = document.getElementById(documentEditor.element.id + '_BarTab' + '_' + i);
                if (!barTab) {
                    var style = '';
                    if (!isNullOrUndefined(tabStop)) {
                        value = this.position.paragraph.paragraphFormat.bidi ? (HelperMethods.convertPointToPixel(1584 - tabStop.position)) : (HelperMethods.convertPointToPixel(1584 + tabStop.position));
                        var margin = ('left:' + ((value - 1.5) * zoomFactor) + 'px;');
                        style = 'height:9px;overflow:hidden;top:7px;width:12px;position:absolute;font-size:11px;text-align: left;z-index: 4;' + margin;
                    }
                    var attributes = {
                        'id': documentEditor.element.id + '_BarTab' + '_' + i,
                        'class': 'e-de-ruler-tab e-de-ruler-tab-bar',
                        style: style,
                        'data-name': 'BarTab'
                    };
                    barTab = this.createHtmlElement('div', attributes);
                    barTab.setAttribute('title', locale.getConstant('Bar Tab'));
                    var svg = void 0;
                    // Create an SVG element
                    var attr = {
                        'id': documentEditor.element.id + '_barTab_svg',
                        width: rulerSize.width / 2 + 'px',
                        height: rulerSize.height / 2 + 'px',
                        style: 'position:inherit;left:0px'
                    };
                    svg = this.createSvgElement('svg', attr);
                    svg.setAttribute("fill", "none");
                    var rectAttr = {
                        style: 'position:inherit;left:0px'
                    };
                    var rect = this.createSvgElement('rect', rectAttr);
                    rect.setAttribute("width", "2");
                    rect.setAttribute("height", "8");
                    rect.setAttribute("fill", "#605E5C");
                    rect.setAttribute("stroke", "#A1A1A1");
                    // Append the path element to the SVG element
                    svg.appendChild(rect);
                    barTab.appendChild(svg);
                    hRuler.append(barTab);
                }
                break;
        }
        if (!isNullOrUndefined(tabStop)) {
            var tabStopElement_1 = document.getElementById(documentEditor.element.id + '_' + tabJustification + 'Tab' + '_' + i);
            if (!isNullOrUndefined(tabStop)) {
                tabStopElement_1.addEventListener("dblclick", function (event) {
                    documentEditor.showTabDialog();
                    event.stopPropagation();
                });
            }
            //Draggable for tab stop.
            var isDragging_5 = false;
            var tabStopOffset_1;
            var initialValue_5 = HelperMethods.getNumberFromString(tabStopElement_1.style.left); // for mouse up event
            var initialValue2 = HelperMethods.getNumberFromString(tabStopElement_1.style.left); // for mouse move event
            var justification_1 = tabStopElement_1.getAttribute('data-name');
            var currrentParagraph_1 = this.position.paragraph;
            var tabIndex_1 = 0;
            var currentTabStop_1 = undefined;
            tabStopElement_1.addEventListener("mousedown", function (e) {
                e.stopPropagation();
                isDragging_5 = true;
                tabStopOffset_1 = e.clientX - tabStopElement_1.getBoundingClientRect().left;
                initialValue_5 = HelperMethods.getNumberFromString(tabStopElement_1.style.left);
                tabIndex_1 = parseInt(tabStopElement_1.id.split('_')[3]);
                currentTabStop_1 = currrentParagraph_1.paragraphFormat.tabs[parseInt(tabIndex_1.toString(), 10)];
                _this.currentTabStopElement = tabStopElement_1;
                var rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin)
                    * documentEditor.zoomFactor;
                if (documentEditor.layoutType === 'Continuous') {
                    rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                    if (_this.position.paragraph.paragraphFormat.bidi) {
                        rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - (documentEditor.viewer.clientArea.width * documentEditor.zoomFactor);
                    }
                }
                var value = rulerZeroPoint + e.clientX - tabStopOffset_1 - hRuler.getBoundingClientRect().left;
                var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                startValue = documentEditor.layoutType === 'Continuous' ? 0 : startValue;
                var indicatorLineValue = startValue + (value - rulerZeroPoint);
                var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                lineSvg.style.left = indicatorLineValue + 'px';
                lineSvg.style.display = 'block';
            });
            tabStopElement_1.addEventListener('mouseup', function () {
                if (!isNullOrUndefined(_this.currentTabStopElement)) {
                    _this.currentTabStopElement = undefined;
                }
            });
            document.addEventListener('mousemove', function (e) {
                if (isDragging_5) {
                    var rulerZeroPoint = void 0;
                    if (documentEditor.layoutType === 'Continuous') {
                        rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20;
                        if (_this.position.paragraph.paragraphFormat.bidi) {
                            rulerZeroPoint = (documentEditor.hRuler.zeroPosition * documentEditor.zoomFactor) - 20 - (documentEditor.viewer.clientArea.width * documentEditor.zoomFactor);
                        }
                    }
                    else if (documentEditor.layoutType === 'Pages') {
                        rulerZeroPoint = HelperMethods.convertPointToPixel(1584 - documentEditor.selection.sectionFormat.leftMargin)
                            * documentEditor.zoomFactor;
                        if (_this.position.paragraph.bidi) {
                            rulerZeroPoint = HelperMethods.convertPointToPixel(1584 + documentEditor.selection.sectionFormat.rightMargin - documentEditor.selection.sectionFormat.pageWidth) * documentEditor.zoomFactor;
                        }
                    }
                    var value_3 = rulerZeroPoint + e.clientX - tabStopOffset_1 - hRuler.getBoundingClientRect().left;
                    var minValue = rulerZeroPoint;
                    var rightIndent = document.getElementById(documentEditor.element.id + '_rightIndent');
                    var rightIndentValue = HelperMethods.getNumberFromString(rightIndent.style.left);
                    var maxValue = rightIndentValue;
                    var leftIndent = document.getElementById(documentEditor.element.id + '_leftIndent');
                    var leftIndentValue = HelperMethods.getNumberFromString(leftIndent.style.left);
                    minValue = leftIndentValue;
                    if (_this.position.paragraph.paragraphFormat.bidi) {
                        minValue = rightIndentValue;
                        maxValue = leftIndentValue;
                    }
                    if (justification_1 === 'CenterTab' || justification_1 === 'DecimalTab') {
                        maxValue += 4;
                    }
                    else if (justification_1 === 'RightTab') {
                        maxValue += 5.5;
                    }
                    else {
                        maxValue += 1.5;
                    }
                    if (value_3 < minValue) {
                        value_3 = minValue;
                    }
                    else if (value_3 > maxValue) {
                        value_3 = maxValue;
                    }
                    tabStopElement_1.style.left = value_3 + 'px';
                    var startValue = documentEditor.documentHelper.currentPage.boundingRectangle.x;
                    startValue = documentEditor.layoutType === 'Continuous' ? 0 : startValue;
                    var indicatorLineValue = startValue + (value_3 - rulerZeroPoint) + 6;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.left = indicatorLineValue + 'px';
                }
            });
            document.addEventListener("mouseup", function () {
                if (isDragging_5 && !isNullOrUndefined(currentTabStop_1)) {
                    if (!isNullOrUndefined(_this.currentTabStopElement) && _this.currentTabStopElement.style.display == 'none') {
                        documentEditor.editor.removeTabStops([currrentParagraph_1], [currentTabStop_1]);
                        _this.currentTabStopElement.parentNode.removeChild(_this.currentTabStopElement);
                    }
                    else {
                        var finalValue = HelperMethods.getNumberFromString(tabStopElement_1.style.left);
                        initialValue_5 = finalValue;
                        documentEditor.editor.removeTabStops([currrentParagraph_1], [currentTabStop_1]);
                        finalValue = HelperMethods.convertPixelToPoint(finalValue / documentEditor.zoomFactor) - 1584;
                        finalValue = currrentParagraph_1.paragraphFormat.bidi ? finalValue * -1 : finalValue;
                        currentTabStop_1.position = finalValue;
                        documentEditor.editor.updateTabStopCollection(currrentParagraph_1, [currentTabStop_1]);
                    }
                    _this.updateTabStopMarkers(documentEditor);
                    isDragging_5 = false;
                    var lineSvg = document.getElementById(documentEditor.element.id + '_hRuler_indicator_svg');
                    lineSvg.style.display = 'none';
                    _this.currentTabStopElement = undefined;
                }
            });
        }
    };
    RulerHelper.prototype.updateMargin = function (ruler, documentEditor, isHorizontal) {
        if (isHorizontal) {
            ruler.startMargin = documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.leftMargin;
            ruler.endMargin = documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.rightMargin;
        }
        else {
            ruler.startMargin = documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.topMargin;
            ruler.endMargin = documentEditor.selection.end.paragraph.bodyWidget.sectionFormat.bottomMargin;
        }
    };
    RulerHelper.prototype.getTabJustification = function (dataNameValue) {
        switch (dataNameValue) {
            case 'LeftTab':
                return 'Left';
            case 'CenterTab':
                return 'Center';
            case 'RightTab':
                return 'Right';
            case 'DecimalTab':
                return 'Decimal';
            case 'BarTab':
                return 'Bar';
        }
        return 'Left';
    };
    /**
 * getRulerSize method \
 *
 * @returns {void} getRulerSize method .\
 * @param { DocumentEditor} documentEditor - provide the documentEditor  value.
 * @private
 */
    RulerHelper.prototype.getRulerSize = function (documentEditor) {
        var top = 0;
        var left = 0;
        //if (diagram.rulerSettings.showRulers) {
        // top = documentEditor.documentEditorSettings.rulerSettings.horizontalRuler.thickness;
        // left = documentEditor.documentEditorSettings.rulerSettings.verticalRuler.thickness;
        top = 15;
        left = 15;
        //}
        return new Size(left, top);
    };
    return RulerHelper;
}());
export { RulerHelper };
