/**
 * Defines area type of chart. They are
 * * none
 * * cartesianAxes
 * * polarAxes
 *
 * @private
 */
export declare type ChartAreaType = 
/**  Cartesian panel. */
'CartesianAxes' | 
/**  Polar panel. */
'PolarAxes';
/**
 * Defines series type of chart. They are
 * * xy
 * * highLow
 *
 * @private
 */
export declare type SeriesValueType = 
/**  XY value. */
'XY' | 
/**  HighLow value. */
'HighLow' | 
/**  HighLowOpenClose value. */
'HighLowOpenClose' | 
/** BoxPlot */
'BoxPlot';
/**
 * Defines the segment axis. They are,
 * * X - Segment calculation rendered based on horizontal axis
 * * Y - Segment calculation rendered based on vertical axis
 */
export declare type Segment = 
/** Segment calculation rendered based on horizontal axis */
'X' | 
/** Segment calculation rendered based on verticalal axis */
'Y';
/**
 * Defines the unit of Strip line Size. They are
 * * auto
 * * pixel
 * * year
 * * month
 * * day
 * * hour
 * * minutes
 * * seconds
 */
export declare type SizeType = 
/**  Auto - In numeric axis, it will consider a number and DateTime axis, it will consider as milliseconds. */
'Auto' | 
/**  Pixel - The stripline gets their size in pixel */
'Pixel' | 
/**  Years - The stipline size is based on year in the DateTime axis. */
'Years' | 
/**  Months - The stipline size is based on month in the DateTime axis. */
'Months' | 
/**  Days - The stipline size is based on day in the DateTime axis. */
'Days' | 
/**  Hours - The stipline size is based on hour in the DateTime axis. */
'Hours' | 
/**  Minutes - The stipline size is based on minutes in the DateTime axis. */
'Minutes' | 
/**  Seconds - The stipline size is based on seconds in the DateTime axis. */
'Seconds';
/**
 * Defines the type series in chart. They are
 * * line - Renders the line series.
 * * column - Renders the column series.
 * * area - Renders the area series.
 * * pie - Renders the pie series.
 * * polar - Renders the polar series.
 * * radar - Renders the radar series.
 * * bar - Renders the stacking column series
 * * histogram - Renders the histogram series
 * * stackingColumn - Renders the stacking column series.
 * * stackingArea - Renders the stacking area series.
 * * stackingLine - Renders the stacking line series.
 * * stackingBar - Renders the stacking bar series.
 * * StackingColumn100 - Renders the stacking column series.
 * * StackingArea100 - Renders the stacking area 100 percent series
 * * stackingLine100 - Renders the stacking line 100 percent series.
 * * StackingBar100 - Renders the stacking bar 100 percent series.
 * * stepLine -  Renders the step line series.
 * * stepArea -  Renders the step area series.
 * * scatter - Renders the scatter series.
 * * spline - Renders the spline series
 * * rangeColumn - Renders the rangeColumn series.
 * * hilo - Renders the hilo series
 * * hiloOpenClose - Renders the HiloOpenClose Series
 * * Waterfall - Renders the Waterfall Series
 * * rangeArea - Renders the rangeArea series.
 * * rangeStepArea - Renders the rangeStepArea series.
 * * splineRangeArea - Renders the splineRangeArea series.
 * * Pareto-Render the Pareto series
 */
export declare type ChartSeriesType = 
/**  Define the line series. */
'Line' | 
/**  Define the Column series. */
'Column' | 
/**  Define the Area series. */
'Area' | 
/**  Define the Bar series. */
'Bar' | 
/**  Define the Histogram series. */
'Histogram' | 
/**  Define the StackingColumn series. */
'StackingColumn' | 
/**  Define the StackingArea series. */
'StackingArea' | 
/**  Define the StackingStepArea series. */
'StackingStepArea' | 
/**  Define the StackingLine series. */
'StackingLine' | 
/**  Define the StackingBar series. */
'StackingBar' | 
/**  Define the Stepline series. */
'StepLine' | 
/**  Define the Steparea series. */
'StepArea' | 
/**  Define the Steparea series. */
'SplineArea' | 
/**  Define the Scatter series. */
'Scatter' | 
/**  Define the Spline series. */
'Spline' | 
/** Define the StackingColumn100 series */
'StackingColumn100' | 
/** Define the StackingBar100 series */
'StackingBar100' | 
/** Define the StackingLine100 series */
'StackingLine100' | 
/** Define the StackingArea100 series */
'StackingArea100' | 
/** Define the RangeColumn Series */
'RangeColumn' | 
/** Define the RangeStepArea Series */
'RangeStepArea' | 
/** Define the Hilo Series */
'Hilo' | 
/** Define the HiloOpenClose Series */
'HiloOpenClose' | 
/** Define the Waterfall Series */
'Waterfall' | 
/** Define the RangeArea Series */
'RangeArea' | 
/** Define the SplineRangeArea Series */
'SplineRangeArea' | 
/** Define the Bubble Series */
'Bubble' | 
/** Define the Candle Series */
'Candle' | 
/** Define the polar series */
'Polar' | 
/** Define the radar series */
'Radar' | 
/** Define the Box and whisker Series */
'BoxAndWhisker' | 
/** Define the multi color line series */
'MultiColoredLine' | 
/** Define the multi color area series */
'MultiColoredArea' | 
/** Define the Pareto series */
'Pareto';
/**
 * * Type of series to be drawn in radar or polar series. They are
 * * line - Renders the line series.
 * * column - Renders the column series.
 * * area - Renders the area series.
 * * scatter - Renders the scatter series.
 * * spline - Renders the spline series.
 * * stackingColumn - Renders the stacking column series.
 * * stackingArea - Renders the stacking area series.
 * * rangeColumn - Renders the range column series.
 * * splineArea - Renders the spline area series.
 */
export declare type ChartDrawType = 
/**  Define the line series. */
'Line' | 
/**  Define the Column series. */
'Column' | 
/**  Define the stacking Column series. */
'StackingColumn' | 
/**  Define the Area series. */
'Area' | 
/**  Define the Scatter series. */
'Scatter' | 
/** Define the Range column series */
'RangeColumn' | 
/** Define the Spline series */
'Spline' | 
/** Define the Spline Area series */
'SplineArea' | 
/** Define the spline series */
'StackingArea' | 
/** Define the Stacking line series */
'StackingLine';
/**
 * Defines the shape of marker. They are
 * * circle - Renders a circle.
 * * rectangle - Renders a rectangle.
 * * triangle - Renders a triangle.
 * * diamond - Renders a diamond.
 * * cross - Renders a cross.
 * * Plus - Renders a Plus.
 * * horizontalLine - Renders a horizontalLine.
 * * verticalLine - Renders a verticalLine.
 * * pentagon- Renders a pentagon.
 * * invertedTriangle - Renders a invertedTriangle.
 * * image - Renders a image.
 */
export declare type ChartShape = 
/** Specifies the shape of the marker as a circle symbol. */
'Circle' | 
/** Specifies the shape of the marker as a Rectangle symbol. */
'Rectangle' | 
/** Specifies the shape of the marker as a Triangle symbol. */
'Triangle' | 
/** Specifies the shape of the marker as a Diamond symbol. */
'Diamond' | 
/** Specifies the shape of the marker as a cross symbol. */
'Cross' | 
/** Specifies the shape of the marker as a plus symbol. */
'Plus' | 
/** Specifies the shape of the marker as a HorizontalLine symbol. */
'HorizontalLine' | 
/** Specifies the shape of the marker as a VerticalLine symbol. */
'VerticalLine' | 
/** Specifies the shape of the marker as a Pentagon symbol. */
'Pentagon' | 
/** Specifies the shape of the marker as a InvertedTriangle symbol. */
'InvertedTriangle' | 
/** Specifies the shape of the marker as a Image symbol. */
'Image' | 
/** Specifies the shape of the marker as a none */
'None';
/**
 * Defines the type of error bar. They are
 * * fixed -  Renders a fixed type error bar.
 * * percentage - Renders a percentage type error bar.
 * * standardDeviation - Renders a standard deviation type error bar.
 * * standardError -Renders a standard error type error bar.
 * * custom -Renders a custom type error bar.
 */
export declare type ErrorBarType = 
/** Define the Fixed type. */
'Fixed' | 
/** Define the Percentage type. */
'Percentage' | 
/** Define the StandardDeviation type . */
'StandardDeviation' | 
/** Define the StandardError type . */
'StandardError' | 
/** Define the Custom type . */
'Custom';
/**
 * Defines the direction of error bar. They are
 * * both -  Renders both direction of error bar.
 * * minus - Renders minus direction of error bar.
 * * plus - Renders plus direction error bar.
 */
export declare type ErrorBarDirection = 
/** Define the Both direction. */
'Both' | 
/** Define the Minus direction. */
'Minus' | 
/** Define the Plus direction . */
'Plus';
/**
 * Defines the modes of error bar. They are
 * * vertical -  Renders a vertical error bar.
 * * horizontal - Renders a horizontal error bar.
 * * both - Renders both side error bar.
 */
export declare type ErrorBarMode = 
/** Define the Vertical mode. */
'Vertical' | 
/** Define the Horizontal mode. */
'Horizontal' | 
/** Define the Both mode . */
'Both';
/**
 * Defines the mode of line in crosshair. They are
 * * none - Hides both vertical and horizontal crosshair line.
 * * both - Shows both vertical and horizontal crosshair line.
 * * vertical - Shows the vertical line.
 * * horizontal - Shows the horizontal line.
 */
export declare type LineType = 
/** Hides both vertical and horizontal crosshair line. */
'None' | 
/** Shows both vertical and horizontal crosshair line. */
'Both' | 
/** Shows the vertical line. */
'Vertical' | 
/** Shows the horizontal line. */
'Horizontal';
export declare type MacdType = 'Line' | 'Histogram' | 'Both';
/**
 * Defines the zooming mode, They are.
 * * x,y - Chart will be zoomed with respect to both vertical and horizontal axis.
 * * x - Chart will be zoomed with respect to horizontal axis.
 * * y - Chart will be zoomed with respect to vertical axis.
 */
export declare type ZoomMode = 
/** Chart will be zoomed with respect to both vertical and horizontal axis. */
'XY' | 
/** Chart will be zoomed with respect to horizontal axis. */
'X' | 
/** Chart will be zoomed with respect to vertical axis. */
'Y';
/**
 * Defines the ZoomingToolkit, They are.
 * * zoom - Renders the zoom button.
 * * zoomIn - Renders the zoomIn button.
 * * zoomOut - Renders the zoomOut button.
 * * pan - Renders the pan button.
 * * reset - Renders the reset button.
 */
export declare type ToolbarItems = 
/** Renders the zoom button. */
'Zoom' | 
/** Renders the zoomIn button. */
'ZoomIn' | 
/** Renders the zoomOut button. */
'ZoomOut' | 
/** Renders the pan button. */
'Pan' | 
/** Renders the reset button. */
'Reset';
/**
 * Defines the Alignment. They are
 * * none - Shows all the labels.
 * * hide - Hide the label when it intersect.
 * *
 */
export declare type DataLabelIntersectAction = 
/** Shows all the labels. */
'None' | 
/** Hide the label when it intersect. It is also applicable for polar radar chart */
'Hide' | 
/** Rotate the label to 90 degree when it intersect. */
'Rotate90';
/**
 * Defines the Position. They are
 * * inside - Place the ticks or labels inside to the axis line.
 * * outside - Place the ticks or labels outside to the axis line.
 * *
 */
export declare type AxisPosition = 
/** Place the ticks or labels inside to the axis line. */
'Inside' | 
/** Place the ticks or labels outside to the axis line. */
'Outside';
/**
 *  Specifies the order of the strip line. `Over` | `Behind`.
 * * Over - Places the strip line over the series elements.
 * * Behind - laces the strip line behind the series elements.
 */
export declare type ZIndex = 
/** Places the strip line over the series elements. */
'Over' | 
/** Places the strip line behind the series elements. */
'Behind';
/**
 * Defines the strip line text position.
 * * Start - Places the strip line text at the start.
 * * Middle - Places the strip line text in the middle.
 * * End - Places the strip line text at the end.
 */
export declare type Anchor = 
/** Places the strip line text at the start. */
'Start' | 
/** Places the strip line text in the middle. */
'Middle' | 
/** Places the strip line text at the end. */
'End';
/**
 * Defines the tooltip fade out mode of the chart.
 * * Click - Used to remove the tooltip on click.
 * * Move - Used to remove the tooltip with some delay.
 */
export declare type FadeOutMode = 
/** Used to remove the tooltip on click  */
'Click' | 
/** Used to remove the tooltip with some delay  */
'Move';
/**
 * Defines the tooltip position. They are
 * * fixed - Place the tooltip in the fixed position.
 * * nearest- Tooltip moves along with the mouse.
 * *
 */
export declare type TooltipPosition = 
/** Place the tooltip in the fixed position. */
'Fixed' | 
/** Tooltip moves along with the mouse. */
'Nearest';
/**
 * Defines the type of technical indicators. They are
 * * Sma - Predicts the trend using Simple Moving Average approach
 * * Ema - Predicts the trend using Exponential Moving Average approach
 * * Tma - Predicts the trend using Triangle Moving Average approach
 * * Atr - Predicts the trend using Average True Range approach
 * * AccumulationDistribution - Predicts the trend using Accumulation Distribution approach
 * * Momentum - Predicts the trend using Momentum approach
 * * Rsi - Predicts the trend using RSI approach
 * * Macd - Predicts the trend using Moving Average Convergence Divergence approach
 * * Stochastic - Predicts the trend using Stochastic approach
 * * BollingerBands - Predicts the trend using Bollinger approach
 */
export declare type TechnicalIndicators = 
/** Predicts the trend using Simple Moving Average approach */
'Sma' | 
/** Predicts the trend using Exponential Moving Average approach */
'Ema' | 
/** Predicts the trend using Triangle Moving Average approach */
'Tma' | 
/** Predicts the trend using Momentum approach */
'Momentum' | 
/** Predicts the trend using Average True Range approach */
'Atr' | 
/** Predicts the trend using Accumulation Distribution approach */
'AccumulationDistribution' | 
/** Predicts the trend using Bollinger approach */
'BollingerBands' | 
/** Predicts the trend using Moving Average Convergence Divergence approach */
'Macd' | 
/** Predicts the trend using Stochastic approach */
'Stochastic' | 
/** Predicts the trend using RSI approach */
'Rsi';
/**
 * Defines the type of trendlines. They are
 * * Linear - Defines the linear trendline
 * * Exponential - Defines the exponential trendline
 * * Polynomial - Defines the polynomial trendline
 * * Power - Defines the power trendline
 * * Logarithmic - Defines the logarithmic trendline
 * * MovingAverage - Defines the moving average trendline
 */
export declare type TrendlineTypes = 
/** Defines the linear trendline */
'Linear' | 
/** Defines the exponential trendline */
'Exponential' | 
/** Defines the polynomial trendline */
'Polynomial' | 
/** Defines the power trendline */
'Power' | 
/** Defines the logarithmic trendline */
'Logarithmic' | 
/** Defines the moving average trendline */
'MovingAverage';
/**
 * Defines the financial data fields
 * * High - Represents the highest price in the stocks over time
 * * Low - Represents the lowest price in the stocks over time
 * * Open - Represents the opening price in the stocks over time
 * * Close - Represents the closing price in the stocks over time
 */
export declare type FinancialDataFields = 
/** Represents the highest price in the stocks over time */
'High' | 
/** Represents the lowest price in the stocks over time */
'Low' | 
/** Represents the opening price in the stocks over time */
'Open' | 
/** Represents the closing price in the stocks over time */
'Close';
/**
 * It defines type of spline.
 * Natural - Used to render Natural spline.
 * Cardinal - Used to render cardinal spline.
 * Clamped - Used to render Clamped spline
 * Monotonic - Used to render monotonic spline
 */
export declare type SplineType = 
/** Used to render natural spline type */
'Natural' | 
/** Used to render Monotonicspline  */
'Monotonic' | 
/** Used to render Cardinal */
'Cardinal' | 
/** Used to render Clamped */
'Clamped';
/**
 * Defines the BoxPlotMode for box and whisker chart series, They are.
 * * exclusive - Series render based on exclusive mode.
 * * inclusive - Series render based on inclusive mode.
 * * normal - Series render based on normal mode.
 */
export declare type BoxPlotMode = 
/** Defines the Exclusive mode. */
'Exclusive' | 
/** Defines the InClusive mode. */
'Inclusive' | 
/** Defines the Normal mode. */
'Normal';
/**
 * Defines border type for multi level labels.
 *  * Rectangle
 *  * Brace
 *  * WithoutBorder
 *  * Without top Border
 *  * Without top and bottom border
 *  * Curly brace
 */
export declare type BorderType = 
/** Rectangle */
'Rectangle' | 
/** Brace */
'Brace' | 
/** WithoutBorder */
'WithoutBorder' | 
/** WithoutTopBorder */
'WithoutTopBorder' | 
/** WithoutTopandBottomBorder */
'WithoutTopandBottomBorder' | 
/** CurlyBrace */
'CurlyBrace';
export declare type LegendMode = 
/** Render legend items based on visible series */
'Series' | 
/** Render legend items based on points  */
'Point' | 
/** Render legend item based on range color mapping conditions */
'Range' | 
/** Render legend items based on range color mapping conditions */
'Gradient';
/**
 * Defines the position for the steps in the step line, step area, and step range area chart types.
 * * Left: Steps start from the left side of the 2nd point.
 * * Center: Steps start between the data points.
 * * Right: Steps start from the right side of the 1st point.
 */
export declare type StepPosition = 
/** Steps start from the left side of the 2nd point.*/
'Left' | 
/** Steps start from the right side of the 1st point.*/
'Right' | 
/** Steps start between the data points.*/
'Center';
